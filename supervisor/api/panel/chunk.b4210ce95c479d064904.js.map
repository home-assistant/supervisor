{"version":3,"sources":["webpack:///src/form-element.ts","webpack:///constants.ts","webpack:///foundation.ts","webpack:///src/mwc-switch-base.ts","webpack:///src/mwc-switch.ts","webpack:///src/mwc-switch-css.ts","webpack:///../src/lib/updating-element.ts","webpack:///../src/lib/decorators.ts","webpack:///../src/lib/css-tag.ts","webpack:///src/lit-element.ts"],"names":["FormElement","_BaseElement","_inherits","base_element","_super","_createSuper","_classCallCheck","this","apply","arguments","key","value","attachShadow","mode","delegatesFocus","formElement","focus","click","label","setAttribute","_this","_get","_getPrototypeOf","prototype","call","mdcRoot","addEventListener","e","dispatchEvent","Event","cssClasses","CHECKED","DISABLED","strings","ARIA_CHECKED_ATTR","NATIVE_CONTROL_SELECTOR","RIPPLE_SURFACE_SELECTOR","switch_foundation","MDCSwitchFoundation","adapter","tslib_es6","defaultAdapter","Object","defineProperty","addClass","removeClass","setNativeControlChecked","setNativeControlDisabled","setNativeControlAttr","setChecked","checked","adapter_","updateAriaChecked_","updateCheckedStyling_","setDisabled","disabled","handleChange","evt","nativeControl","target","foundation","mwc_switch_base_SwitchBase","_FormElement","mwc_switch_base_inherits","SwitchBase","mwc_switch_base_createSuper","mwc_switch_base_classCallCheck","mdcFoundationClass","mdcFoundation","_this2","assign","attr","lit_element","_templateObject","ripple_directive","interactionNode","_changeHandler","get","rippleNode","ripple","type","Boolean","observer","Switch","_SwitchBase","mwc_switch_inherits","mwc_switch_createSuper","mwc_switch_classCallCheck","styles","mwc_switch_css","style","lit_element__WEBPACK_IMPORTED_MODULE_0__","window","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","Array","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","UpdatingElement","_HTMLElement","_wrapNativeSuper","HTMLElement","_updateState","_instanceProperties","undefined","_updatePromise","Promise","res","_enableUpdatingResolver","_changedProperties","Map","_reflectingProperties","initialize","_saveInstanceProperties","_requestUpdate","constructor","_classProperties","forEach","_v","p","hasOwnProperty","set","_this3","v","enableUpdating","name","_attributeToProperty","options","length","ctor","_attributeNameForProperty","attrValue","_propertyValueToAttribute","removeAttribute","propName","_attributeToPropertyMap","getPropertyOptions","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","has","_hasRequestedUpdate","_enqueueUpdate","updateComplete","_enqueueUpdate2","regeneratorRuntime","mark","_callee","result","wrap","_context","prev","next","t0","performUpdate","abrupt","stop","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","_this4","size","k","_propertyToAttribute","_getUpdateComplete","_this5","superProperties","getPrototypeOf","_ensureClassProperties","noAccessor","_typeof","Symbol","concat","descriptor","getPropertyDescriptor","_options","configurable","enumerable","superCtor","finalize","_step","props","properties","_iterator","_createForOfIteratorHelper","_toConsumableArray","getOwnPropertyNames","getOwnPropertySymbols","s","n","done","createProperty","err","f","toLowerCase","_this6","attributes","push","customElement","tagName","classOrDescriptor","clazz","customElements","define","legacyCustomElement","kind","elements","finisher","standardCustomElement","standardProperty","element","placement","initializer","legacyProperty","proto","property","protoOrDescriptor","query","selector","renderRoot","querySelector","legacyQuery","standardQuery","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","css_tag_classCallCheck","Error","_styleSheet","replaceSync","css","_len","values","_key","reduce","acc","idx","textFromCSSResult","renderNotImplemented","lit_element_LitElement","_UpdatingElement","lit_element_inherits","LitElement","lit_element_createSuper","lit_element_classCallCheck","userStyles","getStyles","_styles","isArray","addStyles","reduceRight","add","Set","unshift","lit_element_getPrototypeOf","_getUniqueStyles","createRenderRoot","ShadowRoot","adoptStyles","ShadyCSS","nativeShadow","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","hasUpdated","styleElement","templateResult","render","scopeName","eventContext","document","createElement","textContent","appendChild","shady_render"],"mappings":"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","file":"chunk.b4210ce95c479d064904.js","sourcesContent":["/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport {addHasRemoveClass, BaseElement, CustomEventListener, EventType, SpecificEventListener} from './base-element.js';\n\nexport {\n  addHasRemoveClass,\n  BaseElement,\n  CustomEventListener,\n  EventType,\n  SpecificEventListener\n};\n\nexport interface HTMLElementWithRipple extends HTMLElement {\n  ripple?: RippleInterface;\n}\n\nexport interface RippleInterface {\n  activate: (e?: Event) => void;\n  deactivate: () => void;\n  handleFocus: () => void;\n  handleBlur: () => void;\n}\n\nexport abstract class FormElement extends BaseElement {\n  /**\n   * Form-capable element in the component ShadowRoot.\n   *\n   * Define in your component with the `@query` decorator\n   */\n  protected abstract formElement: HTMLElement;\n\n  protected createRenderRoot() {\n    return this.attachShadow({mode: 'open', delegatesFocus: true});\n  }\n\n  /**\n   * Implement ripple getter for Ripple integration with mwc-formfield\n   */\n  readonly ripple?: RippleInterface|Promise<RippleInterface|null>;\n\n  click() {\n    if (this.formElement) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  setAriaLabel(label: string) {\n    if (this.formElement) {\n      this.formElement.setAttribute('aria-label', label);\n    }\n  }\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.mdcRoot.addEventListener('change', (e) => {\n      this.dispatchEvent(new Event('change', e));\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/** CSS classes used by the switch. */\nvar cssClasses = {\n    /** Class used for a switch that is in the \"checked\" (on) position. */\n    CHECKED: 'mdc-switch--checked',\n    /** Class used for a switch that is disabled. */\n    DISABLED: 'mdc-switch--disabled',\n};\n/** String constants used by the switch. */\nvar strings = {\n    /** Aria attribute for checked or unchecked state of switch */\n    ARIA_CHECKED_ATTR: 'aria-checked',\n    /** A CSS selector used to locate the native HTML control for the switch.  */\n    NATIVE_CONTROL_SELECTOR: '.mdc-switch__native-control',\n    /** A CSS selector used to locate the ripple surface element for the switch. */\n    RIPPLE_SURFACE_SELECTOR: '.mdc-switch__thumb-underlay',\n};\nexport { cssClasses, strings };\n//# sourceMappingURL=constants.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar MDCSwitchFoundation = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCSwitchFoundation, _super);\n    function MDCSwitchFoundation(adapter) {\n        return _super.call(this, tslib_1.__assign({}, MDCSwitchFoundation.defaultAdapter, adapter)) || this;\n    }\n    Object.defineProperty(MDCSwitchFoundation, \"strings\", {\n        /** The string constants used by the switch. */\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSwitchFoundation, \"cssClasses\", {\n        /** The CSS classes used by the switch. */\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSwitchFoundation, \"defaultAdapter\", {\n        /** The default Adapter for the switch. */\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                setNativeControlChecked: function () { return undefined; },\n                setNativeControlDisabled: function () { return undefined; },\n                setNativeControlAttr: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Sets the checked state of the switch. */\n    MDCSwitchFoundation.prototype.setChecked = function (checked) {\n        this.adapter_.setNativeControlChecked(checked);\n        this.updateAriaChecked_(checked);\n        this.updateCheckedStyling_(checked);\n    };\n    /** Sets the disabled state of the switch. */\n    MDCSwitchFoundation.prototype.setDisabled = function (disabled) {\n        this.adapter_.setNativeControlDisabled(disabled);\n        if (disabled) {\n            this.adapter_.addClass(cssClasses.DISABLED);\n        }\n        else {\n            this.adapter_.removeClass(cssClasses.DISABLED);\n        }\n    };\n    /** Handles the change event for the switch native control. */\n    MDCSwitchFoundation.prototype.handleChange = function (evt) {\n        var nativeControl = evt.target;\n        this.updateAriaChecked_(nativeControl.checked);\n        this.updateCheckedStyling_(nativeControl.checked);\n    };\n    /** Updates the styling of the switch based on its checked state. */\n    MDCSwitchFoundation.prototype.updateCheckedStyling_ = function (checked) {\n        if (checked) {\n            this.adapter_.addClass(cssClasses.CHECKED);\n        }\n        else {\n            this.adapter_.removeClass(cssClasses.CHECKED);\n        }\n    };\n    MDCSwitchFoundation.prototype.updateAriaChecked_ = function (checked) {\n        this.adapter_.setNativeControlAttr(strings.ARIA_CHECKED_ATTR, \"\" + !!checked);\n    };\n    return MDCSwitchFoundation;\n}(MDCFoundation));\nexport { MDCSwitchFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCSwitchFoundation;\n//# sourceMappingURL=foundation.js.map","/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {addHasRemoveClass, FormElement, HTMLElementWithRipple} from '@material/mwc-base/form-element.js';\nimport {observer} from '@material/mwc-base/observer.js';\nimport {ripple} from '@material/mwc-ripple/ripple-directive.js';\nimport {MDCSwitchAdapter} from '@material/switch/adapter';\nimport MDCSwitchFoundation from '@material/switch/foundation.js';\nimport {html, property, query} from 'lit-element';\n\nexport class SwitchBase extends FormElement {\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setChecked(value);\n  })\n  checked = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setDisabled(value);\n  })\n  disabled = false;\n\n  @query('.mdc-switch') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  protected mdcFoundation!: MDCSwitchFoundation;\n\n  private _changeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n\n  protected readonly mdcFoundationClass = MDCSwitchFoundation;\n\n  protected createAdapter(): MDCSwitchAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      setNativeControlChecked: (checked: boolean) => {\n        this.formElement.checked = checked;\n      },\n      setNativeControlDisabled: (disabled: boolean) => {\n        this.formElement.disabled = disabled;\n      },\n      setNativeControlAttr: (attr, value) => {\n        this.formElement.setAttribute(attr, value);\n      },\n    };\n  }\n\n  get ripple() {\n    return this.rippleNode.ripple;\n  }\n\n  @query('.mdc-switch__thumb-underlay')\n  protected rippleNode!: HTMLElementWithRipple;\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\" .ripple=\"${ripple({\n      interactionNode: this\n    })}\">\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._changeHandler}\">\n          </div>\n        </div>\n      </div>\n      <slot></slot>`;\n  }\n}\n","/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {customElement} from 'lit-element';\n\nimport {SwitchBase} from './mwc-switch-base.js';\nimport {style} from './mwc-switch-css.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'mwc-switch': Switch;\n  }\n}\n\n@customElement('mwc-switch')\nexport class Switch extends SwitchBase {\n  static styles = style;\n}\n","/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {css} from 'lit-element';\n\nexport const style = css`.mdc-switch__thumb-underlay{left:-18px;right:initial;top:-17px;width:48px;height:48px}[dir=rtl] .mdc-switch__thumb-underlay,.mdc-switch__thumb-underlay[dir=rtl]{left:initial;right:-18px}.mdc-switch__native-control{width:68px;height:48px}.mdc-switch{display:inline-block;position:relative;outline:none;user-select:none}.mdc-switch.mdc-switch--checked .mdc-switch__track{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-switch.mdc-switch--checked .mdc-switch__thumb{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786);border-color:#018786;border-color:var(--mdc-theme-secondary, #018786)}.mdc-switch:not(.mdc-switch--checked) .mdc-switch__track{background-color:#000}.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb{background-color:#fff;border-color:#fff}.mdc-switch__native-control{left:0;right:initial;position:absolute;top:0;margin:0;opacity:0;cursor:pointer;pointer-events:auto;transition:transform 90ms cubic-bezier(0.4, 0, 0.2, 1)}[dir=rtl] .mdc-switch__native-control,.mdc-switch__native-control[dir=rtl]{left:initial;right:0}.mdc-switch__track{box-sizing:border-box;width:32px;height:14px;border:1px solid;border-radius:7px;opacity:.38;transition:opacity 90ms cubic-bezier(0.4, 0, 0.2, 1),background-color 90ms cubic-bezier(0.4, 0, 0.2, 1),border-color 90ms cubic-bezier(0.4, 0, 0.2, 1);border-color:transparent}.mdc-switch__thumb-underlay{display:flex;position:absolute;align-items:center;justify-content:center;transform:translateX(0);transition:transform 90ms cubic-bezier(0.4, 0, 0.2, 1),background-color 90ms cubic-bezier(0.4, 0, 0.2, 1),border-color 90ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-switch__thumb{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 1px 5px 0px rgba(0,0,0,.12);box-sizing:border-box;width:20px;height:20px;border:10px solid;border-radius:50%;pointer-events:none;z-index:1}.mdc-switch--checked .mdc-switch__track{opacity:.54}.mdc-switch--checked .mdc-switch__thumb-underlay{transform:translateX(20px)}[dir=rtl] .mdc-switch--checked .mdc-switch__thumb-underlay,.mdc-switch--checked .mdc-switch__thumb-underlay[dir=rtl]{transform:translateX(-20px)}.mdc-switch--checked .mdc-switch__native-control{transform:translateX(-20px)}[dir=rtl] .mdc-switch--checked .mdc-switch__native-control,.mdc-switch--checked .mdc-switch__native-control[dir=rtl]{transform:translateX(20px)}.mdc-switch--disabled{opacity:.38;pointer-events:none}.mdc-switch--disabled .mdc-switch__thumb{border-width:1px}.mdc-switch--disabled .mdc-switch__native-control{cursor:default;pointer-events:none}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb-underlay::before,.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb-underlay::after{background-color:#9e9e9e}.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb-underlay:hover::before{opacity:.08}.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb-underlay.mdc-ripple-upgraded--background-focused::before,.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb-underlay:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb-underlay:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb-underlay:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb-underlay.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-switch__thumb-underlay{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-switch__thumb-underlay::before,.mdc-switch__thumb-underlay::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}.mdc-switch__thumb-underlay::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-switch__thumb-underlay.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-switch__thumb-underlay.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-switch__thumb-underlay.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-switch__thumb-underlay.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-switch__thumb-underlay.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-switch__thumb-underlay::before,.mdc-switch__thumb-underlay::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-switch__thumb-underlay.mdc-ripple-upgraded::before,.mdc-switch__thumb-underlay.mdc-ripple-upgraded::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-switch__thumb-underlay.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-switch__thumb-underlay::before,.mdc-switch__thumb-underlay::after{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-switch__thumb-underlay:hover::before{opacity:.04}.mdc-switch__thumb-underlay.mdc-ripple-upgraded--background-focused::before,.mdc-switch__thumb-underlay:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-switch__thumb-underlay:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-switch__thumb-underlay:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-switch__thumb-underlay.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}:host{outline:none}`;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|\n    ((value: string|null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * Map of changed properties with old values. Takes an optional generic\n * interface corresponding to the declared element properties.\n */\n// tslint:disable-next-line:no-any\nexport type PropertyValues<T = any> =\n    keyof T extends PropertyKey ? Map<keyof T, unknown>: never;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY;\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static[finalized] = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a PropertyDeclaration for the property with the given options.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   *\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    const descriptor = this.getPropertyDescriptor(name, key, options);\n    if (descriptor !== undefined) {\n      Object.defineProperty(this.prototype, name, descriptor);\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   *   class MyElement extends LitElement {\n   *     static getPropertyDescriptor(name, key, options) {\n   *       const defaultDescriptor =\n   *           super.getPropertyDescriptor(name, key, options);\n   *       const setter = defaultDescriptor.set;\n   *       return {\n   *         get: defaultDescriptor.get,\n   *         set(value) {\n   *           setter.call(this, value);\n   *           // custom action.\n   *         },\n   *         configurable: true,\n   *         enumerable: true\n   *       }\n   *     }\n   *   }\n   *\n   * @nocollapse\n   */\n  protected static getPropertyDescriptor(\n      name: PropertyKey, key: string|symbol, _options: PropertyDeclaration) {\n    return {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)._requestUpdate(name, oldValue);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a PropertyDeclaration via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override `createProperty`.\n   *\n   * @nocollapse\n   * @final\n   */\n  protected static getPropertyOptions(name: PropertyKey) {\n    return this._classProperties && this._classProperties.get(name) ||\n        defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n    this[finalized] = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private _updatePromise =\n      new Promise((res) => this._enableUpdatingResolver = res);\n  private _enableUpdatingResolver: (() => void)|undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this._requestUpdate();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection.\n    this.enableUpdating();\n  }\n\n  protected enableUpdating() {\n    if (this._enableUpdatingResolver !== undefined) {\n      this._enableUpdatingResolver();\n      this._enableUpdatingResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    const propName = (ctor._attributeToPropertyMap as AttributeMap).get(name);\n    if (propName !== undefined) {\n      const options = ctor.getPropertyOptions(propName);\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This private version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  private _requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      const options = ctor.getPropertyOptions(name);\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._updatePromise = this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this._requestUpdate(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this._updatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    const result = this.performUpdate();\n    // If `performUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this._hasRequestedUpdate;\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      } else {\n        this._markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n      throw e;\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n  protected _getUpdateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n    this._markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n *\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the internalProperty decorator.\n *\n * @example\n *\n *     class MyElement {\n *       @property({ type: Boolean })\n *       clicked = false;\n *     }\n *\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n */\nexport function internalProperty(options?: InternalPropertyDeclaration) {\n  return property({attribute: false, hasChanged: options?.hasChanged});\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @query('#first')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n *\n */\nexport function query(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @queryAsync('#first')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n *\n *     // external usage\n *     async doSomethingWithFirst() {\n *      (await aMyElement.first).doSomething();\n *     }\n */\nexport function queryAsync(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      async get(this: LitElement) {\n        await this.updateComplete;\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n *\n *     class MyElement {\n *       @queryAll('div')\n *       divs;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *       clicked = false;\n *\n *       render() {\n *         return html`\n *           <div @click=${this._onClick}`>\n *             <button></button>\n *           </div>\n *         `;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n              (name !== undefined) ?\n              legacyEventOptions(options, protoOrDescriptor as Object, name) :\n              standardEventOptions(\n                  options, protoOrDescriptor as ClassElement)) as\n             // tslint:disable-next-line:no-any decorator\n             any;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n */\nexport function queryAssignedNodes(\n    slotName: string = '', flatten: boolean = false) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        const selector = `slot${slotName ? `[name=${slotName}]` : ''}`;\n        const slot = this.renderRoot.querySelector(selector);\n        return slot && (slot as HTMLSlotElement).assignedNodes({flatten});\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const supportsAdoptingStyleSheets =\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n      // is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {render, ShadyRenderOptions} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.3.1');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n\n  /**\n   * Render method used to render the value to the element's DOM.\n   * @param result The value to render.\n   * @param container Node into which to render.\n   * @param options Element name.\n   * @nocollapse\n   */\n  static render:\n      (result: unknown, container: Element|DocumentFragment,\n       options: ShadyRenderOptions) => void = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /**\n   * Return the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * @nocollapse\n   */\n  static getStyles(): CSSResult|CSSResultArray|undefined {\n    return this.styles;\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles() {\n    // Only gather styles once per class\n    if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n      return;\n    }\n    // Take care not to call `this.getStyles()` multiple times since this\n    // generates new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.getStyles();\n    if (userStyles === undefined) {\n      this._styles = [];\n    } else if (Array.isArray(userStyles)) {\n      // De-duplicate styles preserving the _last_ instance in the set.\n      // This is a performance optimization to avoid duplicated styles that can\n      // occur especially when composing via subclassing.\n      // The last item is kept to try to preserve the cascade order with the\n      // assumption that it's most important that last added styles override\n      // previous styles.\n      const addStyles =\n          (styles: CSSResultArray, set: Set<CSSResult>): Set<CSSResult> =>\n              styles.reduceRight(\n                  (set: Set<CSSResult>, s) =>\n                      // Note: On IE set.add() does not return the set\n                  Array.isArray(s) ? addStyles(s, set) : (set.add(s), set),\n                  set);\n      // Array.from does not work on Set in IE, otherwise return\n      // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n      const set = addStyles(userStyles, new Set<CSSResult>());\n      const styles: CSSResult[] = [];\n      set.forEach((v) => styles.unshift(v));\n      this._styles = styles;\n    } else {\n      this._styles = [userStyles];\n    }\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this.constructor as typeof LitElement)._getUniqueStyles();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const templateResult = this.render();\n    super.update(changedProperties);\n    // If render is not implemented by the component, don't call lit-html render\n    if (templateResult !== renderNotImplemented) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's NodePart - typically a TemplateResult.\n   * Setting properties inside this method will *not* trigger the element to\n   * update.\n   */\n  protected render(): unknown {\n    return renderNotImplemented;\n  }\n}\n"],"sourceRoot":""}