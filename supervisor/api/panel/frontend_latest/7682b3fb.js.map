{"version":3,"file":"7682b3fb.js","mappings":";;;AAqCA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AAIA;;;;;;;;;;;AAoBA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-datetime.ts","webpack://home-assistant-frontend/./src/components/ha-time-input.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { DateTimeSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-date-input\";\nimport type { HaDateInput } from \"../ha-date-input\";\nimport \"../ha-time-input\";\nimport \"../ha-input-helper-text\";\nimport type { HaTimeInput } from \"../ha-time-input\";\n\n@customElement(\"ha-selector-datetime\")\nexport class HaDateTimeSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: DateTimeSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @query(\"ha-date-input\") private _dateInput!: HaDateInput;\n\n  @query(\"ha-time-input\") private _timeInput!: HaTimeInput;\n\n  protected render() {\n    const values = this.value?.split(\" \");\n\n    return html`\n      <div class=\"input\">\n        <ha-date-input\n          .label=${this.label}\n          .locale=${this.hass.locale}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          .value=${values?.[0]}\n          @value-changed=${this._valueChanged}\n        >\n        </ha-date-input>\n        <ha-time-input\n          enable-second\n          .value=${values?.[1] || \"0:00:00\"}\n          .locale=${this.hass.locale}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          @value-changed=${this._valueChanged}\n        ></ha-time-input>\n      </div>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: `${this._dateInput.value} ${this._timeInput.value}`,\n    });\n  }\n\n  static styles = css`\n    .input {\n      display: flex;\n      align-items: center;\n      flex-direction: row;\n    }\n\n    ha-date-input {\n      min-width: 150px;\n      margin-right: 4px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-datetime\": HaDateTimeSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { useAmPm } from \"../common/datetime/use_am_pm\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { FrontendLocaleData } from \"../data/translation\";\nimport \"./ha-base-time-input\";\nimport type { TimeChangedEvent } from \"./ha-base-time-input\";\n\n@customElement(\"ha-time-input\")\nexport class HaTimeInput extends LitElement {\n  @property({ attribute: false }) public locale!: FrontendLocaleData;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"enable-second\" })\n  public enableSecond = false;\n\n  protected render() {\n    const useAMPM = useAmPm(this.locale);\n\n    const parts = this.value?.split(\":\") || [];\n    let hours = parts[0];\n    const numberHours = Number(parts[0]);\n    if (numberHours && useAMPM && numberHours > 12 && numberHours < 24) {\n      hours = String(numberHours - 12).padStart(2, \"0\");\n    }\n    if (useAMPM && numberHours === 0) {\n      hours = \"12\";\n    }\n\n    return html`\n      <ha-base-time-input\n        .label=${this.label}\n        .hours=${Number(hours)}\n        .minutes=${Number(parts[1])}\n        .seconds=${Number(parts[2])}\n        .format=${useAMPM ? 12 : 24}\n        .amPm=${useAMPM && numberHours >= 12 ? \"PM\" : \"AM\"}\n        .disabled=${this.disabled}\n        @value-changed=${this._timeChanged}\n        .enableSecond=${this.enableSecond}\n        .required=${this.required}\n        .helper=${this.helper}\n      ></ha-base-time-input>\n    `;\n  }\n\n  private _timeChanged(ev: CustomEvent<{ value: TimeChangedEvent }>) {\n    ev.stopPropagation();\n    const eventValue = ev.detail.value;\n\n    const useAMPM = useAmPm(this.locale);\n    let hours = eventValue.hours || 0;\n    if (eventValue && useAMPM) {\n      if (eventValue.amPm === \"PM\" && hours < 12) {\n        hours += 12;\n      }\n      if (eventValue.amPm === \"AM\" && hours === 12) {\n        hours = 0;\n      }\n    }\n    const value = `${hours.toString().padStart(2, \"0\")}:${\n      eventValue.minutes ? eventValue.minutes.toString().padStart(2, \"0\") : \"00\"\n    }:${\n      eventValue.seconds ? eventValue.seconds.toString().padStart(2, \"0\") : \"00\"\n    }`;\n\n    if (value === this.value) {\n      return;\n    }\n\n    this.value = value;\n    fireEvent(this, \"change\");\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-time-input\": HaTimeInput;\n  }\n}\n"],"names":[],"sourceRoot":""}