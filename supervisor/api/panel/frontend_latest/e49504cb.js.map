{"version":3,"file":"e49504cb.js","mappings":";;AA4EA;;AAEA;;AAEA;;AAEA;AAjBA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtCA","sources":["webpack://home-assistant-frontend/./hassio/src/ingress-view/hassio-ingress-view.ts"],"sourcesContent":["import { mdiMenu } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../src/common/dom/fire_event\";\nimport { navigate } from \"../../../src/common/navigate\";\nimport { extractSearchParam } from \"../../../src/common/url/search-params\";\nimport { nextRender } from \"../../../src/common/util/render-status\";\nimport \"../../../src/components/ha-icon-button\";\nimport {\n  fetchHassioAddonInfo,\n  HassioAddonDetails,\n} from \"../../../src/data/hassio/addon\";\nimport { extractApiErrorMessage } from \"../../../src/data/hassio/common\";\nimport {\n  createHassioSession,\n  validateHassioSession,\n} from \"../../../src/data/hassio/ingress\";\nimport { Supervisor } from \"../../../src/data/supervisor/supervisor\";\nimport { showAlertDialog } from \"../../../src/dialogs/generic/show-dialog-box\";\nimport \"../../../src/layouts/hass-loading-screen\";\nimport \"../../../src/layouts/hass-subpage\";\nimport { HomeAssistant, Route } from \"../../../src/types\";\n\n@customElement(\"hassio-ingress-view\")\nclass HassioIngressView extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property() public route!: Route;\n\n  @property() public ingressPanel = false;\n\n  @state() private _addon?: HassioAddonDetails;\n\n  @property({ type: Boolean })\n  public narrow = false;\n\n  private _sessionKeepAlive?: number;\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n\n    if (this._sessionKeepAlive) {\n      clearInterval(this._sessionKeepAlive);\n      this._sessionKeepAlive = undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._addon) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    const iframe = html`<iframe src=${this._addon.ingress_url!}></iframe>`;\n\n    if (!this.ingressPanel) {\n      return html`<hass-subpage\n        .hass=${this.hass}\n        .header=${this._addon.name}\n        .narrow=${this.narrow}\n      >\n        ${iframe}\n      </hass-subpage>`;\n    }\n\n    return html`${this.narrow || this.hass.dockedSidebar === \"always_hidden\"\n      ? html`<div class=\"header\">\n            <ha-icon-button\n              .label=${this.hass.localize(\"ui.sidebar.sidebar_toggle\")}\n              .path=${mdiMenu}\n              @click=${this._toggleMenu}\n            ></ha-icon-button>\n            <div class=\"main-title\">${this._addon.name}</div>\n          </div>\n          ${iframe}`\n      : iframe}`;\n  }\n\n  protected async firstUpdated(): Promise<void> {\n    if (this.route.path === \"\") {\n      const requestedAddon = extractSearchParam(\"addon\");\n      let addonInfo: HassioAddonDetails;\n      if (requestedAddon) {\n        try {\n          addonInfo = await fetchHassioAddonInfo(this.hass, requestedAddon);\n        } catch (err: any) {\n          await showAlertDialog(this, {\n            text: extractApiErrorMessage(err),\n            title: requestedAddon,\n          });\n          await nextRender();\n          navigate(\"/hassio/store\", { replace: true });\n          return;\n        }\n        if (!addonInfo.version) {\n          await showAlertDialog(this, {\n            text: this.supervisor.localize(\"my.error_addon_not_installed\"),\n            title: addonInfo.name,\n          });\n          await nextRender();\n          navigate(`/hassio/addon/${addonInfo.slug}/info`, { replace: true });\n        } else if (!addonInfo.ingress) {\n          await showAlertDialog(this, {\n            text: this.supervisor.localize(\"my.error_addon_no_ingress\"),\n            title: addonInfo.name,\n          });\n          await nextRender();\n          navigate(`/hassio/addon/${addonInfo.slug}/info`, { replace: true });\n        } else {\n          navigate(`/hassio/ingress/${addonInfo.slug}`, { replace: true });\n        }\n      }\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (!changedProps.has(\"route\")) {\n      return;\n    }\n\n    const addon = this.route.path.substr(1);\n\n    const oldRoute = changedProps.get(\"route\") as this[\"route\"] | undefined;\n    const oldAddon = oldRoute ? oldRoute.path.substr(1) : undefined;\n\n    if (addon && addon !== oldAddon) {\n      this._fetchData(addon);\n    }\n  }\n\n  private async _fetchData(addonSlug: string) {\n    const createSessionPromise = createHassioSession(this.hass);\n\n    let addon;\n\n    try {\n      addon = await fetchHassioAddonInfo(this.hass, addonSlug);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text: \"Unable to fetch add-on info to start Ingress\",\n        title: \"Supervisor\",\n      });\n      await nextRender();\n      history.back();\n      return;\n    }\n\n    if (!addon.ingress_url) {\n      await showAlertDialog(this, {\n        text: \"Add-on does not support Ingress\",\n        title: addon.name,\n      });\n      await nextRender();\n      history.back();\n      return;\n    }\n\n    if (addon.state !== \"started\") {\n      await showAlertDialog(this, {\n        text: \"Add-on is not running. Please start it first\",\n        title: addon.name,\n      });\n      await nextRender();\n      navigate(`/hassio/addon/${addon.slug}/info`, { replace: true });\n      return;\n    }\n\n    let session;\n\n    try {\n      session = await createSessionPromise;\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text: \"Unable to create an Ingress session\",\n        title: addon.name,\n      });\n      await nextRender();\n      history.back();\n      return;\n    }\n\n    if (this._sessionKeepAlive) {\n      clearInterval(this._sessionKeepAlive);\n    }\n    this._sessionKeepAlive = window.setInterval(async () => {\n      try {\n        await validateHassioSession(this.hass, session);\n      } catch (err: any) {\n        session = await createHassioSession(this.hass);\n      }\n    }, 60000);\n\n    this._addon = addon;\n  }\n\n  private _toggleMenu(): void {\n    fireEvent(this, \"hass-toggle-menu\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      iframe {\n        display: block;\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n\n      .header + iframe {\n        height: calc(100% - 40px);\n      }\n\n      .header {\n        display: flex;\n        align-items: center;\n        font-size: 16px;\n        height: 40px;\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n        --mdc-icon-size: 20px;\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      ha-icon-button {\n        pointer-events: auto;\n      }\n\n      hass-subpage {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n        --app-header-border-bottom: 1px solid var(--divider-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-ingress-view\": HassioIngressView;\n  }\n}\n"],"names":[],"sourceRoot":""}