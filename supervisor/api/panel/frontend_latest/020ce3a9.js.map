{"version":3,"file":"020ce3a9.js","mappings":";AA0BA;AACA;AACA;AACA;;AAIA;;AA8CA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;AAqHA","sources":["webpack://home-assistant-frontend/./src/components/ha-navigation-picker.ts"],"sourcesContent":["import { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { titleCase } from \"../common/string/title-case\";\nimport {\n  fetchConfig,\n  LovelaceConfig,\n  LovelaceViewConfig,\n} from \"../data/lovelace\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant, PanelInfo } from \"../types\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-icon\";\n\ntype NavigationItem = {\n  path: string;\n  icon: string;\n  title: string;\n};\n\nconst DEFAULT_ITEMS: NavigationItem[] = [];\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<NavigationItem> = (item) => html`\n  <mwc-list-item graphic=\"icon\" .twoline=${!!item.title}>\n    <ha-icon .icon=${item.icon} slot=\"graphic\"></ha-icon>\n    <span>${item.title || item.path}</span>\n    <span slot=\"secondary\">${item.path}</span>\n  </mwc-list-item>\n`;\n\nconst createViewNavigationItem = (\n  prefix: string,\n  view: LovelaceViewConfig,\n  index: number\n) => ({\n  path: `/${prefix}/${view.path ?? index}`,\n  icon: view.icon ?? \"mdi:view-compact\",\n  title: view.title ?? (view.path ? titleCase(view.path) : `${index}`),\n});\n\nconst createPanelNavigationItem = (hass: HomeAssistant, panel: PanelInfo) => ({\n  path: `/${panel.url_path}`,\n  icon: panel.icon ?? \"mdi:view-dashboard\",\n  title:\n    panel.url_path === hass.defaultPanel\n      ? hass.localize(\"panel.states\")\n      : hass.localize(`panel.${panel.title}`) ||\n        panel.title ||\n        (panel.url_path ? titleCase(panel.url_path) : \"\"),\n});\n\n@customElement(\"ha-navigation-picker\")\nexport class HaNavigationPicker extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() private _opened = false;\n\n  private navigationItemsLoaded = false;\n\n  private navigationItems: NavigationItem[] = DEFAULT_ITEMS;\n\n  @query(\"ha-combo-box\", true) private comboBox!: HaComboBox;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"path\"\n        item-label-path=\"path\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${this.navigationItems}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !this.navigationItemsLoaded) {\n      this._loadNavigationItems();\n    }\n  }\n\n  private async _loadNavigationItems() {\n    this.navigationItemsLoaded = true;\n\n    const panels = Object.entries(this.hass!.panels).map(([id, panel]) => ({\n      id,\n      ...panel,\n    }));\n    const lovelacePanels = panels.filter(\n      (panel) => panel.component_name === \"lovelace\"\n    );\n\n    const viewConfigs = await Promise.all(\n      lovelacePanels.map((panel) =>\n        fetchConfig(\n          this.hass!.connection,\n          // path should be null to fetch default lovelace panel\n          panel.url_path === \"lovelace\" ? null : panel.url_path,\n          true\n        )\n          .then((config) => [panel.id, config] as [string, LovelaceConfig])\n          .catch((_) => [panel.id, undefined] as [string, undefined])\n      )\n    );\n\n    const panelViewConfig = new Map(viewConfigs);\n\n    this.navigationItems = [];\n\n    for (const panel of panels) {\n      this.navigationItems.push(createPanelNavigationItem(this.hass!, panel));\n\n      const config = panelViewConfig.get(panel.id);\n\n      if (!config) continue;\n\n      config.views.forEach((view, index) =>\n        this.navigationItems.push(\n          createViewNavigationItem(panel.url_path, view, index)\n        )\n      );\n    }\n\n    this.comboBox.filteredItems = this.navigationItems;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    return !this._opened || changedProps.has(\"_opened\");\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems: NavigationItem[] = [];\n\n      this.navigationItems.forEach((item) => {\n        if (\n          item.path.toLowerCase().includes(filterString) ||\n          item.title.toLowerCase().includes(filterString)\n        ) {\n          filteredItems.push(item);\n        }\n      });\n\n      if (filteredItems.length > 0) {\n        this.comboBox.filteredItems = filteredItems;\n      } else {\n        this.comboBox.filteredItems = [];\n      }\n    } else {\n      this.comboBox.filteredItems = this.navigationItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        color: var(--primary-text-color);\n        position: relative;\n        bottom: 0px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-navigation-picker\": HaNavigationPicker;\n  }\n}\n"],"names":[],"sourceRoot":""}