{"version":3,"file":"8567ba13.js","mappings":";AAqEA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAmDA;;AChEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAzBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAkBA","sources":["webpack://home-assistant-frontend/./src/components/ha-areas-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-area.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { EntityRegistryEntry } from \"../data/entity_registry\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-area-picker\";\n\n@customElement(\"ha-areas-picker\")\nexport class HaAreasPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string[];\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd?: boolean;\n\n  /**\n   * Show only areas with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no areas with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only areas with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property() public entityFilter?: (entity: EntityRegistryEntry) => boolean;\n\n  @property({ attribute: \"picked-area-label\" })\n  public pickedAreaLabel?: string;\n\n  @property({ attribute: \"pick-area-label\" })\n  public pickAreaLabel?: string;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const currentAreas = this._currentAreas;\n    return html`\n      ${currentAreas.map(\n        (area) => html`\n          <div>\n            <ha-area-picker\n              .curValue=${area}\n              .noAdd=${this.noAdd}\n              .hass=${this.hass}\n              .value=${area}\n              .label=${this.pickedAreaLabel}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .deviceFilter=${this.deviceFilter}\n              .entityFilter=${this.entityFilter}\n              .disabled=${this.disabled}\n              @value-changed=${this._areaChanged}\n            ></ha-area-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-area-picker\n          .noAdd=${this.noAdd}\n          .hass=${this.hass}\n          .label=${this.pickAreaLabel}\n          .helper=${this.helper}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityFilter}\n          .disabled=${this.disabled}\n          .placeholder=${this.placeholder}\n          .required=${this.required && !currentAreas.length}\n          @value-changed=${this._addArea}\n        ></ha-area-picker>\n      </div>\n    `;\n  }\n\n  private get _currentAreas(): string[] {\n    return this.value || [];\n  }\n\n  private async _updateAreas(areas) {\n    this.value = areas;\n\n    fireEvent(this, \"value-changed\", {\n      value: areas,\n    });\n  }\n\n  private _areaChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const curValue = (ev.currentTarget as any).curValue;\n    const newValue = ev.detail.value;\n    if (newValue === curValue) {\n      return;\n    }\n    const currentAreas = this._currentAreas;\n    if (!newValue || currentAreas.includes(newValue)) {\n      this._updateAreas(currentAreas.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateAreas(\n      currentAreas.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private _addArea(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    const toAdd = ev.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (ev.currentTarget as any).value = \"\";\n    const currentAreas = this._currentAreas;\n    if (currentAreas.includes(toAdd)) {\n      return;\n    }\n\n    this._updateAreas([...currentAreas, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-areas-picker\": HaAreasPicker;\n  }\n}\n","import { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport type { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { getDeviceIntegrationLookup } from \"../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport {\n  EntitySources,\n  fetchEntitySourcesWithCache,\n} from \"../../data/entity_sources\";\nimport type { AreaSelector } from \"../../data/selector\";\nimport {\n  filterSelectorDevices,\n  filterSelectorEntities,\n} from \"../../data/selector\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-area-picker\";\nimport \"../ha-areas-picker\";\n\n@customElement(\"ha-selector-area\")\nexport class HaAreaSelector extends SubscribeMixin(LitElement) {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: AreaSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _entitySources?: EntitySources;\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  private _deviceIntegrationLookup = memoizeOne(getDeviceIntegrationLookup);\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities.filter((entity) => entity.device_id !== null);\n      }),\n    ];\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (\n      changedProperties.has(\"selector\") &&\n      (this.selector.area?.device?.integration ||\n        this.selector.area?.entity?.integration) &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (\n      (this.selector.area?.device?.integration ||\n        this.selector.area?.entity?.integration) &&\n      !this._entitySources\n    ) {\n      return html``;\n    }\n\n    if (!this.selector.area?.multiple) {\n      return html`\n        <ha-area-picker\n          .hass=${this.hass}\n          .value=${this.value}\n          .label=${this.label}\n          .helper=${this.helper}\n          no-add\n          .deviceFilter=${this._filterDevices}\n          .entityFilter=${this._filterEntities}\n          .disabled=${this.disabled}\n          .required=${this.required}\n        ></ha-area-picker>\n      `;\n    }\n\n    return html`\n      <ha-areas-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .pickAreaLabel=${this.label}\n        no-add\n        .deviceFilter=${this._filterDevices}\n        .entityFilter=${this._filterEntities}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-areas-picker>\n    `;\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (!this.selector.area?.entity) {\n      return true;\n    }\n\n    return filterSelectorEntities(\n      this.selector.area.entity,\n      entity,\n      this._entitySources\n    );\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (!this.selector.area?.device) {\n      return true;\n    }\n\n    const deviceIntegrations =\n      this._entitySources && this._entities\n        ? this._deviceIntegrationLookup(this._entitySources, this._entities)\n        : undefined;\n\n    return filterSelectorDevices(\n      this.selector.area.device,\n      device,\n      deviceIntegrations\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-area\": HaAreaSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}