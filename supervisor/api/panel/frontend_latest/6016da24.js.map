{"version":3,"file":"6016da24.js","mappings":";;;;;;;;;;;;;;;;;;;AAu3BA","sources":["webpack://home-assistant-frontend/./node_modules/app-datepicker/dist/datepicker.js"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport { css, html, LitElement, } from 'lit';\nimport { eventOptions, property, query } from 'lit/decorators.js';\nimport { cache } from 'lit/directives/cache.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { toUTCDate } from 'nodemod/dist/calendar/helpers/to-utc-date.js';\nimport { iconChevronLeft, iconChevronRight } from './app-datepicker-icons.js';\nimport { datepickerVariables, resetButton } from './common-styles.js';\nimport { ALL_NAV_KEYS_SET } from './constants.js';\nimport './custom_typings.js';\nimport { animateElement } from './helpers/animate-element.js';\nimport { computeNextFocusedDate } from './helpers/compute-next-focus-date.js';\nimport { dispatchCustomEvent } from './helpers/dispatch-custom-event.js';\nimport { findShadowTarget } from './helpers/find-shadow-target.js';\nimport { getDateRange } from './helpers/get-date-range.js';\nimport { getFormatters } from './helpers/get-formatters.js';\nimport { getMultiCalendars } from './helpers/get-multi-calendars.js';\nimport { getResolvedDate } from './helpers/get-resolved-date.js';\nimport { getResolvedLocale } from './helpers/get-resolved-locale.js';\nimport { hasClass } from './helpers/has-class.js';\nimport { isValidDate } from './helpers/is-valid-date.js';\nimport { makeNumberPrecise } from './helpers/make-number-precise.js';\nimport { passiveHandler } from './helpers/passive-handler.js';\nimport { splitString } from './helpers/split-string.js';\nimport { targetScrollTo } from './helpers/target-scroll-to.js';\nimport { toFormattedDateString } from './helpers/to-formatted-date-string.js';\nimport { toYearList } from './helpers/to-year-list.js';\nimport { updateYearWithMinMax } from './helpers/update-year-with-min-max.js';\nimport { Tracker } from './tracker.js';\nexport class Datepicker extends LitElement {\n    constructor() {\n        super();\n        this.firstDayOfWeek = 0;\n        this.showWeekNumber = false;\n        this.weekNumberType = 'first-4-day-week';\n        this.landscape = false;\n        this.locale = getResolvedLocale();\n        this.disabledDays = '';\n        this.disabledDates = '';\n        this.weekLabel = 'Wk';\n        this.inline = false;\n        this.dragRatio = .15;\n        this._hasMin = false;\n        this._hasMax = false;\n        this._disabledDaysSet = new Set();\n        this._disabledDatesSet = new Set();\n        this._dx = -Infinity;\n        this._hasNativeWebAnimation = 'animate' in HTMLElement.prototype;\n        this._updatingDateWithKey = false;\n        const todayDate = getResolvedDate();\n        const allFormatters = getFormatters(this.locale);\n        const formattedTodayDate = toFormattedDateString(todayDate);\n        const max = getResolvedDate('2100-12-31');\n        this.value = formattedTodayDate;\n        this.startView = 'calendar';\n        this._min = new Date(todayDate);\n        this._max = new Date(max);\n        this._todayDate = todayDate;\n        this._maxDate = max;\n        this._yearList = toYearList(todayDate, max);\n        this._selectedDate = new Date(todayDate);\n        this._focusedDate = new Date(todayDate);\n        this._formatters = allFormatters;\n    }\n    get startView() {\n        return this._startView;\n    }\n    set startView(val) {\n        const defaultVal = !val ? 'calendar' : val;\n        if (defaultVal !== 'calendar' && defaultVal !== 'yearList')\n            return;\n        const oldVal = this._startView;\n        this._startView = defaultVal;\n        this.requestUpdate('startView', oldVal);\n    }\n    get min() {\n        return this._hasMin ? toFormattedDateString(this._min) : '';\n    }\n    set min(val) {\n        const valDate = getResolvedDate(val);\n        const isValidMin = isValidDate(val, valDate);\n        this._min = isValidMin ? valDate : this._todayDate;\n        this._hasMin = isValidMin;\n        this.requestUpdate('min');\n    }\n    get max() {\n        return this._hasMax ? toFormattedDateString(this._max) : '';\n    }\n    set max(val) {\n        const valDate = getResolvedDate(val);\n        const isValidMax = isValidDate(val, valDate);\n        this._max = isValidMax ? valDate : this._maxDate;\n        this._hasMax = isValidMax;\n        this.requestUpdate('max');\n    }\n    get value() {\n        return toFormattedDateString(this._focusedDate);\n    }\n    set value(val) {\n        const valDate = getResolvedDate(val);\n        const validValue = isValidDate(val, valDate) ? valDate : this._todayDate;\n        this._focusedDate = new Date(validValue);\n        this._selectedDate = this._lastSelectedDate = new Date(validValue);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        if (this._tracker) {\n            this._tracker.disconnect();\n            this._tracker = undefined;\n        }\n    }\n    render() {\n        if (this._formatters.locale !== this.locale)\n            this._formatters = getFormatters(this.locale);\n        const datepickerBodyContent = 'yearList' === this._startView ?\n            this._renderDatepickerYearList() : this._renderDatepickerCalendar();\n        const datepickerHeaderContent = this.inline ?\n            null :\n            html `<div class=\"datepicker-header\" part=\"header\">${this._renderHeaderSelectorButton()}</div>`;\n        return html `\n    ${datepickerHeaderContent}\n    <div class=\"datepicker-body\" part=\"body\">${cache(datepickerBodyContent)}</div>\n    `;\n    }\n    firstUpdated() {\n        let firstFocusableElement;\n        if ('calendar' === this._startView) {\n            firstFocusableElement = (this.inline ?\n                this.shadowRoot.querySelector('.btn__month-selector') :\n                this._buttonSelectorYear);\n        }\n        else {\n            firstFocusableElement = this._yearViewListItem;\n        }\n        dispatchCustomEvent(this, 'datepicker-first-updated', { firstFocusableElement, value: this.value });\n    }\n    async updated(changed) {\n        const startView = this._startView;\n        if (changed.has('min') || changed.has('max')) {\n            this._yearList = toYearList(this._min, this._max);\n            if ('yearList' === startView)\n                this.requestUpdate();\n            const minTime = +this._min;\n            const maxTime = +this._max;\n            if (getDateRange(minTime, maxTime) > 864e5) {\n                const focusedDateTime = +this._focusedDate;\n                let newValue = focusedDateTime;\n                if (focusedDateTime < minTime)\n                    newValue = minTime;\n                if (focusedDateTime > maxTime)\n                    newValue = maxTime;\n                this.value = toFormattedDateString(new Date(newValue));\n            }\n        }\n        if (changed.has('_startView') || changed.has('startView')) {\n            if ('yearList' === startView) {\n                const selectedYearScrollTop = 48 * (this._selectedDate.getUTCFullYear() - this._min.getUTCFullYear() - 2);\n                targetScrollTo(this._yearViewFullList, { top: selectedYearScrollTop, left: 0 });\n            }\n            if ('calendar' === startView && null == this._tracker) {\n                const calendarsContainer = this.calendarsContainer;\n                let $down = false;\n                let $move = false;\n                let $transitioning = false;\n                if (calendarsContainer) {\n                    const handlers = {\n                        down: () => {\n                            if ($transitioning)\n                                return;\n                            $down = true;\n                            this._dx = 0;\n                        },\n                        move: (pointer, oldPointer) => {\n                            if ($transitioning || !$down)\n                                return;\n                            const dx = this._dx;\n                            const hasMin = (dx < 0 && hasClass(calendarsContainer, 'has-max-date')) ||\n                                (dx > 0 && hasClass(calendarsContainer, 'has-min-date'));\n                            if (!hasMin && Math.abs(dx) > 0 && $down) {\n                                $move = true;\n                                calendarsContainer.style.transform = `translateX(${makeNumberPrecise(dx)}px)`;\n                            }\n                            this._dx = hasMin ? 0 : dx + (pointer.x - oldPointer.x);\n                        },\n                        up: async (_$, _$$, ev) => {\n                            if ($down && $move) {\n                                const dx = this._dx;\n                                const maxWidth = calendarsContainer.getBoundingClientRect().width / 3;\n                                const didPassThreshold = Math.abs(dx) > (Number(this.dragRatio) * maxWidth);\n                                const transitionDuration = 350;\n                                const transitionEasing = 'cubic-bezier(0, 0, .4, 1)';\n                                const transformTo = didPassThreshold ? makeNumberPrecise(maxWidth * (dx < 0 ? -1 : 1)) : 0;\n                                $transitioning = true;\n                                await animateElement(calendarsContainer, {\n                                    hasNativeWebAnimation: this._hasNativeWebAnimation,\n                                    keyframes: [\n                                        { transform: `translateX(${dx}px)` },\n                                        {\n                                            transform: `translateX(${transformTo}px)`,\n                                        },\n                                    ],\n                                    options: {\n                                        duration: transitionDuration,\n                                        easing: transitionEasing,\n                                    },\n                                });\n                                if (didPassThreshold) {\n                                    this._updateMonth(dx < 0 ? 'next' : 'previous').handleEvent();\n                                }\n                                $down = $move = $transitioning = false;\n                                this._dx = -Infinity;\n                                calendarsContainer.removeAttribute('style');\n                                dispatchCustomEvent(this, 'datepicker-animation-finished');\n                            }\n                            else if ($down) {\n                                this._updateFocusedDate(ev);\n                                $down = $move = false;\n                                this._dx = -Infinity;\n                            }\n                        },\n                    };\n                    this._tracker = new Tracker(calendarsContainer, handlers);\n                }\n            }\n            if (changed.get('_startView') && 'calendar' === startView) {\n                this._focusElement('[part=\"year-selector\"]');\n            }\n        }\n        if (this._updatingDateWithKey) {\n            this._focusElement('[part=\"calendars\"]:nth-of-type(2) .day--focused');\n            this._updatingDateWithKey = false;\n        }\n    }\n    _focusElement(selector) {\n        const focusedTarget = this.shadowRoot.querySelector(selector);\n        if (focusedTarget)\n            focusedTarget.focus();\n    }\n    _renderHeaderSelectorButton() {\n        const { yearFormat, dateFormat } = this._formatters;\n        const isCalendarView = this.startView === 'calendar';\n        const focusedDate = this._focusedDate;\n        const formattedDate = dateFormat(focusedDate);\n        const formatterFy = yearFormat(focusedDate);\n        return html `\n    <button\n      class=\"${classMap({ 'btn__year-selector': true, selected: !isCalendarView })}\"\n      type=\"button\"\n      part=\"year-selector\"\n      data-view=\"${'yearList'}\"\n      @click=\"${this._updateView('yearList')}\">${formatterFy}</button>\n\n    <div class=\"datepicker-toolbar\" part=\"toolbar\">\n      <button\n        class=\"${classMap({ 'btn__calendar-selector': true, selected: isCalendarView })}\"\n        type=\"button\"\n        part=\"calendar-selector\"\n        data-view=\"${'calendar'}\"\n        @click=\"${this._updateView('calendar')}\">${formattedDate}</button>\n    </div>\n    `;\n    }\n    _renderDatepickerYearList() {\n        const { yearFormat } = this._formatters;\n        const focusedDateFy = this._focusedDate.getUTCFullYear();\n        return html `\n    <div class=\"datepicker-body__year-list-view\" part=\"year-list-view\">\n      <div class=\"year-list-view__full-list\" part=\"year-list\" @click=\"${this._updateYear}\">\n      ${this._yearList.map(n => html `<button\n        class=\"${classMap({\n            'year-list-view__list-item': true,\n            'year--selected': focusedDateFy === n,\n        })}\"\n        type=\"button\"\n        part=\"year\"\n        .year=\"${n}\">${yearFormat(toUTCDate(n, 0, 1))}</button>`)}</div>\n    </div>\n    `;\n    }\n    _renderDatepickerCalendar() {\n        const { longMonthYearFormat, dayFormat, fullDateFormat, longWeekdayFormat, narrowWeekdayFormat, } = this._formatters;\n        const disabledDays = splitString(this.disabledDays, Number);\n        const disabledDates = splitString(this.disabledDates, getResolvedDate);\n        const showWeekNumber = this.showWeekNumber;\n        const $focusedDate = this._focusedDate;\n        const firstDayOfWeek = this.firstDayOfWeek;\n        const todayDate = getResolvedDate();\n        const $selectedDate = this._selectedDate;\n        const $max = this._max;\n        const $min = this._min;\n        const { calendars, disabledDaysSet, disabledDatesSet, weekdays } = getMultiCalendars({\n            dayFormat,\n            fullDateFormat,\n            longWeekdayFormat,\n            narrowWeekdayFormat,\n            firstDayOfWeek,\n            disabledDays,\n            disabledDates,\n            locale: this.locale,\n            selectedDate: $selectedDate,\n            showWeekNumber: this.showWeekNumber,\n            weekNumberType: this.weekNumberType,\n            max: $max,\n            min: $min,\n            weekLabel: this.weekLabel,\n        });\n        const hasMinDate = !calendars[0].calendar.length;\n        const hasMaxDate = !calendars[2].calendar.length;\n        const weekdaysContent = weekdays.map(o => html `<th\n        class=\"calendar-weekday\"\n        part=\"calendar-weekday\"\n        role=\"columnheader\"\n        aria-label=\"${o.label}\"\n      >\n        <div class=\"weekday\" part=\"weekday\">${o.value}</div>\n      </th>`);\n        const calendarsContent = repeat(calendars, n => n.key, ({ calendar }, ci) => {\n            if (!calendar.length) {\n                return html `<div class=\"calendar-container\" part=\"calendar\"></div>`;\n            }\n            const calendarAriaId = `calendarcaption${ci}`;\n            const midCalendarFullDate = calendar[1][1].fullDate;\n            const isMidCalendar = ci === 1;\n            const $newFocusedDate = isMidCalendar && !this._isInVisibleMonth($focusedDate, $selectedDate) ?\n                computeNextFocusedDate({\n                    disabledDaysSet,\n                    disabledDatesSet,\n                    hasAltKey: false,\n                    keyCode: 36,\n                    focusedDate: $focusedDate,\n                    selectedDate: $selectedDate,\n                    minTime: +$min,\n                    maxTime: +$max,\n                }) :\n                $focusedDate;\n            return html `\n      <div class=\"calendar-container\" part=\"calendar\">\n        <table class=\"calendar-table\" part=\"table\" role=\"grid\" aria-labelledby=\"${calendarAriaId}\">\n          <caption id=\"${calendarAriaId}\">\n            <div class=\"calendar-label\" part=\"label\">${midCalendarFullDate ? longMonthYearFormat(midCalendarFullDate) : ''}</div>\n          </caption>\n\n          <thead role=\"rowgroup\">\n            <tr class=\"calendar-weekdays\" part=\"weekdays\" role=\"row\">${weekdaysContent}</tr>\n          </thead>\n\n          <tbody role=\"rowgroup\">${calendar.map((calendarRow) => {\n                return html `<tr role=\"row\">${calendarRow.map((calendarCol, i) => {\n                    const { disabled, fullDate, label, value } = calendarCol;\n                    if (!fullDate && value && showWeekNumber && i < 1) {\n                        return html `<th\n                      class=\"full-calendar__day weekday-label\"\n                      part=\"calendar-day\"\n                      scope=\"row\"\n                      role=\"rowheader\"\n                      abbr=\"${label}\"\n                      aria-label=\"${label}\"\n                    >${value}</th>`;\n                    }\n                    if (!value || !fullDate) {\n                        return html `<td class=\"full-calendar__day day--empty\" part=\"calendar-day\"></td>`;\n                    }\n                    const curTime = +new Date(fullDate);\n                    const isCurrentDate = +$focusedDate === curTime;\n                    const shouldTab = isMidCalendar && $newFocusedDate.getUTCDate() === Number(value);\n                    return html `\n                  <td\n                    tabindex=\"${shouldTab ? '0' : '-1'}\"\n                    class=\"${classMap({\n                        'full-calendar__day': true,\n                        'day--disabled': disabled,\n                        'day--today': +todayDate === curTime,\n                        'day--focused': !disabled && isCurrentDate,\n                    })}\"\n                    part=\"calendar-day${+todayDate === curTime ? ' calendar-today' : ''}\"\n                    role=\"gridcell\"\n                    aria-disabled=\"${disabled ? 'true' : 'false'}\"\n                    aria-label=\"${label}\"\n                    aria-selected=\"${isCurrentDate ? 'true' : 'false'}\"\n                    .fullDate=\"${fullDate}\"\n                    .day=\"${value}\"\n                  >\n                    <div\n                      class=\"calendar-day\"\n                      part=\"day${+todayDate === curTime ? ' today' : ''}\"\n                    >${value}</div>\n                  </td>\n                  `;\n                })}</tr>`;\n            })}</tbody>\n        </table>\n      </div>\n      `;\n        });\n        this._disabledDatesSet = disabledDatesSet;\n        this._disabledDaysSet = disabledDaysSet;\n        return html `\n    <div class=\"datepicker-body__calendar-view\" part=\"calendar-view\">\n      <div class=\"calendar-view__month-selector\" part=\"month-selectors\">\n        <div class=\"month-selector-container\">${hasMinDate ? null : html `\n          <button\n            class=\"btn__month-selector\"\n            type=\"button\"\n            part=\"month-selector\"\n            aria-label=\"Previous month\"\n            @click=\"${this._updateMonth('previous')}\"\n          >${iconChevronLeft}</button>\n        `}</div>\n\n        <div class=\"month-selector-container\">${hasMaxDate ? null : html `\n          <button\n            class=\"btn__month-selector\"\n            type=\"button\"\n            part=\"month-selector\"\n            aria-label=\"Next month\"\n            @click=\"${this._updateMonth('next')}\"\n          >${iconChevronRight}</button>\n        `}</div>\n      </div>\n\n      <div\n        class=\"${classMap({\n            'calendars-container': true,\n            'has-min-date': hasMinDate,\n            'has-max-date': hasMaxDate,\n        })}\"\n        part=\"calendars\"\n        @keyup=\"${this._updateFocusedDateWithKeyboard}\"\n      >${calendarsContent}</div>\n    </div>\n    `;\n    }\n    _updateView(view) {\n        const handleUpdateView = () => {\n            if ('calendar' === view) {\n                this._selectedDate = this._lastSelectedDate =\n                    new Date(updateYearWithMinMax(this._focusedDate, this._min, this._max));\n            }\n            this._startView = view;\n        };\n        return passiveHandler(handleUpdateView);\n    }\n    _updateMonth(updateType) {\n        const handleUpdateMonth = () => {\n            const calendarsContainer = this.calendarsContainer;\n            if (null == calendarsContainer)\n                return this.updateComplete;\n            const dateDate = this._lastSelectedDate || this._selectedDate;\n            const minDate = this._min;\n            const maxDate = this._max;\n            const isPreviousMonth = updateType === 'previous';\n            const newSelectedDate = toUTCDate(dateDate.getUTCFullYear(), dateDate.getUTCMonth() + (isPreviousMonth ? -1 : 1), 1);\n            const newSelectedDateFy = newSelectedDate.getUTCFullYear();\n            const newSelectedDateM = newSelectedDate.getUTCMonth();\n            const minDateFy = minDate.getUTCFullYear();\n            const minDateM = minDate.getUTCMonth();\n            const maxDateFy = maxDate.getUTCFullYear();\n            const maxDateM = maxDate.getUTCMonth();\n            const isLessThanYearAndMonth = newSelectedDateFy < minDateFy ||\n                (newSelectedDateFy <= minDateFy && newSelectedDateM < minDateM);\n            const isMoreThanYearAndMonth = newSelectedDateFy > maxDateFy ||\n                (newSelectedDateFy >= maxDateFy && newSelectedDateM > maxDateM);\n            if (isLessThanYearAndMonth || isMoreThanYearAndMonth)\n                return this.updateComplete;\n            this._lastSelectedDate = newSelectedDate;\n            this._selectedDate = this._lastSelectedDate;\n            return this.updateComplete;\n        };\n        return passiveHandler(handleUpdateMonth);\n    }\n    _updateYear(ev) {\n        const selectedYearEl = findShadowTarget(ev, (n) => hasClass(n, 'year-list-view__list-item'));\n        if (selectedYearEl == null)\n            return;\n        const newFocusedDate = updateYearWithMinMax(new Date(this._focusedDate).setUTCFullYear(+selectedYearEl.year), this._min, this._max);\n        this._selectedDate = this._lastSelectedDate = new Date(newFocusedDate);\n        this._focusedDate = new Date(newFocusedDate);\n        this._startView = 'calendar';\n    }\n    _updateFocusedDate(ev) {\n        const selectedDayEl = findShadowTarget(ev, (n) => hasClass(n, 'full-calendar__day'));\n        if (selectedDayEl == null ||\n            [\n                'day--empty',\n                'day--disabled',\n                'day--focused',\n                'weekday-label',\n            ].some(n => hasClass(selectedDayEl, n)))\n            return;\n        this._focusedDate = new Date(selectedDayEl.fullDate);\n        dispatchCustomEvent(this, 'datepicker-value-updated', {\n            isKeypress: false,\n            value: this.value,\n        });\n    }\n    _updateFocusedDateWithKeyboard(ev) {\n        const keyCode = ev.keyCode;\n        if (13 === keyCode || 32 === keyCode) {\n            dispatchCustomEvent(this, 'datepicker-value-updated', {\n                keyCode,\n                isKeypress: true,\n                value: this.value,\n            });\n            this._focusedDate = new Date(this._selectedDate);\n            return;\n        }\n        if (keyCode === 9 || !ALL_NAV_KEYS_SET.has(keyCode))\n            return;\n        const selectedDate = this._selectedDate;\n        const nextFocusedDate = computeNextFocusedDate({\n            keyCode,\n            selectedDate,\n            disabledDatesSet: this._disabledDatesSet,\n            disabledDaysSet: this._disabledDaysSet,\n            focusedDate: this._focusedDate,\n            hasAltKey: ev.altKey,\n            maxTime: +this._max,\n            minTime: +this._min,\n        });\n        if (!this._isInVisibleMonth(nextFocusedDate, selectedDate)) {\n            this._selectedDate = this._lastSelectedDate = nextFocusedDate;\n        }\n        this._focusedDate = nextFocusedDate;\n        this._updatingDateWithKey = true;\n        dispatchCustomEvent(this, 'datepicker-value-updated', {\n            keyCode,\n            isKeypress: true,\n            value: this.value,\n        });\n    }\n    _isInVisibleMonth(dateA, dateB) {\n        const dateAFy = dateA.getUTCFullYear();\n        const dateAM = dateA.getUTCMonth();\n        const dateBFY = dateB.getUTCFullYear();\n        const dateBM = dateB.getUTCMonth();\n        return dateAFy === dateBFY && dateAM === dateBM;\n    }\n    get calendarsContainer() {\n        return this.shadowRoot.querySelector('.calendars-container');\n    }\n}\nDatepicker.styles = [\n    datepickerVariables,\n    resetButton,\n    css `\n    :host {\n      width: 312px;\n      /** NOTE: Magic number as 16:9 aspect ratio does not look good */\n      /* height: calc((var(--app-datepicker-width) / .66) - var(--app-datepicker-footer-height, 56px)); */\n      background-color: var(--app-datepicker-bg-color, #fff);\n      color: var(--app-datepicker-color, #000);\n      border-radius:\n        var(--app-datepicker-border-top-left-radius, 0)\n        var(--app-datepicker-border-top-right-radius, 0)\n        var(--app-datepicker-border-bottom-right-radius, 0)\n        var(--app-datepicker-border-bottom-left-radius, 0);\n      contain: content;\n      overflow: hidden;\n    }\n    :host([landscape]) {\n      display: flex;\n\n      /** <iphone-5-landscape-width> - <standard-side-margin-width> */\n      min-width: calc(568px - 16px * 2);\n      width: calc(568px - 16px * 2);\n    }\n\n    .datepicker-header + .datepicker-body {\n      border-top: 1px solid var(--app-datepicker-separator-color, #ddd);\n    }\n    :host([landscape]) > .datepicker-header + .datepicker-body {\n      border-top: none;\n      border-left: 1px solid var(--app-datepicker-separator-color, #ddd);\n    }\n\n    .datepicker-header {\n      display: flex;\n      flex-direction: column;\n      align-items: flex-start;\n\n      position: relative;\n      padding: 16px 24px;\n    }\n    :host([landscape]) > .datepicker-header {\n      /** :this.<one-liner-month-day-width> + :this.<side-padding-width> */\n      min-width: calc(14ch + 24px * 2);\n    }\n\n    .btn__year-selector,\n    .btn__calendar-selector {\n      color: var(--app-datepicker-selector-color, rgba(0, 0, 0, .55));\n      cursor: pointer;\n      /* outline: none; */\n    }\n    .btn__year-selector.selected,\n    .btn__calendar-selector.selected {\n      color: currentColor;\n    }\n\n    /**\n      * NOTE: IE11-only fix. This prevents formatted focused date from overflowing the container.\n      */\n    .datepicker-toolbar {\n      width: 100%;\n    }\n\n    .btn__year-selector {\n      font-size: 16px;\n      font-weight: 700;\n    }\n    .btn__calendar-selector {\n      font-size: 36px;\n      font-weight: 700;\n      line-height: 1;\n    }\n\n    .datepicker-body {\n      position: relative;\n      width: 100%;\n      overflow: hidden;\n    }\n\n    .datepicker-body__calendar-view {\n      min-height: 56px;\n    }\n\n    .calendar-view__month-selector {\n      display: flex;\n      align-items: center;\n\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      padding: 0 8px;\n      z-index: 1;\n    }\n\n    .month-selector-container {\n      max-height: 56px;\n      height: 100%;\n    }\n    .month-selector-container + .month-selector-container {\n      margin: 0 0 0 auto;\n    }\n\n    .btn__month-selector {\n      padding: calc((56px - 24px) / 2);\n      /**\n        * NOTE: button element contains no text, only SVG.\n        * No extra height will incur with such setting.\n        */\n      line-height: 0;\n    }\n    .btn__month-selector > svg {\n      fill: currentColor;\n    }\n\n    .calendars-container {\n      display: flex;\n      justify-content: center;\n\n      position: relative;\n      top: 0;\n      left: calc(-100%);\n      width: calc(100% * 3);\n      transform: translateZ(0);\n      will-change: transform;\n      /**\n        * NOTE: Required for Pointer Events API to work on touch devices.\n        * Native \\`pan-y\\` action will be fired by the browsers since we only care about the\n        * horizontal direction. This is great as vertical scrolling still works even when touch\n        * event happens on a datepicker's calendar.\n        */\n      touch-action: pan-y;\n      /* outline: none; */\n    }\n\n    .year-list-view__full-list {\n      max-height: calc(48px * 7);\n      overflow-y: auto;\n\n      scrollbar-color: var(--app-datepicker-scrollbar-thumb-bg-color, rgba(0, 0, 0, .35)) rgba(0, 0, 0, 0);\n      scrollbar-width: thin;\n    }\n    .year-list-view__full-list::-webkit-scrollbar {\n      width: 8px;\n      background-color: rgba(0, 0, 0, 0);\n    }\n    .year-list-view__full-list::-webkit-scrollbar-thumb {\n      background-color: var(--app-datepicker-scrollbar-thumb-bg-color, rgba(0, 0, 0, .35));\n      border-radius: 50px;\n    }\n    .year-list-view__full-list::-webkit-scrollbar-thumb:hover {\n      background-color: var(--app-datepicker-scrollbar-thumb-hover-bg-color, rgba(0, 0, 0, .5));\n    }\n\n    .calendar-weekdays > th,\n    .weekday-label {\n      color: var(--app-datepicker-weekday-color, rgba(0, 0, 0, .55));\n      font-weight: 400;\n      transform: translateZ(0);\n      will-change: transform;\n    }\n\n    .calendar-container,\n    .calendar-label,\n    .calendar-table {\n      width: 100%;\n    }\n\n    .calendar-container {\n      position: relative;\n      padding: 0 16px 16px;\n    }\n\n    .calendar-table {\n      -moz-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n\n      border-collapse: collapse;\n      border-spacing: 0;\n      text-align: center;\n    }\n\n    .calendar-label {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      height: 56px;\n      font-weight: 500;\n      text-align: center;\n    }\n\n    .calendar-weekday,\n    .full-calendar__day {\n      position: relative;\n      width: calc(100% / 7);\n      height: 0;\n      padding: calc(100% / 7 / 2) 0;\n      outline: none;\n      text-align: center;\n    }\n    .full-calendar__day:not(.day--disabled):focus {\n      outline: #000 dotted 1px;\n      outline: -webkit-focus-ring-color auto 1px;\n    }\n    :host([showweeknumber]) .calendar-weekday,\n    :host([showweeknumber]) .full-calendar__day {\n      width: calc(100% / 8);\n      padding-top: calc(100% / 8);\n      padding-bottom: 0;\n    }\n    :host([showweeknumber]) th.weekday-label {\n      padding: 0;\n    }\n\n    /**\n      * NOTE: Interesting fact! That is ::after will trigger paint when dragging. This will trigger\n      * layout and paint on **ONLY** affected nodes. This is much cheaper as compared to rendering\n      * all :::after of all calendar day elements. When dragging the entire calendar container,\n      * because of all layout and paint trigger on each and every ::after, this becomes a expensive\n      * task for the browsers especially on low-end devices. Even though animating opacity is much\n      * cheaper, the technique does not work here. Adding 'will-change' will further reduce overall\n      * painting at the expense of memory consumption as many cells in a table has been promoted\n      * a its own layer.\n      */\n    .full-calendar__day:not(.day--empty):not(.day--disabled):not(.weekday-label) {\n      transform: translateZ(0);\n      will-change: transform;\n    }\n    .full-calendar__day:not(.day--empty):not(.day--disabled):not(.weekday-label).day--focused::after,\n    .full-calendar__day:not(.day--empty):not(.day--disabled):not(.day--focused):not(.weekday-label):hover::after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: var(--app-datepicker-accent-color, #1a73e8);\n      border-radius: 50%;\n      opacity: 0;\n      pointer-events: none;\n    }\n    .full-calendar__day:not(.day--empty):not(.day--disabled):not(.weekday-label) {\n      cursor: pointer;\n      pointer-events: auto;\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    }\n    .full-calendar__day.day--focused:not(.day--empty):not(.day--disabled):not(.weekday-label)::after,\n    .full-calendar__day.day--today.day--focused:not(.day--empty):not(.day--disabled):not(.weekday-label)::after {\n      opacity: 1;\n    }\n\n    .calendar-weekday > .weekday,\n    .full-calendar__day > .calendar-day {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      position: absolute;\n      top: 5%;\n      left: 5%;\n      width: 90%;\n      height: 90%;\n      color: currentColor;\n      font-size: 14px;\n      pointer-events: none;\n      z-index: 1;\n    }\n    .full-calendar__day.day--today {\n      color: var(--app-datepicker-accent-color, #1a73e8);\n    }\n    .full-calendar__day.day--focused,\n    .full-calendar__day.day--today.day--focused {\n      color: var(--app-datepicker-focused-day-color, #fff);\n    }\n    .full-calendar__day.day--empty,\n    .full-calendar__day.weekday-label,\n    .full-calendar__day.day--disabled > .calendar-day {\n      pointer-events: none;\n    }\n    .full-calendar__day.day--disabled:not(.day--today) {\n      color: var(--app-datepicker-disabled-day-color, rgba(0, 0, 0, .55));\n    }\n\n    .year-list-view__list-item {\n      position: relative;\n      width: 100%;\n      padding: 12px 16px;\n      text-align: center;\n      /** NOTE: Reduce paint when hovering and scrolling, but this increases memory usage */\n      /* will-change: opacity; */\n      /* outline: none; */\n    }\n    .year-list-view__list-item::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: var(--app-datepicker-focused-year-bg-color, #000);\n      opacity: 0;\n      pointer-events: none;\n    }\n    .year-list-view__list-item:focus::after {\n      opacity: .05;\n    }\n    .year-list-view__list-item.year--selected {\n      color: var(--app-datepicker-accent-color, #1a73e8);\n      font-size: 24px;\n      font-weight: 500;\n    }\n\n    @media (any-hover: hover) {\n      .btn__month-selector:hover,\n      .year-list-view__list-item:hover {\n        cursor: pointer;\n      }\n      .full-calendar__day:not(.day--empty):not(.day--disabled):not(.day--focused):not(.weekday-label):hover::after {\n        opacity: .15;\n      }\n      .year-list-view__list-item:hover::after {\n        opacity: .05;\n      }\n    }\n\n    @supports (background: -webkit-canvas(squares)) {\n      .calendar-container {\n        padding: 56px 16px 16px;\n      }\n\n      table > caption {\n        position: absolute;\n        top: 0;\n        left: 50%;\n        transform: translate3d(-50%, 0, 0);\n        will-change: transform;\n      }\n    }\n    `,\n];\n__decorate([\n    property({ type: Number, reflect: true })\n], Datepicker.prototype, \"firstDayOfWeek\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Datepicker.prototype, \"showWeekNumber\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], Datepicker.prototype, \"weekNumberType\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Datepicker.prototype, \"landscape\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], Datepicker.prototype, \"startView\", null);\n__decorate([\n    property({ type: String, reflect: true })\n], Datepicker.prototype, \"min\", null);\n__decorate([\n    property({ type: String, reflect: true })\n], Datepicker.prototype, \"max\", null);\n__decorate([\n    property({ type: String })\n], Datepicker.prototype, \"value\", null);\n__decorate([\n    property({ type: String })\n], Datepicker.prototype, \"locale\", void 0);\n__decorate([\n    property({ type: String })\n], Datepicker.prototype, \"disabledDays\", void 0);\n__decorate([\n    property({ type: String })\n], Datepicker.prototype, \"disabledDates\", void 0);\n__decorate([\n    property({ type: String })\n], Datepicker.prototype, \"weekLabel\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Datepicker.prototype, \"inline\", void 0);\n__decorate([\n    property({ type: Number })\n], Datepicker.prototype, \"dragRatio\", void 0);\n__decorate([\n    property({ type: Date, attribute: false })\n], Datepicker.prototype, \"_selectedDate\", void 0);\n__decorate([\n    property({ type: Date, attribute: false })\n], Datepicker.prototype, \"_focusedDate\", void 0);\n__decorate([\n    property({ type: String, attribute: false })\n], Datepicker.prototype, \"_startView\", void 0);\n__decorate([\n    query('.year-list-view__full-list')\n], Datepicker.prototype, \"_yearViewFullList\", void 0);\n__decorate([\n    query('.btn__year-selector')\n], Datepicker.prototype, \"_buttonSelectorYear\", void 0);\n__decorate([\n    query('.year-list-view__list-item')\n], Datepicker.prototype, \"_yearViewListItem\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], Datepicker.prototype, \"_updateYear\", null);\n__decorate([\n    eventOptions({ passive: true })\n], Datepicker.prototype, \"_updateFocusedDateWithKeyboard\", null);\n"],"names":[],"sourceRoot":""}