{"version":3,"file":"1a587b90.js","mappings":";;;;AAwEA;AACA;;;;AAIA;;AAEA;;;;;;;AAOA;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;;;AAKA;;AAEA;;;;;AAKA;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;AAKA;;;;AA7DA","sources":["webpack://home-assistant-frontend/./hassio/src/dialogs/backup/dialog-hassio-backup.ts"],"sourcesContent":["import { ActionDetail } from \"@material/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiClose, mdiDotsVertical } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport { slugify } from \"../../../../src/common/string/slugify\";\nimport \"../../../../src/components/buttons/ha-progress-button\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-button-menu\";\nimport \"../../../../src/components/ha-header-bar\";\nimport \"../../../../src/components/ha-icon-button\";\nimport { getSignedPath } from \"../../../../src/data/auth\";\nimport { extractApiErrorMessage } from \"../../../../src/data/hassio/common\";\nimport {\n  fetchHassioBackupInfo,\n  HassioBackupDetail,\n} from \"../../../../src/data/hassio/backup\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../src/dialogs/generic/show-dialog-box\";\nimport { HassDialog } from \"../../../../src/dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport { fileDownload } from \"../../../../src/util/file_download\";\nimport \"../../components/supervisor-backup-content\";\nimport type { SupervisorBackupContent } from \"../../components/supervisor-backup-content\";\nimport { HassioBackupDialogParams } from \"./show-dialog-hassio-backup\";\nimport { atLeastVersion } from \"../../../../src/common/config/version\";\nimport { stopPropagation } from \"../../../../src/common/dom/stop_propagation\";\n\n@customElement(\"dialog-hassio-backup\")\nclass HassioBackupDialog\n  extends LitElement\n  implements HassDialog<HassioBackupDialogParams>\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _backup?: HassioBackupDetail;\n\n  @state() private _dialogParams?: HassioBackupDialogParams;\n\n  @state() private _restoringBackup = false;\n\n  @query(\"supervisor-backup-content\")\n  private _backupContent!: SupervisorBackupContent;\n\n  public async showDialog(dialogParams: HassioBackupDialogParams) {\n    this._backup = await fetchHassioBackupInfo(this.hass, dialogParams.slug);\n    this._dialogParams = dialogParams;\n    this._restoringBackup = false;\n  }\n\n  public closeDialog() {\n    this._backup = undefined;\n    this._dialogParams = undefined;\n    this._restoringBackup = false;\n    this._error = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._dialogParams || !this._backup) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${this._backup.name}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\">${this._backup.name}</span>\n            <ha-icon-button\n              .label=${this.hass?.localize(\"ui.common.close\") || \"Close\"}\n              .path=${mdiClose}\n              slot=\"actionItems\"\n              dialogAction=\"cancel\"\n            ></ha-icon-button>\n          </ha-header-bar>\n        </div>\n        ${this._restoringBackup\n          ? html` <ha-circular-progress active></ha-circular-progress>`\n          : html`<supervisor-backup-content\n              .hass=${this.hass}\n              .supervisor=${this._dialogParams.supervisor}\n              .backup=${this._backup}\n              .onboarding=${this._dialogParams.onboarding || false}\n              .localize=${this._dialogParams.localize}\n              dialogInitialFocus\n            >\n            </supervisor-backup-content>`}\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n          : \"\"}\n\n        <mwc-button\n          .disabled=${this._restoringBackup}\n          slot=\"secondaryAction\"\n          @click=${this._restoreClicked}\n        >\n          Restore\n        </mwc-button>\n\n        ${!this._dialogParams.onboarding\n          ? html`<ha-button-menu\n              fixed\n              slot=\"primaryAction\"\n              @action=${this._handleMenuAction}\n              @closed=${stopPropagation}\n            >\n              <ha-icon-button\n                .label=${this.hass!.localize(\"ui.common.menu\") || \"Menu\"}\n                .path=${mdiDotsVertical}\n                slot=\"trigger\"\n              ></ha-icon-button>\n              <mwc-list-item\n                >${this._dialogParams.supervisor?.localize(\n                  \"backup.download_backup\"\n                )}</mwc-list-item\n              >\n              <mwc-list-item class=\"error\"\n                >${this._dialogParams.supervisor?.localize(\n                  \"backup.delete_backup_title\"\n                )}</mwc-list-item\n              >\n            </ha-button-menu>`\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-circular-progress {\n          display: block;\n          text-align: center;\n        }\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          display: block;\n        }\n        ha-icon-button {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n\n  private _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._downloadClicked();\n        break;\n      case 1:\n        this._deleteClicked();\n        break;\n    }\n  }\n\n  private async _restoreClicked() {\n    const backupDetails = this._backupContent.backupDetails();\n    this._restoringBackup = true;\n    if (this._backupContent.backupType === \"full\") {\n      await this._fullRestoreClicked(backupDetails);\n    } else {\n      await this._partialRestoreClicked(backupDetails);\n    }\n    this._restoringBackup = false;\n  }\n\n  private async _partialRestoreClicked(backupDetails) {\n    if (\n      this._dialogParams?.supervisor !== undefined &&\n      this._dialogParams?.supervisor.info.state !== \"running\"\n    ) {\n      await showAlertDialog(this, {\n        title: \"Could not restore backup\",\n        text: `Restoring a backup is not possible right now because the system is in ${this._dialogParams?.supervisor.info.state} state.`,\n      });\n      return;\n    }\n    if (\n      !(await showConfirmationDialog(this, {\n        title: \"Are you sure you want partially to restore this backup?\",\n        confirmText: \"restore\",\n        dismissText: \"cancel\",\n      }))\n    ) {\n      return;\n    }\n\n    if (!this._dialogParams?.onboarding) {\n      this.hass!.callApi(\n        \"POST\",\n\n        `hassio/${\n          atLeastVersion(this.hass!.config.version, 2021, 9)\n            ? \"backups\"\n            : \"snapshots\"\n        }/${this._backup!.slug}/restore/partial`,\n        backupDetails\n      ).then(\n        () => {\n          this.closeDialog();\n        },\n        (error) => {\n          this._error = error.body.message;\n        }\n      );\n    } else {\n      fireEvent(this, \"restoring\");\n      fetch(`/api/hassio/backups/${this._backup!.slug}/restore/partial`, {\n        method: \"POST\",\n        body: JSON.stringify(backupDetails),\n      });\n      this.closeDialog();\n    }\n  }\n\n  private async _fullRestoreClicked(backupDetails) {\n    if (\n      this._dialogParams?.supervisor !== undefined &&\n      this._dialogParams?.supervisor.info.state !== \"running\"\n    ) {\n      await showAlertDialog(this, {\n        title: \"Could not restore backup\",\n        text: `Restoring a backup is not possible right now because the system is in ${this._dialogParams?.supervisor.info.state} state.`,\n      });\n      return;\n    }\n    if (\n      !(await showConfirmationDialog(this, {\n        title:\n          \"Are you sure you want to wipe your system and restore this backup?\",\n        confirmText: \"restore\",\n        dismissText: \"cancel\",\n      }))\n    ) {\n      return;\n    }\n\n    if (!this._dialogParams?.onboarding) {\n      this.hass!.callApi(\n        \"POST\",\n        `hassio/${\n          atLeastVersion(this.hass!.config.version, 2021, 9)\n            ? \"backups\"\n            : \"snapshots\"\n        }/${this._backup!.slug}/restore/full`,\n        backupDetails\n      ).then(\n        () => {\n          this.closeDialog();\n        },\n        (error) => {\n          this._error = error.body.message;\n        }\n      );\n    } else {\n      fireEvent(this, \"restoring\");\n      fetch(`/api/hassio/backups/${this._backup!.slug}/restore/full`, {\n        method: \"POST\",\n        body: JSON.stringify(backupDetails),\n      });\n      this.closeDialog();\n    }\n  }\n\n  private async _deleteClicked() {\n    if (\n      !(await showConfirmationDialog(this, {\n        title: \"Are you sure you want to delete this backup?\",\n        confirmText: \"delete\",\n        dismissText: \"cancel\",\n      }))\n    ) {\n      return;\n    }\n\n    this.hass!.callApi(\n      atLeastVersion(this.hass!.config.version, 2021, 9) ? \"DELETE\" : \"POST\",\n      `hassio/${\n        atLeastVersion(this.hass!.config.version, 2021, 9)\n          ? `backups/${this._backup!.slug}`\n          : `snapshots/${this._backup!.slug}/remove`\n      }`\n    ).then(\n      () => {\n        if (this._dialogParams!.onDelete) {\n          this._dialogParams!.onDelete();\n        }\n        this.closeDialog();\n      },\n      (error) => {\n        this._error = error.body.message;\n      }\n    );\n  }\n\n  private async _downloadClicked() {\n    let signedPath: { path: string };\n    try {\n      signedPath = await getSignedPath(\n        this.hass!,\n        `/api/hassio/${\n          atLeastVersion(this.hass!.config.version, 2021, 9)\n            ? \"backups\"\n            : \"snapshots\"\n        }/${this._backup!.slug}/download`\n      );\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text: extractApiErrorMessage(err),\n      });\n      return;\n    }\n\n    if (window.location.href.includes(\"ui.nabu.casa\")) {\n      const confirm = await showConfirmationDialog(this, {\n        title: \"Potential slow download\",\n        text: \"Downloading backups over the Nabu Casa URL will take some time, it is recomended to use your local URL instead, do you want to continue?\",\n        confirmText: \"continue\",\n        dismissText: \"cancel\",\n      });\n      if (!confirm) {\n        return;\n      }\n    }\n\n    fileDownload(\n      signedPath.path,\n      `home_assistant_backup_${slugify(this._computeName)}.tar`\n    );\n  }\n\n  private get _computeName() {\n    return this._backup\n      ? this._backup.name || this._backup.slug\n      : \"Unnamed backup\";\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-hassio-backup\": HassioBackupDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}