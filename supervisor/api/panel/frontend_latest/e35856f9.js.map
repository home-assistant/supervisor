{"version":3,"file":"e35856f9.js","mappings":";;AA8FA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;;;;AAjGA;;;;;AAAA;ACyBA;;AAEA;AACA;;;AAkOA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAhBA;;AC9MA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;;;AAGA;AACA;;;AAnBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AAGA;;AC0BA;AAOA;AACA;AAKA;AACA;AACA;AAzCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACSA;AAGA;AACA;;;;;AAgRA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAzRA;ACGA;;AAEA;;;AAmRA;AACA;;;;AAIA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;;;AArBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;;;;;AAKA;AAEA;;;AAGA;AACA;;AAGA;;AAEA;AACA;;;AAjHA;AA2HA;AA3HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACVA;AACA;AACA;;;AAGA;AACA;AAGA;;;AAxBA;;;;AAAA;ACTA;AACA;AACA;AAfA;;;;;;;;;AAAA;ACQA;AACA;AACA;;;AAyCA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAjBA;AC/BA;AACA;AACA;AACA;AACA;AACA;;AAtBA;;;;AAAA;AC8DA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7FA;;;;AAAA;;AC2DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAGA;AACA;;AArCA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAGA;AACA;;AAnDA;;ACoBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AA7BA;ACaA;;AAEA;AACA;AACA;;;AAGA;AApBA;;;;;;;AAAA;;;;ACoBA;AACA;AACA;AACA;AACA;AACA;;AAzBA;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6CA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3BA;;;;;;;;;;;AAAA;;ACiBA;AACA;AACA;AACA;AACA;AACA;;;AAvBA;;;AC8BA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AA1CA;;;;;;;;;;;AAAA;ACyCA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AA3EA;ACsDA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;;AAlCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;;;AA9CA;;ACeA;AACA;AACA;AACA;AACA;AACA;;AAvBA;AC6EA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AA9GA;ACqCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5BA;;ACYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzBA;;;ACUA;AACA;;AAEA;;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;AAtBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkCA;;ACsEA;AACA;AACA;AACA;AACA;;AAEA;AAnEA;;;;;AAAA;;;AClBA;AACA;AACA;AACA;AACA;;AArBA;;;;;AAAA;ACwEA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAcA;AACA;;;AAGA;;AASA;;AAGA;;AAQA;;AAIA;;;;AAKA;;;;;;AAeA;;AA9DA;AAEA;;;AAKA;AACA;AACA;AACA;AAhFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACMA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAIA;AA3DA;;;;;;;;;;;;;;;;;AAAA;ACcA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;ACuFA;AAYA;AAYA;;AAYA;;;;AAIA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;;AAuBA;;AAIA;;AAGA;AACA;AAEA;;AAGA;AACA;;;AAIA;;;AAGA;;;;;AAOA;;;AAKA;AACA;AACA;;;AAGA;;;;;;;;AAUA;;;AAGA;AACA;AACA;;;AAGA;;;;AA3PA;AAwQA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;;AAIA;AA0LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5eA;ACkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AA3DA;;;;AAAA;ACIA;;;AAKA;AACA;AACA;;;AAGA;;;AAGA;AA5BA;ACyBA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAIA;;AAEA;;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAzDA;;ACaA;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAIA;;AA7BA;;;;AAAA;;ACaA;AACA;AACA;AACA;AACA;;AApBA;;ACkBA;AACA;AACA;AACA;AACA;AACA;;;AAvBA;ACoDA;AA7BA;ACqMA;AACA;AACA;;;AAGA;AACA;AAEA;AAMA;;;;;;;;AAUA;;AAGA;AAEA;;AAIA;;;AAKA;;AAIA;AACA;AAGA;AACA;;AAEA;AAGA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AASA;AAKA;AACA;AAGA;;AATA;AAYA;AACA;;AAEA;AAIA;AACA;AACA;AACA;AACA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5RA;ACnCA;;AAEA;;AAIA;;AAUA;AACA;AACA;AAKA;AACA;;;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;;ACiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzCA;;AC8JA;AAEA;AAGA;;AAGA;;AAGA;;AAIA;;AAEA;AAEA;;AAGA;;AAIA;;AAEA;AAEA;;;AAGA;;;;AAIA;;AAIA;AACA;;;AASA;;;AAKA;;;AASA;;;;;AAOA;;AAIA;;AAGA;;AAIA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAKA;;AAGA;;;AAKA;AACA;AACA;;AAEA;;AAGA;AAGA;;AAEA;;AAEA;AAEA;;;;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhMA;ACvFA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAMA;AACA;;;;;;;;;;;;;;AA1BA;;AC2BA;AACA;AACA;AACA;;;AA7BA;ACeA;;AAGA;AACA;AACA;;;;;AAOA;;;AAOA;;;AAKA;AACA;AACA;AACA;;;AAGA;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;;;;;AAOA;;;AAKA;AACA;AACA;;AA1EA;;;;;;;;;;;;;;;;AAAA;;ACwDA;AAEA;AAGA;;AAGA;AACA;;AAIA;;;AAGA;;;;;AAKA;;;AASA;;;AAKA;;;AASA;;;;;AAOA;;AAIA;;AAGA;;AAIA;AAEA;AAGA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;;;AAjFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAbA;ACNA;;AAGA;AACA;AACA;AACA;AACA;;;;;AAMA;AACA;;;;AAjBA;;;;;;;;;;AAjCA;;ACiDA;AACA;AACA;AACA;AACA;;AA1CA;;ACUA;AACA;AACA;;AArBA;;AC2BA;AACA;AACA;AACA;AACA;;;;ACwBA;AACA;AACA;AACA;AACA;;AA5DA;;ACSA;;;;AAMA;;AAEA;AACA;;AAEA;;;AAxBA;;ACsHA;AACA;AACA;AACA;AACA;;AA5GA;AC+BA;AAGA;AACA;;AAEA;AAGA;;AAdA;;ACfA;AAGA;AACA;AACA;;AAEA;;;AAGA;AAGA;AACA;AACA;;AAEA;;;AAGA;;AApCA;;;;;AAAA;ACqDA;AAEA;AAEA;AAKA;;AAGA;;;AAKA;AACA;AACA;;AAEA;;AAGA;AAGA;;AAEA;;AAEA;AAEA;;;;;AAMA;;;;;;;AApEA;;ACpBA;AACA;AACA;;AAdA;ACiCA;AAGA;;AAEA;AAnCA;;ACwCA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AA/DA;;;;;;;;AAAA;;AC2BA;AAGA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;AA3CA;;;;AAAA;;ACkBA;;;AAKA;AACA;AACA;;;;AAIA;;;AAKA;AACA;AACA;;;;AAIA;;;AAKA;AACA;AACA;;AA9CA;;ACcA;AACA;AACA;;AAlBA;;AC2BA;AACA;AACA;;AA9BA;;AC2BA;AAGA;AACA;;AAEA;AAEA;AACA;;;;AAOA;;AAGA;;AAIA;AACA;;AAEA;AAEA;AAEA;;;AAKA;AACA;AACA;AACA;AAEA;AAEA;;;AAKA;AACA;AACA;AACA;;AAGA;;;AAKA;AACA;AACA;;AA5EA;;;;AAAA;;AC0CA;AACA;AACA;AACA;AACA;;AAjDA;;;;;AAAA;;ACIA;AAGA;AACA;;;AAGA;;;AAKA;AACA;;;AA3BA;;;;;AAAA;;ACmBA;AAGA;AACA;AACA;;;AAGA;;;AAKA;AACA;;;;AAIA;AACA;AACA;AACA;;AAtCA;;;;;AAAA;;AC8BA;AACA;AACA;AACA;;AAfA;;ACuBA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AA/DA;;;;;AAAA;;ACqCA;AACA;AACA;AACA;AACA;;AA9CA;;ACyCA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AA/DA;;;;;AAAA;ACyCA;;AAIA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAjDA;;ACqBA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AAEA;AAEA;;AAEA;AACA;;;AAGA;;;;;;;;;;;AA7CA;ACgCA;;;AAKA;AACA;AAGA;AACA;AACA;AACA;AAKA;;;AAGA;AACA;;AAIA;;;;;;;AASA;AAEA;AACA;AACA;AACA;;;;;;;;;;AArEA;;ACcA;;AAIA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;;AAGA;;AAIA;AAGA;AAGA;AACA;AACA;;AA1CA;;;;AAAA;;ACqCA;AACA;AACA;AACA;AACA;;AA5CA;;ACoCA;AACA;AACA;AACA;AACA;;AAxCA;;;;;AAAA;;ACeA;AACA;AACA;AACA;AACA;;AAhBA;;AC8CA;AACA;AACA;AACA;AACA;;AApDA;;AC0FA;AACA;AACA;AACA;AACA;;AArEA;;ACaA;AACA;AACA;AACA;AACA;;AA3CA;;ACqBA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;;;;AA9BA;;ACSA;;;;AAMA;;AAEA;AACA;;AAEA;;;AAxBA;;ACgFA;AACA;AACA;AACA;AACA;;AAhFA;;ACeA;AACA;AACA;AACA;AACA;;AAhBA;;;ACqEA;AAGA;;AAIA;AACA;;;AAGA;;AAEA;;;;AA5EA;;;;;;;;;AAAA;;ACeA;AAGA;AACA;AACA;;AAEA;;;AAGA;AAGA;AACA;AACA;;AAEA;;;;AAIA;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;AA9DA;;;;;;;;;AAAA;;AC+GA;AAEA;AAGA;;AAGA;;;AAGA;;;;AAIA;;AAIA;AACA;;;AASA;;;AAKA;;;AASA;;;;;AAOA;;AAIA;;AAGA;;AAIA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAKA;;AAGA;;;AAKA;AACA;AACA;;AAEA;;AAGA;AAGA;;AAEA;;AAEA;AAEA;;;AAIA;;AAGA;AAGA;AACA;;;AAGA;AAEA;AACA;;;;;AAQA;AAIA;;AAEA;;;;;;AAsMA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArXA;ACzEA;;AAGA;AACA;AACA;AACA;AACA;;;;;AAMA;AACA;;;;;;;;;;;;;;AArBA","sources":["webpack://home-assistant-frontend/./src/components/device/ha-device-automation-picker.ts","webpack://home-assistant-frontend/./src/components/device/ha-device-picker.ts","webpack://home-assistant-frontend/./src/components/entity/ha-entity-attribute-picker.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/components/entity/state-badge.ts","webpack://home-assistant-frontend/./src/components/entity/ha-entity-picker.ts","webpack://home-assistant-frontend/./src/components/ha-area-picker.ts","webpack://home-assistant-frontend/./src/components/ha-combo-box.ts","webpack://home-assistant-frontend/./src/components/ha-date-input.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-action.ts","webpack://home-assistant-frontend/./src/components/ha-addon-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-addon.ts","webpack://home-assistant-frontend/./src/components/ha-areas-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-area.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-attribute.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-boolean.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-color-rgb.ts","webpack://home-assistant-frontend/./src/components/ha-labeled-slider.js","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-color-temp.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-date.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-datetime.ts","webpack://home-assistant-frontend/./src/components/device/ha-devices-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-device.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-duration.ts","webpack://home-assistant-frontend/./src/components/entity/ha-entities-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-entity.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-icon.ts","webpack://home-assistant-frontend/./src/components/map/ha-entity-marker.ts","webpack://home-assistant-frontend/./src/components/map/ha-map.ts","webpack://home-assistant-frontend/./src/components/map/ha-locations-editor.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-location.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-media.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-number.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-object.ts","webpack://home-assistant-frontend/./src/components/ha-target-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-target.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-template.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-text.ts","webpack://home-assistant-frontend/./src/components/ha-theme-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-theme.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-time.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector.ts","webpack://home-assistant-frontend/./src/components/ha-service-control.ts","webpack://home-assistant-frontend/./src/components/ha-service-picker.ts","webpack://home-assistant-frontend/./src/components/ha-textarea.ts","webpack://home-assistant-frontend/./src/components/ha-time-input.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/ha-automation-action-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/ha-automation-action.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-activate_scene.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-choose.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-logical.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-numeric_state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-sun.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-time.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-trigger.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-zone.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition-editor.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-condition.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-delay.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-device_id.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-event.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-if.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-parallel.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-play_media.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-repeat.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-service.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-stop.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-wait_for_trigger.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-wait_template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-device.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-calendar.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-device.ts","webpack://home-assistant-frontend/./src/components/user/ha-user-badge.ts","webpack://home-assistant-frontend/./src/components/user/ha-user-picker.ts","webpack://home-assistant-frontend/./src/components/user/ha-users-picker.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-event.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-geo_location.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-homeassistant.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-mqtt.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-numeric_state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-sun.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-tag.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-time.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-time_pattern.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-webhook.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-zone.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/ha-automation-trigger-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/ha-automation-trigger.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport {\n  DeviceAutomation,\n  deviceAutomationsEqual,\n  sortDeviceAutomations,\n} from \"../../data/device_automation\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-select\";\n\nconst NO_AUTOMATION_KEY = \"NO_AUTOMATION\";\nconst UNKNOWN_AUTOMATION_KEY = \"UNKNOWN_AUTOMATION\";\n\nexport abstract class HaDeviceAutomationPicker<\n  T extends DeviceAutomation\n> extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public deviceId?: string;\n\n  @property() public value?: T;\n\n  @state() private _automations: T[] = [];\n\n  // Trigger an empty render so we start with a clean DOM.\n  // paper-listbox does not like changing things around.\n  @state() private _renderEmpty = false;\n\n  protected get NO_AUTOMATION_TEXT() {\n    return this.hass.localize(\n      \"ui.panel.config.devices.automation.actions.no_actions\"\n    );\n  }\n\n  protected get UNKNOWN_AUTOMATION_TEXT() {\n    return this.hass.localize(\n      \"ui.panel.config.devices.automation.actions.unknown_action\"\n    );\n  }\n\n  private _localizeDeviceAutomation: (\n    hass: HomeAssistant,\n    automation: T\n  ) => string;\n\n  private _fetchDeviceAutomations: (\n    hass: HomeAssistant,\n    deviceId: string\n  ) => Promise<T[]>;\n\n  private _createNoAutomation: (deviceId?: string) => T;\n\n  constructor(\n    localizeDeviceAutomation: HaDeviceAutomationPicker<T>[\"_localizeDeviceAutomation\"],\n    fetchDeviceAutomations: HaDeviceAutomationPicker<T>[\"_fetchDeviceAutomations\"],\n    createNoAutomation: HaDeviceAutomationPicker<T>[\"_createNoAutomation\"]\n  ) {\n    super();\n    this._localizeDeviceAutomation = localizeDeviceAutomation;\n    this._fetchDeviceAutomations = fetchDeviceAutomations;\n    this._createNoAutomation = createNoAutomation;\n  }\n\n  private get _value() {\n    if (!this.value) {\n      return \"\";\n    }\n\n    if (!this._automations.length) {\n      return NO_AUTOMATION_KEY;\n    }\n\n    const idx = this._automations.findIndex((automation) =>\n      deviceAutomationsEqual(automation, this.value!)\n    );\n\n    if (idx === -1) {\n      return UNKNOWN_AUTOMATION_KEY;\n    }\n\n    return `${this._automations[idx].device_id}_${idx}`;\n  }\n\n  protected render(): TemplateResult {\n    if (this._renderEmpty) {\n      return html``;\n    }\n    const value = this._value;\n    return html`\n      <ha-select\n        .label=${this.label}\n        .value=${value}\n        @selected=${this._automationChanged}\n        .disabled=${this._automations.length === 0}\n      >\n        ${value === NO_AUTOMATION_KEY\n          ? html`<mwc-list-item .value=${NO_AUTOMATION_KEY}>\n              ${this.NO_AUTOMATION_TEXT}\n            </mwc-list-item>`\n          : \"\"}\n        ${value === UNKNOWN_AUTOMATION_KEY\n          ? html`<mwc-list-item .value=${UNKNOWN_AUTOMATION_KEY}>\n              ${this.UNKNOWN_AUTOMATION_TEXT}\n            </mwc-list-item>`\n          : \"\"}\n        ${this._automations.map(\n          (automation, idx) => html`\n            <mwc-list-item .value=${`${automation.device_id}_${idx}`}>\n              ${this._localizeDeviceAutomation(this.hass, automation)}\n            </mwc-list-item>\n          `\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"deviceId\")) {\n      this._updateDeviceInfo();\n    }\n  }\n\n  private async _updateDeviceInfo() {\n    this._automations = this.deviceId\n      ? (await this._fetchDeviceAutomations(this.hass, this.deviceId)).sort(\n          sortDeviceAutomations\n        )\n      : // No device, clear the list of automations\n        [];\n\n    // If there is no value, or if we have changed the device ID, reset the value.\n    if (!this.value || this.value.device_id !== this.deviceId) {\n      this._setValue(\n        this._automations.length\n          ? this._automations[0]\n          : this._createNoAutomation(this.deviceId)\n      );\n    }\n    this._renderEmpty = true;\n    await this.updateComplete;\n    this._renderEmpty = false;\n  }\n\n  private _automationChanged(ev) {\n    const value = ev.target.value;\n    if (!value || [UNKNOWN_AUTOMATION_KEY, NO_AUTOMATION_KEY].includes(value)) {\n      return;\n    }\n    const [deviceId, idx] = value.split(\"_\");\n    const automation = this._automations[idx];\n    if (automation.device_id !== deviceId) {\n      return;\n    }\n    this._setValue(automation);\n  }\n\n  private _setValue(automation: T) {\n    if (this.value && deviceAutomationsEqual(automation, this.value)) {\n      return;\n    }\n    const value = { ...automation };\n    delete value.metadata;\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-select {\n        width: 100%;\n        margin-top: 4px;\n      }\n    `;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\n\ninterface Device {\n  name: string;\n  area: string;\n  id: string;\n}\n\nexport type HaDevicePickerDeviceFilterFunc = (\n  device: DeviceRegistryEntry\n) => boolean;\n\nconst rowRenderer: ComboBoxLitRenderer<Device> = (item) => html`<mwc-list-item\n  .twoline=${!!item.area}\n>\n  <span>${item.name}</span>\n  <span slot=\"secondary\">${item.area}</span>\n</mwc-list-item>`;\n\n@customElement(\"ha-device-picker\")\nexport class HaDevicePicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public devices?: DeviceRegistryEntry[];\n\n  @property() public areas?: AreaRegistryEntry[];\n\n  @property() public entities?: EntityRegistryEntry[];\n\n  /**\n   * Show only devices with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no devices with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only devices with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _init = false;\n\n  private _getDevices = memoizeOne(\n    (\n      devices: DeviceRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      entities: EntityRegistryEntry[],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"]\n    ): Device[] => {\n      if (!devices.length) {\n        return [\n          {\n            id: \"no_devices\",\n            area: \"\",\n            name: this.hass.localize(\"ui.components.device-picker.no_devices\"),\n          },\n        ];\n      }\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n\n      if (includeDomains || excludeDomains || includeDeviceClasses) {\n        for (const entity of entities) {\n          if (!entity.device_id) {\n            continue;\n          }\n          if (!(entity.device_id in deviceEntityLookup)) {\n            deviceEntityLookup[entity.device_id] = [];\n          }\n          deviceEntityLookup[entity.device_id].push(entity);\n        }\n      }\n\n      const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n      for (const area of areas) {\n        areaLookup[area.area_id] = area;\n      }\n\n      let inputDevices = devices.filter(\n        (device) => device.id === this.value || !device.disabled_by\n      );\n\n      if (includeDomains) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n      }\n\n      if (excludeDomains) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return true;\n          }\n          return entities.every(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n      }\n\n      if (includeDeviceClasses) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        });\n      }\n\n      if (deviceFilter) {\n        inputDevices = inputDevices.filter(\n          (device) =>\n            // We always want to include the device of the current value\n            device.id === this.value || deviceFilter!(device)\n        );\n      }\n\n      const outputDevices = inputDevices.map((device) => ({\n        id: device.id,\n        name: computeDeviceName(\n          device,\n          this.hass,\n          deviceEntityLookup[device.id]\n        ),\n        area:\n          device.area_id && areaLookup[device.area_id]\n            ? areaLookup[device.area_id].name\n            : this.hass.localize(\"ui.components.device-picker.no_area\"),\n      }));\n      if (!outputDevices.length) {\n        return [\n          {\n            id: \"no_devices\",\n            area: \"\",\n            name: this.hass.localize(\"ui.components.device-picker.no_match\"),\n          },\n        ];\n      }\n      if (outputDevices.length === 1) {\n        return outputDevices;\n      }\n      return outputDevices.sort((a, b) =>\n        stringCompare(a.name || \"\", b.name || \"\")\n      );\n    }\n  );\n\n  public open() {\n    this.comboBox?.open();\n  }\n\n  public focus() {\n    this.comboBox?.focus();\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this.devices = devices;\n      }),\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this.areas = areas;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this.entities = entities;\n      }),\n    ];\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      (!this._init && this.devices && this.areas && this.entities) ||\n      (changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      (this.comboBox as any).items = this._getDevices(\n        this.devices!,\n        this.areas!,\n        this.entities!,\n        this.includeDomains,\n        this.excludeDomains,\n        this.includeDeviceClasses,\n        this.deviceFilter\n      );\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.devices || !this.areas || !this.entities) {\n      return html``;\n    }\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.device-picker.device\")\n          : this.label}\n        .value=${this._value}\n        .helper=${this.helper}\n        .renderer=${rowRenderer}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        item-value-path=\"id\"\n        item-label-path=\"name\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._deviceChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _deviceChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n\n    if (newValue === \"no_devices\") {\n      newValue = \"\";\n    }\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-picker\": HaDevicePicker;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { formatAttributeName } from \"../../data/entity_attributes\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\n@customElement(\"ha-entity-attribute-picker\")\nclass HaEntityAttributePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId?: string;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-value\" })\n  public allowCustomValue;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) private _opened = false;\n\n  @query(\"ha-combo-box\", true) private _comboBox!: HaComboBox;\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"_opened\") && this._opened) {\n      const state = this.entityId ? this.hass.states[this.entityId] : undefined;\n      (this._comboBox as any).items = state\n        ? Object.keys(state.attributes).map((key) => ({\n            value: key,\n            label: formatAttributeName(key),\n          }))\n        : [];\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .value=${this.value || \"\"}\n        .autofocus=${this.autofocus}\n        .label=${this.label ??\n        this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        )}\n        .disabled=${this.disabled || !this.entityId}\n        .required=${this.required}\n        .helper=${this.helper}\n        .allowCustomValue=${this.allowCustomValue}\n        item-value-path=\"value\"\n        item-label-path=\"label\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    this.value = ev.detail.value;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-attribute-picker\": HaEntityAttributePicker;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import { mdiAlert } from \"@mdi/js\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeActiveState } from \"../../common/entity/compute_active_state\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { iconColorCSS } from \"../../common/style/icon_color_css\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-state-icon\";\n\nexport class StateBadge extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property() public overrideIcon?: string;\n\n  @property() public overrideImage?: string;\n\n  @property({ type: Boolean }) public stateColor?: boolean;\n\n  @property({ type: Boolean, reflect: true, attribute: \"icon\" })\n  private _showIcon = true;\n\n  @state() private _iconStyle: { [name: string]: string } = {};\n\n  protected render(): TemplateResult {\n    const stateObj = this.stateObj;\n\n    // We either need a `stateObj` or one override\n    if (!stateObj && !this.overrideIcon && !this.overrideImage) {\n      return html`<div class=\"missing\">\n        <ha-svg-icon .path=${mdiAlert}></ha-svg-icon>\n      </div>`;\n    }\n\n    if (!this._showIcon) {\n      return html``;\n    }\n\n    const domain = stateObj ? computeStateDomain(stateObj) : undefined;\n\n    return html`<ha-state-icon\n      style=${styleMap(this._iconStyle)}\n      data-domain=${ifDefined(\n        this.stateColor || (domain === \"light\" && this.stateColor !== false)\n          ? domain\n          : undefined\n      )}\n      data-state=${stateObj ? computeActiveState(stateObj) : \"\"}\n      .icon=${this.overrideIcon}\n      .state=${stateObj}\n    ></ha-state-icon>`;\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (\n      !changedProps.has(\"stateObj\") &&\n      !changedProps.has(\"overrideImage\") &&\n      !changedProps.has(\"overrideIcon\")\n    ) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: { [name: string]: string } = {};\n    const hostStyle: Partial<CSSStyleDeclaration> = {\n      backgroundImage: \"\",\n    };\n\n    this._showIcon = true;\n\n    if (stateObj && this.overrideImage === undefined) {\n      // hide icon if we have entity picture\n      if (\n        (stateObj.attributes.entity_picture_local ||\n          stateObj.attributes.entity_picture) &&\n        !this.overrideIcon\n      ) {\n        let imageUrl =\n          stateObj.attributes.entity_picture_local ||\n          stateObj.attributes.entity_picture;\n        if (this.hass) {\n          imageUrl = this.hass.hassUrl(imageUrl);\n        }\n        hostStyle.backgroundImage = `url(${imageUrl})`;\n        this._showIcon = false;\n      } else if (stateObj.state === \"on\") {\n        if (this.stateColor !== false && stateObj.attributes.rgb_color) {\n          iconStyle.color = `rgb(${stateObj.attributes.rgb_color.join(\",\")})`;\n        }\n        if (stateObj.attributes.brightness && this.stateColor !== false) {\n          const brightness = stateObj.attributes.brightness;\n          if (typeof brightness !== \"number\") {\n            const errorMessage = `Type error: state-badge expected number, but type of ${\n              stateObj.entity_id\n            }.attributes.brightness is ${typeof brightness} (${brightness})`;\n            // eslint-disable-next-line\n            console.warn(errorMessage);\n          }\n          // lowest brightness will be around 50% (that's pretty dark)\n          iconStyle.filter = `brightness(${(brightness + 245) / 5}%)`;\n        }\n      }\n    } else if (this.overrideImage) {\n      let imageUrl = this.overrideImage;\n      if (this.hass) {\n        imageUrl = this.hass.hassUrl(imageUrl);\n      }\n      hostStyle.backgroundImage = `url(${imageUrl})`;\n      this._showIcon = false;\n    }\n\n    this._iconStyle = iconStyle;\n    Object.assign(this.style, hostStyle);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      iconColorCSS,\n      css`\n        :host {\n          position: relative;\n          display: inline-block;\n          width: 40px;\n          color: var(--paper-item-icon-color, #44739e);\n          border-radius: 50%;\n          height: 40px;\n          text-align: center;\n          background-size: cover;\n          line-height: 40px;\n          vertical-align: middle;\n          box-sizing: border-box;\n        }\n        :host(:focus) {\n          outline: none;\n        }\n        :host(:not([icon]):focus) {\n          border: 2px solid var(--divider-color);\n        }\n        :host([icon]:focus) {\n          background: var(--divider-color);\n        }\n        ha-state-icon {\n          transition: color 0.3s ease-in-out, filter 0.3s ease-in-out;\n        }\n        .missing {\n          color: #fce588;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n","import \"@material/mwc-list/mwc-list-item\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\nimport { defaultFuzzyFilterSort } from \"../../common/string/filter/sequence-matching\";\n\ninterface HassEntityWithCachedName extends HassEntity {\n  friendly_name: string;\n}\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<HassEntityWithCachedName> = (item) =>\n  html`<mwc-list-item graphic=\"avatar\" .twoline=${!!item.entity_id}>\n    ${item.state\n      ? html`<state-badge slot=\"graphic\" .stateObj=${item}></state-badge>`\n      : \"\"}\n    <span>${item.friendly_name}</span>\n    <span slot=\"secondary\">${item.entity_id}</span>\n  </mwc-list-item>`;\n@customElement(\"ha-entity-picker\")\nexport class HaEntityPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  /**\n   * Show entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show. Will ignore all other filters.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean }) public hideClearIcon = false;\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  public open() {\n    this.updateComplete.then(() => {\n      this.comboBox?.open();\n    });\n  }\n\n  public focus() {\n    this.updateComplete.then(() => {\n      this.comboBox?.focus();\n    });\n  }\n\n  private _initedStates = false;\n\n  private _states: HassEntityWithCachedName[] = [];\n\n  private _getStates = memoizeOne(\n    (\n      _opened: boolean,\n      hass: this[\"hass\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      entityFilter: this[\"entityFilter\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      includeUnitOfMeasurement: this[\"includeUnitOfMeasurement\"],\n      includeEntities: this[\"includeEntities\"],\n      excludeEntities: this[\"excludeEntities\"]\n    ): HassEntityWithCachedName[] => {\n      let states: HassEntityWithCachedName[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (!entityIds.length) {\n        return [\n          {\n            entity_id: \"\",\n            state: \"\",\n            last_changed: \"\",\n            last_updated: \"\",\n            context: { id: \"\", user_id: null, parent_id: null },\n            friendly_name: this.hass!.localize(\n              \"ui.components.entity.entity-picker.no_entities\"\n            ),\n            attributes: {\n              friendly_name: this.hass!.localize(\n                \"ui.components.entity.entity-picker.no_entities\"\n              ),\n              icon: \"mdi:magnify\",\n            },\n          },\n        ];\n      }\n\n      if (includeEntities) {\n        entityIds = entityIds.filter((entityId) =>\n          this.includeEntities!.includes(entityId)\n        );\n\n        return entityIds\n          .map((key) => ({\n            ...hass!.states[key],\n            friendly_name: computeStateName(hass!.states[key]) || key,\n          }))\n          .sort((entityA, entityB) =>\n            caseInsensitiveStringCompare(\n              entityA.friendly_name,\n              entityB.friendly_name\n            )\n          );\n      }\n\n      if (excludeEntities) {\n        entityIds = entityIds.filter(\n          (entityId) => !excludeEntities!.includes(entityId)\n        );\n      }\n\n      if (includeDomains) {\n        entityIds = entityIds.filter((eid) =>\n          includeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      if (excludeDomains) {\n        entityIds = entityIds.filter(\n          (eid) => !excludeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      states = entityIds\n        .map((key) => ({\n          ...hass!.states[key],\n          friendly_name: computeStateName(hass!.states[key]) || key,\n        }))\n        .sort((entityA, entityB) =>\n          caseInsensitiveStringCompare(\n            entityA.friendly_name,\n            entityB.friendly_name\n          )\n        );\n\n      if (includeDeviceClasses) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class))\n        );\n      }\n\n      if (includeUnitOfMeasurement) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.unit_of_measurement &&\n              includeUnitOfMeasurement.includes(\n                stateObj.attributes.unit_of_measurement\n              ))\n        );\n      }\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n\n      if (!states.length) {\n        return [\n          {\n            entity_id: \"\",\n            state: \"\",\n            last_changed: \"\",\n            last_updated: \"\",\n            context: { id: \"\", user_id: null, parent_id: null },\n            friendly_name: this.hass!.localize(\n              \"ui.components.entity.entity-picker.no_match\"\n            ),\n            attributes: {\n              friendly_name: this.hass!.localize(\n                \"ui.components.entity.entity-picker.no_match\"\n              ),\n              icon: \"mdi:magnify\",\n            },\n          },\n        ];\n      }\n\n      return states;\n    }\n  );\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"value\") ||\n      changedProps.has(\"label\") ||\n      changedProps.has(\"disabled\")\n    ) {\n      return true;\n    }\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this._initedStates || (changedProps.has(\"_opened\") && this._opened)) {\n      this._states = this._getStates(\n        this._opened,\n        this.hass,\n        this.includeDomains,\n        this.excludeDomains,\n        this.entityFilter,\n        this.includeDeviceClasses,\n        this.includeUnitOfMeasurement,\n        this.includeEntities,\n        this.excludeEntities\n      );\n      if (this._initedStates) {\n        (this.comboBox as any).filteredItems = this._states;\n      }\n      this._initedStates = true;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        item-value-path=\"entity_id\"\n        item-label-path=\"friendly_name\"\n        .hass=${this.hass}\n        .value=${this._value}\n        .label=${this.label === undefined\n          ? this.hass.localize(\"ui.components.entity.entity-picker.entity\")\n          : this.label}\n        .helper=${this.helper}\n        .allowCustomValue=${this.allowCustomEntity}\n        .filteredItems=${this._states}\n        .renderer=${rowRenderer}\n        .required=${this.required}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value;\n\n    const sortableEntityStates = this._states.map((entityState) => ({\n      strings: [entityState.entity_id, computeStateName(entityState)],\n      entityState: entityState,\n    }));\n    const sortedEntityStates = defaultFuzzyFilterSort(\n      filterString,\n      sortableEntityStates\n    );\n    (this.comboBox as any).filteredItems = sortedEntityStates.map(\n      (sortableItem) => sortableItem.entityState\n    );\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport {\n  AreaRegistryEntry,\n  createAreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport {\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../data/entity_registry\";\nimport {\n  showAlertDialog,\n  showPromptDialog,\n} from \"../dialogs/generic/show-dialog-box\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst rowRenderer: ComboBoxLitRenderer<AreaRegistryEntry> = (\n  item\n) => html`<mwc-list-item\n  class=${classMap({ \"add-new\": item.area_id === \"add_new\" })}\n>\n  ${item.name}\n</mwc-list-item>`;\n\n@customElement(\"ha-area-picker\")\nexport class HaAreaPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd?: boolean;\n\n  /**\n   * Show only areas with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no areas with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only areas with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property() public entityFilter?: (entity: EntityRegistryEntry) => boolean;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _filter?: string;\n\n  private _init = false;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this._areas = areas;\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  public open() {\n    this.updateComplete.then(() => {\n      this.comboBox?.open();\n    });\n  }\n\n  public focus() {\n    this.updateComplete.then(() => {\n      this.comboBox?.focus();\n    });\n  }\n\n  private _getAreas = memoizeOne(\n    (\n      areas: AreaRegistryEntry[],\n      devices: DeviceRegistryEntry[],\n      entities: EntityRegistryEntry[],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      noAdd: this[\"noAdd\"]\n    ): AreaRegistryEntry[] => {\n      if (!areas.length) {\n        return [\n          {\n            area_id: \"no_areas\",\n            name: this.hass.localize(\"ui.components.area-picker.no_areas\"),\n            picture: null,\n          },\n        ];\n      }\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n      let inputDevices: DeviceRegistryEntry[] | undefined;\n      let inputEntities: EntityRegistryEntry[] | undefined;\n\n      if (includeDomains || excludeDomains || includeDeviceClasses) {\n        for (const entity of entities) {\n          if (!entity.device_id) {\n            continue;\n          }\n          if (!(entity.device_id in deviceEntityLookup)) {\n            deviceEntityLookup[entity.device_id] = [];\n          }\n          deviceEntityLookup[entity.device_id].push(entity);\n        }\n        inputDevices = devices;\n        inputEntities = entities.filter((entity) => entity.area_id);\n      } else {\n        if (deviceFilter) {\n          inputDevices = devices;\n        }\n        if (entityFilter) {\n          inputEntities = entities.filter((entity) => entity.area_id);\n        }\n      }\n\n      if (includeDomains) {\n        inputDevices = inputDevices!.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n        inputEntities = inputEntities!.filter((entity) =>\n          includeDomains.includes(computeDomain(entity.entity_id))\n        );\n      }\n\n      if (excludeDomains) {\n        inputDevices = inputDevices!.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return true;\n          }\n          return entities.every(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n        inputEntities = inputEntities!.filter(\n          (entity) => !excludeDomains.includes(computeDomain(entity.entity_id))\n        );\n      }\n\n      if (includeDeviceClasses) {\n        inputDevices = inputDevices!.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        });\n        inputEntities = inputEntities!.filter((entity) => {\n          const stateObj = this.hass.states[entity.entity_id];\n          return (\n            stateObj.attributes.device_class &&\n            includeDeviceClasses.includes(stateObj.attributes.device_class)\n          );\n        });\n      }\n\n      if (deviceFilter) {\n        inputDevices = inputDevices!.filter((device) => deviceFilter!(device));\n      }\n\n      if (entityFilter) {\n        inputEntities = inputEntities!.filter((entity) =>\n          entityFilter!(entity)\n        );\n      }\n\n      let outputAreas = areas;\n\n      let areaIds: string[] | undefined;\n\n      if (inputDevices) {\n        areaIds = inputDevices\n          .filter((device) => device.area_id)\n          .map((device) => device.area_id!);\n      }\n\n      if (inputEntities) {\n        areaIds = (areaIds ?? []).concat(\n          inputEntities\n            .filter((entity) => entity.area_id)\n            .map((entity) => entity.area_id!)\n        );\n      }\n\n      if (areaIds) {\n        outputAreas = areas.filter((area) => areaIds!.includes(area.area_id));\n      }\n\n      if (!outputAreas.length) {\n        outputAreas = [\n          {\n            area_id: \"no_areas\",\n            name: this.hass.localize(\"ui.components.area-picker.no_match\"),\n            picture: null,\n          },\n        ];\n      }\n\n      return noAdd\n        ? outputAreas\n        : [\n            ...outputAreas,\n            {\n              area_id: \"add_new\",\n              name: this.hass.localize(\"ui.components.area-picker.add_new\"),\n              picture: null,\n            },\n          ];\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      (!this._init && this._devices && this._areas && this._entities) ||\n      (changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      (this.comboBox as any).items = this._getAreas(\n        this._areas!,\n        this._devices!,\n        this._entities!,\n        this.includeDomains,\n        this.excludeDomains,\n        this.includeDeviceClasses,\n        this.deviceFilter,\n        this.entityFilter,\n        this.noAdd\n      );\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._devices || !this._areas || !this._entities) {\n      return html``;\n    }\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .helper=${this.helper}\n        item-value-path=\"area_id\"\n        item-id-path=\"area_id\"\n        item-label-path=\"name\"\n        .value=${this.value}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.area-picker.area\")\n          : this.label}\n        .placeholder=${this.placeholder\n          ? this._area(this.placeholder)?.name\n          : undefined}\n        .renderer=${rowRenderer}\n        @filter-changed=${this._filterChanged}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._areaChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private _area = memoizeOne((areaId: string): AreaRegistryEntry | undefined =>\n    this._areas?.find((area) => area.area_id === areaId)\n  );\n\n  private _filterChanged(ev: CustomEvent): void {\n    this._filter = ev.detail.value;\n    if (!this._filter) {\n      this.comboBox.filteredItems = this.comboBox.items;\n      return;\n    }\n    // @ts-ignore\n    if (!this.noAdd && this.comboBox._comboBox.filteredItems?.length === 0) {\n      this.comboBox.filteredItems = [\n        {\n          area_id: \"add_new_suggestion\",\n          name: this.hass.localize(\n            \"ui.components.area-picker.add_new_sugestion\",\n            { name: this._filter }\n          ),\n          picture: null,\n        },\n      ];\n    } else {\n      this.comboBox.filteredItems = this.comboBox.items?.filter((item) =>\n        item.name.toLowerCase().includes(this._filter!.toLowerCase())\n      );\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _areaChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n\n    if (newValue === \"no_areas\") {\n      newValue = \"\";\n    }\n\n    if (![\"add_new_suggestion\", \"add_new\"].includes(newValue)) {\n      if (newValue !== this._value) {\n        this._setValue(newValue);\n      }\n      return;\n    }\n\n    (ev.target as any).value = this._value;\n    showPromptDialog(this, {\n      title: this.hass.localize(\"ui.components.area-picker.add_dialog.title\"),\n      text: this.hass.localize(\"ui.components.area-picker.add_dialog.text\"),\n      confirmText: this.hass.localize(\n        \"ui.components.area-picker.add_dialog.add\"\n      ),\n      inputLabel: this.hass.localize(\n        \"ui.components.area-picker.add_dialog.name\"\n      ),\n      defaultValue:\n        newValue === \"add_new_suggestion\" ? this._filter : undefined,\n      confirm: async (name) => {\n        if (!name) {\n          return;\n        }\n        try {\n          const area = await createAreaRegistryEntry(this.hass, {\n            name,\n          });\n          this._areas = [...this._areas!, area];\n          (this.comboBox as any).filteredItems = this._getAreas(\n            this._areas!,\n            this._devices!,\n            this._entities!,\n            this.includeDomains,\n            this.excludeDomains,\n            this.includeDeviceClasses,\n            this.deviceFilter,\n            this.entityFilter,\n            this.noAdd\n          );\n          await this.updateComplete;\n          await this.comboBox.updateComplete;\n          this._setValue(area.area_id);\n        } catch (err: any) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.components.area-picker.add_dialog.failed_create_area\"\n            ),\n            text: err.message,\n          });\n        }\n      },\n    });\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-area-picker\": HaAreaPicker;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { mdiClose, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@vaadin/combo-box/theme/material/vaadin-combo-box-light\";\nimport type { ComboBoxLight } from \"@vaadin/combo-box/vaadin-combo-box-light\";\nimport { registerStyles } from \"@vaadin/vaadin-themable-mixin/register-styles\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\nimport \"./ha-textfield\";\n\nregisterStyles(\n  \"vaadin-combo-box-item\",\n  css`\n    :host {\n      padding: 0;\n    }\n    :host([focused]:not([disabled])) {\n      background-color: rgba(var(--rgb-primary-text-color, 0, 0, 0), 0.12);\n    }\n    :host([selected]:not([disabled])) {\n      background-color: transparent;\n      color: var(--mdc-theme-primary);\n      --mdc-ripple-color: var(--mdc-theme-primary);\n      --mdc-theme-text-primary-on-background: var(--mdc-theme-primary);\n    }\n    :host([selected]:not([disabled])):before {\n      background-color: var(--mdc-theme-primary);\n      opacity: 0.12;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n    }\n    :host([selected][focused]:not([disabled])):before {\n      opacity: 0.24;\n    }\n    :host(:hover:not([disabled])) {\n      background-color: transparent;\n    }\n    [part=\"content\"] {\n      width: 100%;\n    }\n    [part=\"checkmark\"] {\n      display: none;\n    }\n  `\n);\n\n@customElement(\"ha-combo-box\")\nexport class HaComboBox extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public validationMessage?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ type: Boolean }) public icon?: boolean;\n\n  @property() public items?: any[];\n\n  @property() public filteredItems?: any[];\n\n  @property({ attribute: \"allow-custom-value\", type: Boolean })\n  public allowCustomValue?: boolean;\n\n  @property({ attribute: \"item-value-path\" }) public itemValuePath?: string;\n\n  @property({ attribute: \"item-label-path\" }) public itemLabelPath?: string;\n\n  @property({ attribute: \"item-id-path\" }) public itemIdPath?: string;\n\n  @property() public renderer?: ComboBoxLitRenderer<any>;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  @property({ type: Boolean, reflect: true, attribute: \"opened\" })\n  private _opened?: boolean;\n\n  @query(\"vaadin-combo-box-light\", true) private _comboBox!: ComboBoxLight;\n\n  public open() {\n    this.updateComplete.then(() => {\n      this._comboBox?.open();\n    });\n  }\n\n  public focus() {\n    this.updateComplete.then(() => {\n      this._comboBox?.inputElement?.focus();\n    });\n  }\n\n  public get selectedItem() {\n    return this._comboBox.selectedItem;\n  }\n\n  public setInputValue(value: string) {\n    this._comboBox.value = value;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <vaadin-combo-box-light\n        .itemValuePath=${this.itemValuePath}\n        .itemIdPath=${this.itemIdPath}\n        .itemLabelPath=${this.itemLabelPath}\n        .items=${this.items}\n        .value=${this.value || \"\"}\n        .filteredItems=${this.filteredItems}\n        .allowCustomValue=${this.allowCustomValue}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        ${comboBoxRenderer(this.renderer || this._defaultRowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @filter-changed=${this._filterChanged}\n        @value-changed=${this._valueChanged}\n        attr-for-value=\"value\"\n      >\n        <ha-textfield\n          .label=${this.label}\n          .placeholder=${this.placeholder}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          .validationMessage=${this.validationMessage}\n          .errorMessage=${this.errorMessage}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n          .suffix=${html`<div style=\"width: 28px;\"></div>`}\n          .icon=${this.icon}\n          .invalid=${this.invalid}\n          .helper=${this.helper}\n          helperPersistent\n        >\n          <slot name=\"icon\" slot=\"leadingIcon\"></slot>\n        </ha-textfield>\n        ${this.value\n          ? html`<ha-svg-icon\n              aria-label=${this.hass?.localize(\"ui.components.combo-box.clear\")}\n              class=\"clear-button\"\n              .path=${mdiClose}\n              @click=${this._clearValue}\n            ></ha-svg-icon>`\n          : \"\"}\n        <ha-svg-icon\n          aria-label=${this.hass?.localize(\"ui.components.combo-box.show\")}\n          class=\"toggle-button\"\n          .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n          @click=${this._toggleOpen}\n        ></ha-svg-icon>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _defaultRowRenderer: ComboBoxLitRenderer<\n    string | Record<string, any>\n  > = (item) =>\n    html`<mwc-list-item>\n      ${this.itemLabelPath ? item[this.itemLabelPath] : item}\n    </mwc-list-item>`;\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", { value: undefined });\n  }\n\n  private _toggleOpen(ev: Event) {\n    if (this._opened) {\n      this._comboBox?.close();\n      ev.stopPropagation();\n    } else {\n      this._comboBox?.inputElement.focus();\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    // delay this so we can handle click event before setting _opened\n    setTimeout(() => {\n      this._opened = ev.detail.value;\n    }, 0);\n    // @ts-ignore\n    fireEvent(this, ev.type, ev.detail);\n  }\n\n  private _filterChanged(ev: PolymerChangedEvent<string>) {\n    // @ts-ignore\n    fireEvent(this, ev.type, ev.detail, { composed: false });\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    if (newValue !== this.value) {\n      fireEvent(this, \"value-changed\", { value: newValue });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        width: 100%;\n      }\n      vaadin-combo-box-light {\n        position: relative;\n      }\n      ha-textfield {\n        width: 100%;\n      }\n      ha-textfield > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      ha-svg-icon {\n        color: var(--input-dropdown-icon-color);\n        position: absolute;\n        cursor: pointer;\n      }\n      .toggle-button {\n        right: 12px;\n        top: -10px;\n      }\n      :host([opened]) .toggle-button {\n        color: var(--primary-color);\n      }\n      .clear-button {\n        --mdc-icon-size: 20px;\n        top: -7px;\n        right: 36px;\n      }\n\n      :host-context([style*=\"direction: rtl;\"]) .toggle-button {\n        left: 12px;\n        right: auto;\n        top: -10px;\n      }\n      :host-context([style*=\"direction: rtl;\"]) .clear-button {\n        --mdc-icon-size: 20px;\n        top: -7px;\n        left: 36px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-combo-box\": HaComboBox;\n  }\n}\n","import { mdiCalendar } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { formatDateNumeric } from \"../common/datetime/format_date\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\n\nconst loadDatePickerDialog = () => import(\"./ha-dialog-date-picker\");\n\nexport interface datePickerDialogParams {\n  value?: string;\n  min?: string;\n  max?: string;\n  locale?: string;\n  onChange: (value: string) => void;\n}\n\nconst showDatePickerDialog = (\n  element: HTMLElement,\n  dialogParams: datePickerDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"ha-dialog-date-picker\",\n    dialogImport: loadDatePickerDialog,\n    dialogParams,\n  });\n};\n@customElement(\"ha-date-input\")\nexport class HaDateInput extends LitElement {\n  @property({ attribute: false }) public locale!: HomeAssistant[\"locale\"];\n\n  @property() public value?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  render() {\n    return html`<ha-textfield\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      iconTrailing\n      helperPersistent\n      @click=${this._openDialog}\n      .value=${this.value\n        ? formatDateNumeric(new Date(this.value), this.locale)\n        : \"\"}\n      .required=${this.required}\n    >\n      <ha-svg-icon slot=\"trailingIcon\" .path=${mdiCalendar}></ha-svg-icon>\n    </ha-textfield>`;\n  }\n\n  private _openDialog() {\n    if (this.disabled) {\n      return;\n    }\n    showDatePickerDialog(this, {\n      min: \"1970-01-01\",\n      value: this.value,\n      onChange: (value) => this._valueChanged(value),\n      locale: this.locale.language,\n    });\n  }\n\n  private _valueChanged(value: string) {\n    if (this.value !== value) {\n      this.value = value;\n      fireEvent(this, \"change\");\n      fireEvent(this, \"value-changed\", { value });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-date-input\": HaDateInput;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { Action } from \"../../data/script\";\nimport { ActionSelector } from \"../../data/selector\";\nimport \"../../panels/config/automation/action/ha-automation-action\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-selector-action\")\nexport class HaActionSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: ActionSelector;\n\n  @property() public value?: Action;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  protected render() {\n    return html`<ha-automation-action\n      .disabled=${this.disabled}\n      .actions=${this.value || []}\n      .hass=${this.hass}\n    ></ha-automation-action>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-action {\n        display: block;\n        margin-bottom: 16px;\n      }\n      :host([disabled]) ha-automation-action {\n        opacity: var(--light-disabled-opacity);\n        pointer-events: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-action\": HaActionSelector;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stringCompare } from \"../common/string/compare\";\nimport { HassioAddonInfo } from \"../data/hassio/addon\";\nimport { fetchHassioSupervisorInfo } from \"../data/hassio/supervisor\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport { HaComboBox } from \"./ha-combo-box\";\n\nconst rowRenderer: ComboBoxLitRenderer<HassioAddonInfo> = (\n  item\n) => html`<mwc-list-item twoline graphic=\"icon\">\n  <span>${item.name}</span>\n  <span slot=\"secondary\">${item.slug}</span>\n  ${item.icon\n    ? html`<img slot=\"graphic\" .src=\"/api/hassio/addons/${item.slug}/icon\" />`\n    : \"\"}\n</mwc-list-item>`;\n\n@customElement(\"ha-addon-picker\")\nclass HaAddonPicker extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value = \"\";\n\n  @property() public helper?: string;\n\n  @state() private _addons?: HassioAddonInfo[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @query(\"ha-combo-box\") private _comboBox!: HaComboBox;\n\n  public open() {\n    this._comboBox?.open();\n  }\n\n  public focus() {\n    this._comboBox?.focus();\n  }\n\n  protected firstUpdated() {\n    this._getAddons();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._addons) {\n      return html``;\n    }\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.addon-picker.addon\")\n          : this.label}\n        .value=${this._value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .renderer=${rowRenderer}\n        .items=${this._addons}\n        item-value-path=\"slug\"\n        item-id-path=\"slug\"\n        item-label-path=\"name\"\n        @value-changed=${this._addonChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private async _getAddons() {\n    try {\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        const supervisorInfo = await fetchHassioSupervisorInfo(this.hass);\n        this._addons = supervisorInfo.addons.sort((a, b) =>\n          stringCompare(a.name, b.name)\n        );\n      } else {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.componencts.addon-picker.error.no_supervisor.title\"\n          ),\n          text: this.hass.localize(\n            \"ui.componencts.addon-picker.error.no_supervisor.description\"\n          ),\n        });\n      }\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.componencts.addon-picker.error.fetch_addons.title\"\n        ),\n        text: this.hass.localize(\n          \"ui.componencts.addon-picker.error.fetch_addons.description\"\n        ),\n      });\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _addonChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-addon-picker\": HaAddonPicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { AddonSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-addon-picker\";\n\n@customElement(\"ha-selector-addon\")\nexport class HaAddonSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: AddonSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`<ha-addon-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      .required=${this.required}\n      allow-custom-entity\n    ></ha-addon-picker>`;\n  }\n\n  static styles = css`\n    ha-addon-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-addon\": HaAddonSelector;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { EntityRegistryEntry } from \"../data/entity_registry\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-area-picker\";\n\n@customElement(\"ha-areas-picker\")\nexport class HaAreasPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string[];\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd?: boolean;\n\n  /**\n   * Show only areas with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no areas with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only areas with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property() public entityFilter?: (entity: EntityRegistryEntry) => boolean;\n\n  @property({ attribute: \"picked-area-label\" })\n  public pickedAreaLabel?: string;\n\n  @property({ attribute: \"pick-area-label\" })\n  public pickAreaLabel?: string;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const currentAreas = this._currentAreas;\n    return html`\n      ${currentAreas.map(\n        (area) => html`\n          <div>\n            <ha-area-picker\n              .curValue=${area}\n              .noAdd=${this.noAdd}\n              .hass=${this.hass}\n              .value=${area}\n              .label=${this.pickedAreaLabel}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .deviceFilter=${this.deviceFilter}\n              .entityFilter=${this.entityFilter}\n              .disabled=${this.disabled}\n              @value-changed=${this._areaChanged}\n            ></ha-area-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-area-picker\n          .noAdd=${this.noAdd}\n          .hass=${this.hass}\n          .label=${this.pickAreaLabel}\n          .helper=${this.helper}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityFilter}\n          .disabled=${this.disabled}\n          .placeholder=${this.placeholder}\n          .required=${this.required && !currentAreas.length}\n          @value-changed=${this._addArea}\n        ></ha-area-picker>\n      </div>\n    `;\n  }\n\n  private get _currentAreas(): string[] {\n    return this.value || [];\n  }\n\n  private async _updateAreas(areas) {\n    this.value = areas;\n\n    fireEvent(this, \"value-changed\", {\n      value: areas,\n    });\n  }\n\n  private _areaChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const curValue = (ev.currentTarget as any).curValue;\n    const newValue = ev.detail.value;\n    if (newValue === curValue) {\n      return;\n    }\n    const currentAreas = this._currentAreas;\n    if (!newValue || currentAreas.includes(newValue)) {\n      this._updateAreas(currentAreas.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateAreas(\n      currentAreas.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private _addArea(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    const toAdd = ev.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (ev.currentTarget as any).value = \"\";\n    const currentAreas = this._currentAreas;\n    if (currentAreas.includes(toAdd)) {\n      return;\n    }\n\n    this._updateAreas([...currentAreas, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-areas-picker\": HaAreasPicker;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ConfigEntry, getConfigEntries } from \"../../data/config_entries\";\nimport { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { EntityRegistryEntry } from \"../../data/entity_registry\";\nimport { AreaSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-area-picker\";\nimport \"../ha-areas-picker\";\n\n@customElement(\"ha-selector-area\")\nexport class HaAreaSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: AreaSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @state() public _configEntries?: ConfigEntry[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected updated(changedProperties) {\n    if (changedProperties.has(\"selector\")) {\n      const oldSelector = changedProperties.get(\"selector\");\n      if (\n        oldSelector !== this.selector &&\n        this.selector.area.device?.integration\n      ) {\n        getConfigEntries(this.hass, {\n          domain: this.selector.area.device.integration,\n        }).then((entries) => {\n          this._configEntries = entries;\n        });\n      }\n    }\n  }\n\n  protected render() {\n    if (!this.selector.area.multiple) {\n      return html`\n        <ha-area-picker\n          .hass=${this.hass}\n          .value=${this.value}\n          .label=${this.label}\n          .helper=${this.helper}\n          no-add\n          .deviceFilter=${this._filterDevices}\n          .entityFilter=${this._filterEntities}\n          .includeDeviceClasses=${this.selector.area.entity?.device_class\n            ? [this.selector.area.entity.device_class]\n            : undefined}\n          .includeDomains=${this.selector.area.entity?.domain\n            ? [this.selector.area.entity.domain]\n            : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n        ></ha-area-picker>\n      `;\n    }\n\n    return html`\n      <ha-areas-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .pickAreaLabel=${this.label}\n        no-add\n        .deviceFilter=${this._filterDevices}\n        .entityFilter=${this._filterEntities}\n        .includeDeviceClasses=${this.selector.area.entity?.device_class\n          ? [this.selector.area.entity.device_class]\n          : undefined}\n        .includeDomains=${this.selector.area.entity?.domain\n          ? [this.selector.area.entity.domain]\n          : undefined}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-areas-picker>\n    `;\n  }\n\n  private _filterEntities = (entity: EntityRegistryEntry): boolean => {\n    if (this.selector.area.entity?.integration) {\n      if (entity.platform !== this.selector.area.entity.integration) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (\n      this.selector.area.device?.manufacturer &&\n      device.manufacturer !== this.selector.area.device.manufacturer\n    ) {\n      return false;\n    }\n    if (\n      this.selector.area.device?.model &&\n      device.model !== this.selector.area.device.model\n    ) {\n      return false;\n    }\n    if (this.selector.area.device?.integration) {\n      if (\n        this._configEntries &&\n        !this._configEntries.some((entry) =>\n          device.config_entries.includes(entry.entry_id)\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-area\": HaAreaSelector;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { AttributeSelector } from \"../../data/selector\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../entity/ha-entity-attribute-picker\";\n\n@customElement(\"ha-selector-attribute\")\nexport class HaSelectorAttribute extends SubscribeMixin(LitElement) {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: AttributeSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property() public context?: {\n    filter_entity?: string;\n  };\n\n  protected render() {\n    return html`\n      <ha-entity-attribute-picker\n        .hass=${this.hass}\n        .entityId=${this.selector.attribute.entity_id ||\n        this.context?.filter_entity}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        allow-custom-value\n      ></ha-entity-attribute-picker>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (\n      // No need to filter value if no value\n      !this.value ||\n      // Only adjust value if we used the context\n      this.selector.attribute.entity_id ||\n      // Only check if context has changed\n      !changedProps.has(\"context\")\n    ) {\n      return;\n    }\n\n    const oldContext = changedProps.get(\"context\") as this[\"context\"];\n\n    if (\n      !this.context ||\n      oldContext?.filter_entity === this.context.filter_entity\n    ) {\n      return;\n    }\n\n    // Validate that that the attribute is still valid for this entity, else unselect.\n    let invalid = false;\n    if (this.context.filter_entity) {\n      const stateObj = this.hass.states[this.context.filter_entity];\n\n      if (!(stateObj && this.value in stateObj.attributes)) {\n        invalid = true;\n      }\n    } else {\n      invalid = this.value !== undefined;\n    }\n\n    if (invalid) {\n      fireEvent(this, \"value-changed\", {\n        value: undefined,\n      });\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-attribute\": HaSelectorAttribute;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-formfield\";\nimport \"../ha-switch\";\nimport \"../ha-input-helper-text\";\n\n@customElement(\"ha-selector-boolean\")\nexport class HaBooleanSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: number;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    return html`\n      <ha-formfield alignEnd spaceBetween .label=${this.label}>\n        <ha-switch\n          .checked=${this.value}\n          @change=${this._handleChange}\n          .disabled=${this.disabled}\n        ></ha-switch>\n      </ha-formfield>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private _handleChange(ev) {\n    const value = ev.target.checked;\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-formfield {\n        display: flex;\n        height: 56px;\n        align-items: center;\n        --mdc-typography-body2-font-size: 1em;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-boolean\": HaBooleanSelector;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { hex2rgb, rgb2hex } from \"../../common/color/convert-color\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { ColorRGBSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-textfield\";\n\n@customElement(\"ha-selector-color_rgb\")\nexport class HaColorRGBSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: ColorRGBSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-textfield\n        type=\"color\"\n        helperPersistent\n        .value=${this.value ? rgb2hex(this.value as any) : \"\"}\n        .label=${this.label || \"\"}\n        .required=${this.required}\n        .helper=${this.helper}\n        .disalbled=${this.disabled}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const value = (ev.target as any).value;\n    fireEvent(this, \"value-changed\", {\n      value: hex2rgb(value),\n    });\n  }\n\n  static styles = css`\n    :host {\n      display: flex;\n      justify-content: flex-end;\n      align-items: center;\n    }\n    ha-textfield {\n      --text-field-padding: 8px;\n      min-width: 75px;\n      flex-grow: 1;\n      margin: 0 4px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-color_rgb\": HaColorRGBSelector;\n  }\n}\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"./ha-icon\";\nimport \"./ha-slider\";\n\nclass HaLabeledSlider extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        .title {\n          margin: 5px 0 8px;\n          color: var(--primary-text-color);\n        }\n\n        .slider-container {\n          display: flex;\n        }\n\n        ha-icon {\n          margin-top: 4px;\n          color: var(--secondary-text-color);\n        }\n\n        ha-slider {\n          flex-grow: 1;\n          background-image: var(--ha-slider-background);\n          border-radius: 4px;\n        }\n      </style>\n\n      <div class=\"title\">[[_getTitle()]]</div>\n      <div class=\"extra-container\"><slot name=\"extra\"></slot></div>\n      <div class=\"slider-container\">\n        <ha-icon icon=\"[[icon]]\" hidden$=\"[[!icon]]\"></ha-icon>\n        <ha-slider\n          min=\"[[min]]\"\n          max=\"[[max]]\"\n          step=\"[[step]]\"\n          pin=\"[[pin]]\"\n          disabled=\"[[disabled]]\"\n          value=\"{{value}}\"\n        ></ha-slider>\n      </div>\n      <template is=\"dom-if\" if=\"[[helper]]\">\n        <ha-input-helper-text>[[helper]]</ha-input-helper-text>\n      </template>\n    `;\n  }\n\n  _getTitle() {\n    return `${this.caption}${this.caption && this.required ? \" *\" : \"\"}`;\n  }\n\n  static get properties() {\n    return {\n      caption: String,\n      disabled: Boolean,\n      required: Boolean,\n      min: Number,\n      max: Number,\n      pin: Boolean,\n      step: Number,\n      helper: String,\n\n      extra: {\n        type: Boolean,\n        value: false,\n      },\n      ignoreBarTouch: {\n        type: Boolean,\n        value: true,\n      },\n      icon: {\n        type: String,\n        value: \"\",\n      },\n      value: {\n        type: Number,\n        notify: true,\n      },\n    };\n  }\n}\n\ncustomElements.define(\"ha-labeled-slider\", HaLabeledSlider);\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { ColorTempSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-labeled-slider\";\n\n@customElement(\"ha-selector-color_temp\")\nexport class HaColorTempSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: ColorTempSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-labeled-slider\n        pin\n        icon=\"hass:thermometer\"\n        .caption=${this.label || \"\"}\n        .min=${this.selector.color_temp?.min_mireds ?? 153}\n        .max=${this.selector.color_temp?.max_mireds ?? 500}\n        .value=${this.value}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .required=${this.required}\n        @change=${this._valueChanged}\n      ></ha-labeled-slider>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: Number((ev.target as any).value),\n    });\n  }\n\n  static styles = css`\n    ha-labeled-slider {\n      --ha-slider-background: -webkit-linear-gradient(\n        right,\n        rgb(255, 160, 0) 0%,\n        white 50%,\n        rgb(166, 209, 255) 100%\n      );\n      /* The color temp minimum value shouldn't be rendered differently. It's not \"off\". */\n      --paper-slider-knob-start-border-color: var(--primary-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-color_temp\": HaColorTempSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { DateSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-date-input\";\n\n@customElement(\"ha-selector-date\")\nexport class HaDateSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: DateSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-date-input\n        .label=${this.label}\n        .locale=${this.hass.locale}\n        .disabled=${this.disabled}\n        .value=${this.value}\n        .required=${this.required}\n        .helper=${this.helper}\n      >\n      </ha-date-input>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-date\": HaDateSelector;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { DateTimeSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-date-input\";\nimport type { HaDateInput } from \"../ha-date-input\";\nimport \"../ha-time-input\";\nimport \"../ha-input-helper-text\";\nimport type { HaTimeInput } from \"../ha-time-input\";\n\n@customElement(\"ha-selector-datetime\")\nexport class HaDateTimeSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: DateTimeSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @query(\"ha-date-input\") private _dateInput!: HaDateInput;\n\n  @query(\"ha-time-input\") private _timeInput!: HaTimeInput;\n\n  protected render() {\n    const values = this.value?.split(\" \");\n\n    return html`\n      <div class=\"input\">\n        <ha-date-input\n          .label=${this.label}\n          .locale=${this.hass.locale}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          .value=${values?.[0]}\n          @value-changed=${this._valueChanged}\n        >\n        </ha-date-input>\n        <ha-time-input\n          enable-second\n          .value=${values?.[1] || \"0:00:00\"}\n          .locale=${this.hass.locale}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          @value-changed=${this._valueChanged}\n        ></ha-time-input>\n      </div>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: `${this._dateInput.value} ${this._timeInput.value}`,\n    });\n  }\n\n  static styles = css`\n    .input {\n      display: flex;\n      align-items: center;\n      flex-direction: row;\n    }\n\n    ha-date-input {\n      min-width: 150px;\n      margin-right: 4px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-datetime\": HaDateTimeSelector;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-device-picker\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./ha-device-picker\";\n\n@customElement(\"ha-devices-picker\")\nclass HaDevicesPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string[];\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  @property({ attribute: \"picked-device-label\" })\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  public pickedDeviceLabel?: string;\n\n  @property({ attribute: \"pick-device-label\" }) public pickDeviceLabel?: string;\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const currentDevices = this._currentDevices;\n    return html`\n      ${currentDevices.map(\n        (entityId) => html`\n          <div>\n            <ha-device-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .deviceFilter=${this.deviceFilter}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .value=${entityId}\n              .label=${this.pickedDeviceLabel}\n              .disabled=${this.disabled}\n              @value-changed=${this._deviceChanged}\n            ></ha-device-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-device-picker\n          allow-custom-entity\n          .hass=${this.hass}\n          .helper=${this.helper}\n          .deviceFilter=${this.deviceFilter}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .label=${this.pickDeviceLabel}\n          .disabled=${this.disabled}\n          .required=${this.required && !currentDevices.length}\n          @value-changed=${this._addDevice}\n        ></ha-device-picker>\n      </div>\n    `;\n  }\n\n  private get _currentDevices() {\n    return this.value || [];\n  }\n\n  private async _updateDevices(devices) {\n    fireEvent(this, \"value-changed\", {\n      value: devices,\n    });\n\n    this.value = devices;\n  }\n\n  private _deviceChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === curValue || newValue !== \"\") {\n      return;\n    }\n    if (newValue === \"\") {\n      this._updateDevices(\n        this._currentDevices.filter((dev) => dev !== curValue)\n      );\n    } else {\n      this._updateDevices(\n        this._currentDevices.map((dev) => (dev === curValue ? newValue : dev))\n      );\n    }\n  }\n\n  private async _addDevice(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentDevices = this._currentDevices;\n    if (currentDevices.includes(toAdd)) {\n      return;\n    }\n\n    this._updateDevices([...currentDevices, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-devices-picker\": HaDevicesPicker;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ConfigEntry, getConfigEntries } from \"../../data/config_entries\";\nimport type { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport type { DeviceSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../device/ha-device-picker\";\nimport \"../device/ha-devices-picker\";\n\n@customElement(\"ha-selector-device\")\nexport class HaDeviceSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: DeviceSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @state() public _configEntries?: ConfigEntry[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected updated(changedProperties) {\n    if (changedProperties.has(\"selector\")) {\n      const oldSelector = changedProperties.get(\"selector\");\n      if (oldSelector !== this.selector && this.selector.device?.integration) {\n        getConfigEntries(this.hass, {\n          domain: this.selector.device.integration,\n        }).then((entries) => {\n          this._configEntries = entries;\n        });\n      }\n    }\n  }\n\n  protected render() {\n    if (!this.selector.device.multiple) {\n      return html`\n        <ha-device-picker\n          .hass=${this.hass}\n          .value=${this.value}\n          .label=${this.label}\n          .helper=${this.helper}\n          .deviceFilter=${this._filterDevices}\n          .includeDeviceClasses=${this.selector.device.entity?.device_class\n            ? [this.selector.device.entity.device_class]\n            : undefined}\n          .includeDomains=${this.selector.device.entity?.domain\n            ? [this.selector.device.entity.domain]\n            : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          allow-custom-entity\n        ></ha-device-picker>\n      `;\n    }\n\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <ha-devices-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .deviceFilter=${this._filterDevices}\n        .includeDeviceClasses=${this.selector.device.entity?.device_class\n          ? [this.selector.device.entity.device_class]\n          : undefined}\n        .includeDomains=${this.selector.device.entity?.domain\n          ? [this.selector.device.entity.domain]\n          : undefined}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-devices-picker>\n    `;\n  }\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (\n      this.selector.device?.manufacturer &&\n      device.manufacturer !== this.selector.device.manufacturer\n    ) {\n      return false;\n    }\n    if (\n      this.selector.device?.model &&\n      device.model !== this.selector.device.model\n    ) {\n      return false;\n    }\n    if (this.selector.device?.integration) {\n      if (\n        this._configEntries &&\n        !this._configEntries.some((entry) =>\n          device.config_entries.includes(entry.entry_id)\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-device\": HaDeviceSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { DurationSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-duration-input\";\n\n@customElement(\"ha-selector-duration\")\nexport class HaTimeDuration extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: DurationSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-duration-input\n        .label=${this.label}\n        .helper=${this.helper}\n        .data=${this.value}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .enableDay=${this.selector.duration.enable_day}\n      ></ha-duration-input>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-duration\": HaTimeDuration;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { isValidEntityId } from \"../../common/entity/valid_entity_id\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./ha-entity-picker\";\n\n@customElement(\"ha-entities-picker\")\nclass HaEntitiesPickerLight extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  @property() public helper?: string;\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show. Will ignore all other filters.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property({ attribute: \"picked-entity-label\" })\n  public pickedEntityLabel?: string;\n\n  @property({ attribute: \"pick-entity-label\" }) public pickEntityLabel?: string;\n\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const currentEntities = this._currentEntities;\n    return html`\n      ${currentEntities.map(\n        (entityId) => html`\n          <div>\n            <ha-entity-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeEntities=${this.includeEntities}\n              .excludeEntities=${this.excludeEntities}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n              .entityFilter=${this._entityFilter}\n              .value=${entityId}\n              .label=${this.pickedEntityLabel}\n              .disabled=${this.disabled}\n              @value-changed=${this._entityChanged}\n            ></ha-entity-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-entity-picker\n          allow-custom-entity\n          .hass=${this.hass}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeEntities=${this.includeEntities}\n          .excludeEntities=${this.excludeEntities}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n          .entityFilter=${this._entityFilter}\n          .label=${this.pickEntityLabel}\n          .helper=${this.helper}\n          .disabled=${this.disabled}\n          .required=${this.required && !currentEntities.length}\n          @value-changed=${this._addEntity}\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _entityFilter: HaEntityPickerEntityFilterFunc = (\n    stateObj: HassEntity\n  ) =>\n    (!this.value || !this.value.includes(stateObj.entity_id)) &&\n    (!this.entityFilter || this.entityFilter(stateObj));\n\n  private get _currentEntities() {\n    return this.value || [];\n  }\n\n  private async _updateEntities(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _entityChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (\n      newValue === curValue ||\n      (newValue !== undefined && !isValidEntityId(newValue))\n    ) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (!newValue || currentEntities.includes(newValue)) {\n      this._updateEntities(currentEntities.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateEntities(\n      currentEntities.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private async _addEntity(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateEntities([...currentEntities, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entities-picker\": HaEntitiesPickerLight;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport {\n  EntitySources,\n  fetchEntitySourcesWithCache,\n} from \"../../data/entity_sources\";\nimport { EntitySelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../entity/ha-entities-picker\";\nimport \"../entity/ha-entity-picker\";\n\n@customElement(\"ha-selector-entity\")\nexport class HaEntitySelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: EntitySelector;\n\n  @state() private _entitySources?: EntitySources;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    if (!this.selector.entity.multiple) {\n      return html`<ha-entity-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .includeEntities=${this.selector.entity.include_entities}\n        .excludeEntities=${this.selector.entity.exclude_entities}\n        .entityFilter=${this._filterEntities}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        allow-custom-entity\n      ></ha-entity-picker>`;\n    }\n\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <ha-entities-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .includeEntities=${this.selector.entity.include_entities}\n        .excludeEntities=${this.selector.entity.exclude_entities}\n        .entityFilter=${this._filterEntities}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-entities-picker>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (\n      changedProps.has(\"selector\") &&\n      this.selector.entity.integration &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    const {\n      domain: filterDomain,\n      device_class: filterDeviceClass,\n      integration: filterIntegration,\n    } = this.selector.entity;\n\n    if (filterDomain) {\n      const entityDomain = computeStateDomain(entity);\n      if (\n        Array.isArray(filterDomain)\n          ? !filterDomain.includes(entityDomain)\n          : entityDomain !== filterDomain\n      ) {\n        return false;\n      }\n    }\n    if (\n      filterDeviceClass &&\n      entity.attributes.device_class !== filterDeviceClass\n    ) {\n      return false;\n    }\n    if (\n      filterIntegration &&\n      this._entitySources?.[entity.entity_id]?.domain !== filterIntegration\n    ) {\n      return false;\n    }\n    return true;\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-entity\": HaEntitySelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { IconSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-picker\";\n\n@customElement(\"ha-selector-icon\")\nexport class HaIconSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: IconSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-icon-picker\n        .label=${this.label}\n        .value=${this.value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .fallbackPath=${this.selector.icon.fallbackPath}\n        .placeholder=${this.selector.icon.placeholder}\n        @value-changed=${this._valueChanged}\n      ></ha-icon-picker>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-icon\": HaIconSelector;\n  }\n}\n","import { LitElement, html, css } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nclass HaEntityMarker extends LitElement {\n  @property({ attribute: \"entity-id\" }) public entityId?: string;\n\n  @property({ attribute: \"entity-name\" }) public entityName?: string;\n\n  @property({ attribute: \"entity-picture\" }) public entityPicture?: string;\n\n  @property({ attribute: \"entity-color\" }) public entityColor?: string;\n\n  protected render() {\n    return html`\n      <div\n        class=\"marker\"\n        style=${styleMap({ \"border-color\": this.entityColor })}\n        @click=${this._badgeTap}\n      >\n        ${this.entityPicture\n          ? html`<div\n              class=\"entity-picture\"\n              style=${styleMap({\n                \"background-image\": `url(${this.entityPicture})`,\n              })}\n            ></div>`\n          : this.entityName}\n      </div>\n    `;\n  }\n\n  private _badgeTap(ev: Event) {\n    ev.stopPropagation();\n    if (this.entityId) {\n      fireEvent(this, \"hass-more-info\", { entityId: this.entityId });\n    }\n  }\n\n  static get styles() {\n    return css`\n      .marker {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        box-sizing: border-box;\n        overflow: hidden;\n        width: 48px;\n        height: 48px;\n        font-size: var(--ha-marker-font-size, 1.5em);\n        border-radius: 50%;\n        border: 1px solid var(--ha-marker-color, var(--primary-color));\n        color: var(--primary-text-color);\n        background-color: var(--card-background-color);\n      }\n      .entity-picture {\n        background-size: cover;\n        height: 100%;\n        width: 100%;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-marker\", HaEntityMarker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-marker\": HaEntityMarker;\n  }\n}\n","import {\n  Circle,\n  CircleMarker,\n  LatLngTuple,\n  Layer,\n  Map,\n  Marker,\n  Polyline,\n  TileLayer,\n} from \"leaflet\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  LeafletModuleType,\n  replaceTileLayer,\n  setupLeafletMap,\n} from \"../../common/dom/setup-leaflet-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport \"./ha-entity-marker\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport { installResizeObserver } from \"../../panels/lovelace/common/install-resize-observer\";\n\nconst getEntityId = (entity: string | HaMapEntity): string =>\n  typeof entity === \"string\" ? entity : entity.entity_id;\n\nexport interface HaMapPaths {\n  points: LatLngTuple[];\n  color?: string;\n  gradualOpacity?: number;\n}\n\nexport interface HaMapEntity {\n  entity_id: string;\n  color: string;\n}\n\n@customElement(\"ha-map\")\nexport class HaMap extends ReactiveElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public entities?: string[] | HaMapEntity[];\n\n  @property({ attribute: false }) public paths?: HaMapPaths[];\n\n  @property({ attribute: false }) public layers?: Layer[];\n\n  @property({ type: Boolean }) public autoFit = false;\n\n  @property({ type: Boolean }) public fitZones?: boolean;\n\n  @property({ type: Boolean }) public darkMode?: boolean;\n\n  @property({ type: Number }) public zoom = 14;\n\n  @state() private _loaded = false;\n\n  public leafletMap?: Map;\n\n  private Leaflet?: LeafletModuleType;\n\n  private _tileLayer?: TileLayer;\n\n  private _resizeObserver?: ResizeObserver;\n\n  private _mapItems: Array<Marker | Circle> = [];\n\n  private _mapZones: Array<Marker | Circle> = [];\n\n  private _mapPaths: Array<Polyline | CircleMarker> = [];\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._loadMap();\n    this._attachObserver();\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    if (this.leafletMap) {\n      this.leafletMap.remove();\n      this.leafletMap = undefined;\n      this.Leaflet = undefined;\n    }\n\n    this._loaded = false;\n\n    if (this._resizeObserver) {\n      this._resizeObserver.unobserve(this);\n    }\n  }\n\n  protected update(changedProps: PropertyValues) {\n    super.update(changedProps);\n\n    if (!this._loaded) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (changedProps.has(\"_loaded\") || changedProps.has(\"entities\")) {\n      this._drawEntities();\n    } else if (this._loaded && oldHass && this.entities) {\n      // Check if any state has changed\n      for (const entity of this.entities) {\n        if (\n          oldHass.states[getEntityId(entity)] !==\n          this.hass!.states[getEntityId(entity)]\n        ) {\n          this._drawEntities();\n          break;\n        }\n      }\n    }\n\n    if (changedProps.has(\"_loaded\") || changedProps.has(\"paths\")) {\n      this._drawPaths();\n    }\n\n    if (changedProps.has(\"_loaded\") || changedProps.has(\"layers\")) {\n      this._drawLayers(changedProps.get(\"layers\") as Layer[] | undefined);\n    }\n\n    if (\n      changedProps.has(\"_loaded\") ||\n      ((changedProps.has(\"entities\") || changedProps.has(\"layers\")) &&\n        this.autoFit)\n    ) {\n      this.fitMap();\n    }\n\n    if (changedProps.has(\"zoom\")) {\n      this.leafletMap!.setZoom(this.zoom);\n    }\n\n    if (\n      !changedProps.has(\"darkMode\") &&\n      (!changedProps.has(\"hass\") ||\n        (oldHass && oldHass.themes.darkMode === this.hass.themes.darkMode))\n    ) {\n      return;\n    }\n    const darkMode = this.darkMode ?? this.hass.themes.darkMode;\n    this._tileLayer = replaceTileLayer(\n      this.Leaflet!,\n      this.leafletMap!,\n      this._tileLayer!,\n      darkMode\n    );\n    this.shadowRoot!.getElementById(\"map\")!.classList.toggle(\"dark\", darkMode);\n  }\n\n  private async _loadMap(): Promise<void> {\n    let map = this.shadowRoot!.getElementById(\"map\");\n    if (!map) {\n      map = document.createElement(\"div\");\n      map.id = \"map\";\n      this.shadowRoot!.append(map);\n    }\n    const darkMode = this.darkMode ?? this.hass.themes.darkMode;\n    [this.leafletMap, this.Leaflet, this._tileLayer] = await setupLeafletMap(\n      map,\n      darkMode\n    );\n    this.shadowRoot!.getElementById(\"map\")!.classList.toggle(\"dark\", darkMode);\n    this._loaded = true;\n  }\n\n  public fitMap(): void {\n    if (!this.leafletMap || !this.Leaflet || !this.hass) {\n      return;\n    }\n\n    if (!this._mapItems.length && !this.layers?.length) {\n      this.leafletMap.setView(\n        new this.Leaflet.LatLng(\n          this.hass.config.latitude,\n          this.hass.config.longitude\n        ),\n        this.zoom\n      );\n      return;\n    }\n\n    let bounds = this.Leaflet.latLngBounds(\n      this._mapItems ? this._mapItems.map((item) => item.getLatLng()) : []\n    );\n\n    if (this.fitZones) {\n      this._mapZones?.forEach((zone) => {\n        bounds.extend(\n          \"getBounds\" in zone ? zone.getBounds() : zone.getLatLng()\n        );\n      });\n    }\n\n    this.layers?.forEach((layer: any) => {\n      bounds.extend(\n        \"getBounds\" in layer ? layer.getBounds() : layer.getLatLng()\n      );\n    });\n\n    if (!this.layers) {\n      bounds = bounds.pad(0.5);\n    }\n\n    this.leafletMap.fitBounds(bounds, { maxZoom: this.zoom });\n  }\n\n  private _drawLayers(prevLayers: Layer[] | undefined): void {\n    if (prevLayers) {\n      prevLayers.forEach((layer) => layer.remove());\n    }\n    if (!this.layers) {\n      return;\n    }\n    const map = this.leafletMap!;\n    this.layers.forEach((layer) => {\n      map.addLayer(layer);\n    });\n  }\n\n  private _drawPaths(): void {\n    const hass = this.hass;\n    const map = this.leafletMap;\n    const Leaflet = this.Leaflet;\n\n    if (!hass || !map || !Leaflet) {\n      return;\n    }\n    if (this._mapPaths.length) {\n      this._mapPaths.forEach((marker) => marker.remove());\n      this._mapPaths = [];\n    }\n    if (!this.paths) {\n      return;\n    }\n\n    const darkPrimaryColor = getComputedStyle(this).getPropertyValue(\n      \"--dark-primary-color\"\n    );\n\n    this.paths.forEach((path) => {\n      let opacityStep: number;\n      let baseOpacity: number;\n      if (path.gradualOpacity) {\n        opacityStep = path.gradualOpacity / (path.points.length - 2);\n        baseOpacity = 1 - path.gradualOpacity;\n      }\n\n      for (\n        let pointIndex = 0;\n        pointIndex < path.points.length - 1;\n        pointIndex++\n      ) {\n        const opacity = path.gradualOpacity\n          ? baseOpacity! + pointIndex * opacityStep!\n          : undefined;\n\n        // DRAW point\n        this._mapPaths.push(\n          Leaflet!.circleMarker(path.points[pointIndex], {\n            radius: 3,\n            color: path.color || darkPrimaryColor,\n            opacity,\n            fillOpacity: opacity,\n            interactive: false,\n          })\n        );\n\n        // DRAW line between this and next point\n        this._mapPaths.push(\n          Leaflet!.polyline(\n            [path.points[pointIndex], path.points[pointIndex + 1]],\n            {\n              color: path.color || darkPrimaryColor,\n              opacity,\n              interactive: false,\n            }\n          )\n        );\n      }\n      const pointIndex = path.points.length - 1;\n      if (pointIndex >= 0) {\n        const opacity = path.gradualOpacity\n          ? baseOpacity! + pointIndex * opacityStep!\n          : undefined;\n        // DRAW end path point\n        this._mapPaths.push(\n          Leaflet!.circleMarker(path.points[pointIndex], {\n            radius: 3,\n            color: path.color || darkPrimaryColor,\n            opacity,\n            fillOpacity: opacity,\n            interactive: false,\n          })\n        );\n      }\n      this._mapPaths.forEach((marker) => map.addLayer(marker));\n    });\n  }\n\n  private _drawEntities(): void {\n    const hass = this.hass;\n    const map = this.leafletMap;\n    const Leaflet = this.Leaflet;\n\n    if (!hass || !map || !Leaflet) {\n      return;\n    }\n\n    if (this._mapItems.length) {\n      this._mapItems.forEach((marker) => marker.remove());\n      this._mapItems = [];\n    }\n\n    if (this._mapZones.length) {\n      this._mapZones.forEach((marker) => marker.remove());\n      this._mapZones = [];\n    }\n\n    if (!this.entities) {\n      return;\n    }\n\n    const computedStyles = getComputedStyle(this);\n    const zoneColor = computedStyles.getPropertyValue(\"--accent-color\");\n    const darkPrimaryColor = computedStyles.getPropertyValue(\n      \"--dark-primary-color\"\n    );\n\n    const className =\n      this.darkMode ?? this.hass.themes.darkMode ? \"dark\" : \"light\";\n\n    for (const entity of this.entities) {\n      const stateObj = hass.states[getEntityId(entity)];\n      if (!stateObj) {\n        continue;\n      }\n      const title = computeStateName(stateObj);\n      const {\n        latitude,\n        longitude,\n        passive,\n        icon,\n        radius,\n        entity_picture: entityPicture,\n        gps_accuracy: gpsAccuracy,\n      } = stateObj.attributes;\n\n      if (!(latitude && longitude)) {\n        continue;\n      }\n\n      if (computeStateDomain(stateObj) === \"zone\") {\n        // DRAW ZONE\n        if (passive) {\n          continue;\n        }\n\n        // create icon\n        let iconHTML = \"\";\n        if (icon) {\n          const el = document.createElement(\"ha-icon\");\n          el.setAttribute(\"icon\", icon);\n          iconHTML = el.outerHTML;\n        } else {\n          const el = document.createElement(\"span\");\n          el.innerHTML = title;\n          iconHTML = el.outerHTML;\n        }\n\n        // create marker with the icon\n        this._mapZones.push(\n          Leaflet.marker([latitude, longitude], {\n            icon: Leaflet.divIcon({\n              html: iconHTML,\n              iconSize: [24, 24],\n              className,\n            }),\n            interactive: false,\n            title,\n          })\n        );\n\n        // create circle around it\n        this._mapZones.push(\n          Leaflet.circle([latitude, longitude], {\n            interactive: false,\n            color: zoneColor,\n            radius,\n          })\n        );\n\n        continue;\n      }\n\n      // DRAW ENTITY\n      // create icon\n      const entityName = title\n        .split(\" \")\n        .map((part) => part[0])\n        .join(\"\")\n        .substr(0, 3);\n\n      // create marker with the icon\n      this._mapItems.push(\n        Leaflet.marker([latitude, longitude], {\n          icon: Leaflet.divIcon({\n            html: `\n              <ha-entity-marker\n                entity-id=\"${getEntityId(entity)}\"\n                entity-name=\"${entityName}\"\n                entity-picture=\"${\n                  entityPicture ? this.hass.hassUrl(entityPicture) : \"\"\n                }\"\n                ${\n                  typeof entity !== \"string\"\n                    ? `entity-color=\"${entity.color}\"`\n                    : \"\"\n                }\n              ></ha-entity-marker>\n            `,\n            iconSize: [48, 48],\n            className: \"\",\n          }),\n          title: computeStateName(stateObj),\n        })\n      );\n\n      // create circle around if entity has accuracy\n      if (gpsAccuracy) {\n        this._mapItems.push(\n          Leaflet.circle([latitude, longitude], {\n            interactive: false,\n            color: darkPrimaryColor,\n            radius: gpsAccuracy,\n          })\n        );\n      }\n    }\n\n    this._mapItems.forEach((marker) => map.addLayer(marker));\n    this._mapZones.forEach((marker) => map.addLayer(marker));\n  }\n\n  private async _attachObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(() => {\n        this.leafletMap?.invalidateSize({ debounceMoveend: true });\n      });\n    }\n    this._resizeObserver.observe(this);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 300px;\n      }\n      #map {\n        height: 100%;\n      }\n      #map.dark {\n        background: #090909;\n      }\n      .light {\n        color: #000000;\n      }\n      .dark {\n        color: #ffffff;\n      }\n      .leaflet-marker-draggable {\n        cursor: move !important;\n      }\n      .leaflet-edit-resize {\n        border-radius: 50%;\n        cursor: nesw-resize !important;\n      }\n      .named-icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        text-align: center;\n        color: var(--primary-text-color);\n      }\n      .leaflet-pane {\n        z-index: 0 !important;\n      }\n      .leaflet-control,\n      .leaflet-top,\n      .leaflet-bottom {\n        z-index: 1 !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-map\": HaMap;\n  }\n}\n","import {\n  Circle,\n  DivIcon,\n  DragEndEvent,\n  LatLng,\n  Marker,\n  MarkerOptions,\n} from \"leaflet\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { LeafletModuleType } from \"../../common/dom/setup-leaflet-map\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-input-helper-text\";\nimport \"./ha-map\";\nimport type { HaMap } from \"./ha-map\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"location-updated\": { id: string; location: [number, number] };\n    \"markers-updated\": undefined;\n    \"radius-updated\": { id: string; radius: number };\n    \"marker-clicked\": { id: string };\n  }\n}\n\nexport interface MarkerLocation {\n  latitude: number;\n  longitude: number;\n  radius?: number;\n  name?: string;\n  id: string;\n  icon?: string;\n  radius_color?: string;\n  location_editable?: boolean;\n  radius_editable?: boolean;\n}\n\n@customElement(\"ha-locations-editor\")\nexport class HaLocationsEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public locations?: MarkerLocation[];\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public autoFit = false;\n\n  @property({ type: Number }) public zoom = 16;\n\n  @property({ type: Boolean }) public darkMode?: boolean;\n\n  @state() private _locationMarkers?: Record<string, Marker | Circle>;\n\n  @state() private _circles: Record<string, Circle> = {};\n\n  @query(\"ha-map\", true) private map!: HaMap;\n\n  private Leaflet?: LeafletModuleType;\n\n  constructor() {\n    super();\n\n    import(\"leaflet\").then((module) => {\n      import(\"leaflet-draw\").then(() => {\n        this.Leaflet = module.default as LeafletModuleType;\n        this._updateMarkers();\n        this.updateComplete.then(() => this.fitMap());\n      });\n    });\n  }\n\n  public fitMap(): void {\n    this.map.fitMap();\n  }\n\n  public fitMarker(id: string): void {\n    if (!this.map.leafletMap || !this._locationMarkers) {\n      return;\n    }\n    const marker = this._locationMarkers[id];\n    if (!marker) {\n      return;\n    }\n    if (\"getBounds\" in marker) {\n      this.map.leafletMap.fitBounds(marker.getBounds());\n      (marker as Circle).bringToFront();\n    } else {\n      const circle = this._circles[id];\n      if (circle) {\n        this.map.leafletMap.fitBounds(circle.getBounds());\n      } else {\n        this.map.leafletMap.setView(marker.getLatLng(), this.zoom);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-map\n        .hass=${this.hass}\n        .layers=${this._getLayers(this._circles, this._locationMarkers)}\n        .zoom=${this.zoom}\n        .autoFit=${this.autoFit}\n        .darkMode=${this.darkMode}\n      ></ha-map>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private _getLayers = memoizeOne(\n    (\n      circles: Record<string, Circle>,\n      markers?: Record<string, Marker | Circle>\n    ): Array<Marker | Circle> => {\n      const layers: Array<Marker | Circle> = [];\n      Array.prototype.push.apply(layers, Object.values(circles));\n      if (markers) {\n        Array.prototype.push.apply(layers, Object.values(markers));\n      }\n      return layers;\n    }\n  );\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    // Still loading.\n    if (!this.Leaflet) {\n      return;\n    }\n\n    if (changedProps.has(\"locations\")) {\n      this._updateMarkers();\n    }\n  }\n\n  private _updateLocation(ev: DragEndEvent) {\n    const marker = ev.target;\n    const latlng: LatLng = marker.getLatLng();\n    let longitude: number = latlng.lng;\n    if (Math.abs(longitude) > 180.0) {\n      // Normalize longitude if map provides values beyond -180 to +180 degrees.\n      longitude = (((longitude % 360.0) + 540.0) % 360.0) - 180.0;\n    }\n    const location: [number, number] = [latlng.lat, longitude];\n    fireEvent(\n      this,\n      \"location-updated\",\n      { id: marker.id, location },\n      { bubbles: false }\n    );\n  }\n\n  private _updateRadius(ev: DragEndEvent) {\n    const marker = ev.target;\n    const circle = this._locationMarkers![marker.id] as Circle;\n    fireEvent(\n      this,\n      \"radius-updated\",\n      { id: marker.id, radius: circle.getRadius() },\n      { bubbles: false }\n    );\n  }\n\n  private _markerClicked(ev: DragEndEvent) {\n    const marker = ev.target;\n    fireEvent(this, \"marker-clicked\", { id: marker.id }, { bubbles: false });\n  }\n\n  private _updateMarkers(): void {\n    if (!this.locations || !this.locations.length) {\n      this._circles = {};\n      this._locationMarkers = undefined;\n      return;\n    }\n\n    const locationMarkers = {};\n    const circles = {};\n\n    const defaultZoneRadiusColor =\n      getComputedStyle(this).getPropertyValue(\"--accent-color\");\n\n    this.locations.forEach((location: MarkerLocation) => {\n      let icon: DivIcon | undefined;\n      if (location.icon) {\n        // create icon\n        const el = document.createElement(\"div\");\n        el.className = \"named-icon\";\n        if (location.name) {\n          el.innerText = location.name;\n        }\n        const iconEl = document.createElement(\"ha-icon\");\n        iconEl.setAttribute(\"icon\", location.icon);\n        el.prepend(iconEl);\n\n        icon = this.Leaflet!.divIcon({\n          html: el.outerHTML,\n          iconSize: [24, 24],\n          className: \"light\",\n        });\n      }\n      if (location.radius) {\n        const circle = this.Leaflet!.circle(\n          [location.latitude, location.longitude],\n          {\n            color: location.radius_color || defaultZoneRadiusColor,\n            radius: location.radius,\n          }\n        );\n        if (location.radius_editable || location.location_editable) {\n          // @ts-ignore\n          circle.editing.enable();\n          circle.addEventListener(\"add\", () => {\n            // @ts-ignore\n            const moveMarker = circle.editing._moveMarker;\n            // @ts-ignore\n            const resizeMarker = circle.editing._resizeMarkers[0];\n            if (icon) {\n              moveMarker.setIcon(icon);\n            }\n            resizeMarker.id = moveMarker.id = location.id;\n            moveMarker\n              .addEventListener(\n                \"dragend\",\n                // @ts-ignore\n                (ev: DragEndEvent) => this._updateLocation(ev)\n              )\n              .addEventListener(\n                \"click\",\n                // @ts-ignore\n                (ev: MouseEvent) => this._markerClicked(ev)\n              );\n            if (location.radius_editable) {\n              resizeMarker.addEventListener(\n                \"dragend\",\n                // @ts-ignore\n                (ev: DragEndEvent) => this._updateRadius(ev)\n              );\n            } else {\n              resizeMarker.remove();\n            }\n          });\n          locationMarkers[location.id] = circle;\n        } else {\n          circles[location.id] = circle;\n        }\n      }\n      if (\n        !location.radius ||\n        (!location.radius_editable && !location.location_editable)\n      ) {\n        const options: MarkerOptions = {\n          title: location.name,\n          draggable: location.location_editable,\n        };\n\n        if (icon) {\n          options.icon = icon;\n        }\n\n        const marker = this.Leaflet!.marker(\n          [location.latitude, location.longitude],\n          options\n        )\n          .addEventListener(\"dragend\", (ev: DragEndEvent) =>\n            this._updateLocation(ev)\n          )\n          .addEventListener(\n            // @ts-ignore\n            \"click\",\n            // @ts-ignore\n            (ev: MouseEvent) => this._markerClicked(ev)\n          );\n        (marker as any).id = location.id;\n\n        locationMarkers[location.id] = marker;\n      }\n    });\n    this._circles = circles;\n    this._locationMarkers = locationMarkers;\n    fireEvent(this, \"markers-updated\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-map {\n        display: block;\n        height: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-locations-editor\": HaLocationsEditor;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type {\n  LocationSelector,\n  LocationSelectorValue,\n} from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { MarkerLocation } from \"../map/ha-locations-editor\";\nimport \"../map/ha-locations-editor\";\n\n@customElement(\"ha-selector-location\")\nexport class HaLocationSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: LocationSelector;\n\n  @property() public value?: LocationSelectorValue;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  protected render() {\n    return html`\n      <ha-locations-editor\n        class=\"flex\"\n        .hass=${this.hass}\n        .helper=${this.helper}\n        .locations=${this._location(this.selector, this.value)}\n        @location-updated=${this._locationChanged}\n        @radius-updated=${this._radiusChanged}\n      ></ha-locations-editor>\n    `;\n  }\n\n  private _location = memoizeOne(\n    (\n      selector: LocationSelector,\n      value?: LocationSelectorValue\n    ): MarkerLocation[] => {\n      const computedStyles = getComputedStyle(this);\n      const zoneRadiusColor = selector.location.radius\n        ? computedStyles.getPropertyValue(\"--zone-radius-color\") ||\n          computedStyles.getPropertyValue(\"--accent-color\")\n        : undefined;\n      return [\n        {\n          id: \"location\",\n          latitude: value?.latitude || this.hass.config.latitude,\n          longitude: value?.longitude || this.hass.config.longitude,\n          radius: selector.location.radius ? value?.radius || 1000 : undefined,\n          radius_color: zoneRadiusColor,\n          icon:\n            selector.location.icon || selector.location.radius\n              ? \"mdi:map-marker-radius\"\n              : \"mdi:map-marker\",\n          location_editable: true,\n          radius_editable: true,\n        },\n      ];\n    }\n  );\n\n  private _locationChanged(ev: CustomEvent) {\n    const [latitude, longitude] = ev.detail.location;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.value, latitude, longitude },\n    });\n  }\n\n  private _radiusChanged(ev: CustomEvent) {\n    const radius = ev.detail.radius;\n    fireEvent(this, \"value-changed\", { value: { ...this.value, radius } });\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      height: 400px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-location\": HaLocationSelector;\n  }\n}\n","import { mdiPlayBox, mdiPlus } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport { getSignedPath } from \"../../data/auth\";\nimport {\n  MediaClassBrowserSettings,\n  MediaPickedEvent,\n  SUPPORT_BROWSE_MEDIA,\n} from \"../../data/media-player\";\nimport type { MediaSelector, MediaSelectorValue } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport { brandsUrl, extractDomainFromBrandUrl } from \"../../util/brands-url\";\nimport \"../ha-alert\";\nimport \"../ha-form/ha-form\";\nimport type { HaFormSchema } from \"../ha-form/types\";\nimport { showMediaBrowserDialog } from \"../media-player/show-media-browser-dialog\";\n\nconst MANUAL_SCHEMA = [\n  { name: \"media_content_id\", required: false, selector: { text: {} } },\n  { name: \"media_content_type\", required: false, selector: { text: {} } },\n];\n\n@customElement(\"ha-selector-media\")\nexport class HaMediaSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: MediaSelector;\n\n  @property({ attribute: false }) public value?: MediaSelectorValue;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean, reflect: true }) public required = true;\n\n  @state() private _thumbnailUrl?: string | null;\n\n  willUpdate(changedProps: PropertyValues<this>) {\n    if (changedProps.has(\"value\")) {\n      const thumbnail = this.value?.metadata?.thumbnail;\n      const oldThumbnail = (changedProps.get(\"value\") as this[\"value\"])\n        ?.metadata?.thumbnail;\n      if (thumbnail === oldThumbnail) {\n        return;\n      }\n      if (thumbnail && thumbnail.startsWith(\"/\")) {\n        this._thumbnailUrl = undefined;\n        // Thumbnails served by local API require authentication\n        getSignedPath(this.hass, thumbnail).then((signedPath) => {\n          this._thumbnailUrl = signedPath.path;\n        });\n      } else if (\n        thumbnail &&\n        thumbnail.startsWith(\"https://brands.home-assistant.io\")\n      ) {\n        // The backend is not aware of the theme used by the users,\n        // so we rewrite the URL to show a proper icon\n        this._thumbnailUrl = brandsUrl({\n          domain: extractDomainFromBrandUrl(thumbnail),\n          type: \"icon\",\n          useFallback: true,\n          darkOptimized: this.hass.themes?.darkMode,\n        });\n      } else {\n        this._thumbnailUrl = thumbnail;\n      }\n    }\n  }\n\n  protected render() {\n    const stateObj = this.value?.entity_id\n      ? this.hass.states[this.value.entity_id]\n      : undefined;\n\n    const supportsBrowse =\n      !this.value?.entity_id ||\n      (stateObj && supportsFeature(stateObj, SUPPORT_BROWSE_MEDIA));\n\n    return html`<ha-entity-picker\n        .hass=${this.hass}\n        .value=${this.value?.entity_id}\n        .label=${this.label ||\n        this.hass.localize(\"ui.components.selectors.media.pick_media_player\")}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .required=${this.required}\n        include-domains='[\"media_player\"]'\n        allow-custom-entity\n        @value-changed=${this._entityChanged}\n      ></ha-entity-picker>\n      ${!supportsBrowse\n        ? html`<ha-alert>\n              ${this.hass.localize(\n                \"ui.components.selectors.media.browse_not_supported\"\n              )}\n            </ha-alert>\n            <ha-form\n              .hass=${this.hass}\n              .data=${this.value}\n              .schema=${MANUAL_SCHEMA}\n              .computeLabel=${this._computeLabelCallback}\n            ></ha-form>`\n        : html`<ha-card\n            outlined\n            @click=${this._pickMedia}\n            class=${this.disabled || !this.value?.entity_id ? \"disabled\" : \"\"}\n          >\n            <div\n              class=\"thumbnail ${classMap({\n                portrait:\n                  !!this.value?.metadata?.media_class &&\n                  MediaClassBrowserSettings[\n                    this.value.metadata.children_media_class ||\n                      this.value.metadata.media_class\n                  ].thumbnail_ratio === \"portrait\",\n              })}\"\n            >\n              ${this.value?.metadata?.thumbnail\n                ? html`\n                    <div\n                      class=\"${classMap({\n                        \"centered-image\":\n                          !!this.value.metadata.media_class &&\n                          [\"app\", \"directory\"].includes(\n                            this.value.metadata.media_class\n                          ),\n                      })}\n                        image\"\n                      style=${this._thumbnailUrl\n                        ? `background-image: url(${this._thumbnailUrl});`\n                        : \"\"}\n                    ></div>\n                  `\n                : html`\n                    <div class=\"icon-holder image\">\n                      <ha-svg-icon\n                        class=\"folder\"\n                        .path=${!this.value?.media_content_id\n                          ? mdiPlus\n                          : this.value?.metadata?.media_class\n                          ? MediaClassBrowserSettings[\n                              this.value.metadata.media_class === \"directory\"\n                                ? this.value.metadata.children_media_class ||\n                                  this.value.metadata.media_class\n                                : this.value.metadata.media_class\n                            ].icon\n                          : mdiPlayBox}\n                      ></ha-svg-icon>\n                    </div>\n                  `}\n            </div>\n            <div class=\"title\">\n              ${!this.value?.media_content_id\n                ? this.hass.localize(\"ui.components.selectors.media.pick_media\")\n                : this.value.metadata?.title || this.value.media_content_id}\n            </div>\n          </ha-card>`}`;\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(`ui.components.selectors.media.${schema.name}`);\n\n  private _entityChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        entity_id: ev.detail.value,\n        media_content_id: \"\",\n        media_content_type: \"\",\n      },\n    });\n  }\n\n  private _pickMedia() {\n    showMediaBrowserDialog(this, {\n      action: \"pick\",\n      entityId: this.value!.entity_id!,\n      navigateIds: this.value!.metadata?.navigateIds,\n      mediaPickedCallback: (pickedMedia: MediaPickedEvent) => {\n        fireEvent(this, \"value-changed\", {\n          value: {\n            ...this.value,\n            media_content_id: pickedMedia.item.media_content_id,\n            media_content_type: pickedMedia.item.media_content_type,\n            metadata: {\n              title: pickedMedia.item.title,\n              thumbnail: pickedMedia.item.thumbnail,\n              media_class: pickedMedia.item.media_class,\n              children_media_class: pickedMedia.item.children_media_class,\n              navigateIds: pickedMedia.navigateIds?.map((id) => ({\n                media_content_type: id.media_content_type,\n                media_content_id: id.media_content_id,\n              })),\n            },\n          },\n        });\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-entity-picker {\n        display: block;\n        margin-bottom: 16px;\n      }\n      mwc-button {\n        margin-top: 8px;\n      }\n      ha-alert {\n        display: block;\n        margin-bottom: 16px;\n      }\n      ha-card {\n        position: relative;\n        width: 200px;\n        box-sizing: border-box;\n        cursor: pointer;\n      }\n      ha-card.disabled {\n        pointer-events: none;\n        color: var(--disabled-text-color);\n      }\n      ha-card .thumbnail {\n        width: 100%;\n        position: relative;\n        box-sizing: border-box;\n        transition: padding-bottom 0.1s ease-out;\n        padding-bottom: 100%;\n      }\n      ha-card .thumbnail.portrait {\n        padding-bottom: 150%;\n      }\n      ha-card .image {\n        border-radius: 3px 3px 0 0;\n      }\n      .folder {\n        --mdc-icon-size: calc(var(--media-browse-item-size, 175px) * 0.4);\n      }\n      .title {\n        font-size: 16px;\n        padding-top: 16px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        margin-bottom: 16px;\n        padding-left: 16px;\n        padding-right: 4px;\n        white-space: nowrap;\n      }\n      .image {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        background-size: cover;\n        background-repeat: no-repeat;\n        background-position: center;\n      }\n      .centered-image {\n        margin: 0 8px;\n        background-size: contain;\n      }\n      .icon-holder {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-media\": HaMediaSelector;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { NumberSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-slider\";\nimport \"../ha-textfield\";\nimport \"../ha-input-helper-text\";\n\n@customElement(\"ha-selector-number\")\nexport class HaNumberSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: NumberSelector;\n\n  @property() public value?: number;\n\n  @property() public placeholder?: number;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    const isBox = this.selector.number.mode === \"box\";\n\n    return html`\n      ${this.label ? html`${this.label}${this.required ? \" *\" : \"\"}` : \"\"}\n      <div class=\"input\">\n        ${!isBox\n          ? html`<ha-slider\n              .min=${this.selector.number.min}\n              .max=${this.selector.number.max}\n              .value=${this._value}\n              .step=${this.selector.number.step ?? 1}\n              .disabled=${this.disabled}\n              .required=${this.required}\n              pin\n              ignore-bar-touch\n              @change=${this._handleSliderChange}\n            >\n            </ha-slider>`\n          : \"\"}\n        <ha-textfield\n          inputMode=\"numeric\"\n          pattern=\"[0-9]+([\\\\.][0-9]+)?\"\n          .label=${this.selector.number.mode !== \"box\" ? undefined : this.label}\n          .placeholder=${this.placeholder}\n          class=${classMap({ single: this.selector.number.mode === \"box\" })}\n          .min=${this.selector.number.min}\n          .max=${this.selector.number.max}\n          .value=${this.value ?? \"\"}\n          .step=${this.selector.number.step ?? 1}\n          helperPersistent\n          .helper=${isBox ? this.helper : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          .suffix=${this.selector.number.unit_of_measurement}\n          type=\"number\"\n          autoValidate\n          ?no-spinner=${this.selector.number.mode !== \"box\"}\n          @input=${this._handleInputChange}\n        >\n        </ha-textfield>\n      </div>\n      ${!isBox && this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private get _value() {\n    return this.value ?? (this.selector.number.min || 0);\n  }\n\n  private _handleInputChange(ev) {\n    ev.stopPropagation();\n    const value =\n      ev.target.value === \"\" || isNaN(ev.target.value)\n        ? this.required\n          ? this.selector.number.min || 0\n          : undefined\n        : Number(ev.target.value);\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _handleSliderChange(ev) {\n    ev.stopPropagation();\n    const value = Number(ev.target.value);\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .input {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        direction: ltr;\n      }\n      ha-slider {\n        flex: 1;\n      }\n      ha-textfield {\n        --ha-textfield-input-width: 40px;\n      }\n      .single {\n        --ha-textfield-input-width: unset;\n        flex: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-number\": HaNumberSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-yaml-editor\";\nimport \"../ha-input-helper-text\";\n\n@customElement(\"ha-selector-object\")\nexport class HaObjectSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`<ha-yaml-editor\n        .hass=${this.hass}\n        .readonly=${this.disabled}\n        .label=${this.label}\n        .required=${this.required}\n        .placeholder=${this.placeholder}\n        .defaultValue=${this.value}\n        @value-changed=${this._handleChange}\n      ></ha-yaml-editor>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"} `;\n  }\n\n  private _handleChange(ev) {\n    const value = ev.target.value;\n    if (!ev.target.isValid) {\n      return;\n    }\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-object\": HaObjectSelector;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport \"@material/mwc-button/mwc-button\";\nimport {\n  mdiClose,\n  mdiDevices,\n  mdiPlus,\n  mdiSofa,\n  mdiUnfoldMoreVertical,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  HassEntity,\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { ensureArray } from \"../common/ensure-array\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../data/entity_registry\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../types\";\nimport \"./device/ha-device-picker\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./entity/ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./entity/ha-entity-picker\";\nimport \"./ha-area-picker\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\nimport \"./ha-input-helper-text\";\n\n@customElement(\"ha-target-picker\")\nexport class HaTargetPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public value?: HassServiceTarget;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  /**\n   * Show only targets with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show only targets with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property() public entityRegFilter?: (entity: EntityRegistryEntry) => boolean;\n\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @state() private _areas?: { [areaId: string]: AreaRegistryEntry };\n\n  @state() private _devices?: {\n    [deviceId: string]: DeviceRegistryEntry;\n  };\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _addMode?: \"area_id\" | \"entity_id\" | \"device_id\";\n\n  @query(\"#input\") private _inputElement?;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n        for (const area of areas) {\n          areaLookup[area.area_id] = area;\n        }\n        this._areas = areaLookup;\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n        for (const device of devices) {\n          deviceLookup[device.id] = device;\n        }\n        this._devices = deviceLookup;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  protected render() {\n    if (!this._areas || !this._devices || !this._entities) {\n      return html``;\n    }\n    return html`<div class=\"mdc-chip-set items\">\n        ${this.value?.area_id\n          ? ensureArray(this.value.area_id).map((area_id) => {\n              const area = this._areas![area_id];\n              return this._renderChip(\n                \"area_id\",\n                area_id,\n                area?.name || area_id,\n                undefined,\n                mdiSofa\n              );\n            })\n          : \"\"}\n        ${this.value?.device_id\n          ? ensureArray(this.value.device_id).map((device_id) => {\n              const device = this._devices![device_id];\n              return this._renderChip(\n                \"device_id\",\n                device_id,\n                device ? computeDeviceName(device, this.hass) : device_id,\n                undefined,\n                mdiDevices\n              );\n            })\n          : \"\"}\n        ${this.value?.entity_id\n          ? ensureArray(this.value.entity_id).map((entity_id) => {\n              const entity = this.hass.states[entity_id];\n              return this._renderChip(\n                \"entity_id\",\n                entity_id,\n                entity ? computeStateName(entity) : entity_id,\n                entity\n              );\n            })\n          : \"\"}\n      </div>\n      ${this._renderPicker()}\n      <div class=\"mdc-chip-set\">\n        <div\n          class=\"mdc-chip area_id add\"\n          .type=${\"area_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_area_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n        <div\n          class=\"mdc-chip device_id add\"\n          .type=${\"device_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_device_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n        <div\n          class=\"mdc-chip entity_id add\"\n          .type=${\"entity_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_entity_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n      </div>\n\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"} `;\n  }\n\n  private async _showPicker(ev) {\n    this._addMode = ev.currentTarget.type;\n    await this.updateComplete;\n    setTimeout(() => {\n      this._inputElement?.open();\n      this._inputElement?.focus();\n    }, 0);\n  }\n\n  private _renderChip(\n    type: string,\n    id: string,\n    name: string,\n    entityState?: HassEntity,\n    iconPath?: string\n  ) {\n    return html`\n      <div\n        class=\"mdc-chip ${classMap({\n          [type]: true,\n        })}\"\n      >\n        ${iconPath\n          ? html`<ha-svg-icon\n              class=\"mdc-chip__icon mdc-chip__icon--leading\"\n              .path=${iconPath}\n            ></ha-svg-icon>`\n          : \"\"}\n        ${entityState\n          ? html`<ha-state-icon\n              class=\"mdc-chip__icon mdc-chip__icon--leading\"\n              .state=${entityState}\n            ></ha-state-icon>`\n          : \"\"}\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\">${name}</span>\n          </span>\n        </span>\n        ${type === \"entity_id\"\n          ? \"\"\n          : html` <span role=\"gridcell\">\n              <ha-icon-button\n                class=\"expand-btn mdc-chip__icon mdc-chip__icon--trailing\"\n                tabindex=\"-1\"\n                role=\"button\"\n                .label=${this.hass.localize(\n                  \"ui.components.target-picker.expand\"\n                )}\n                .path=${mdiUnfoldMoreVertical}\n                hideTooltip\n                .id=${id}\n                .type=${type}\n                @click=${this._handleExpand}\n              ></ha-icon-button>\n              <paper-tooltip class=\"expand\" animation-delay=\"0\"\n                >${this.hass.localize(\n                  `ui.components.target-picker.expand_${type}`\n                )}</paper-tooltip\n              >\n            </span>`}\n        <span role=\"gridcell\">\n          <ha-icon-button\n            class=\"mdc-chip__icon mdc-chip__icon--trailing\"\n            tabindex=\"-1\"\n            role=\"button\"\n            .label=${this.hass.localize(\"ui.components.target-picker.expand\")}\n            .path=${mdiClose}\n            hideTooltip\n            .id=${id}\n            .type=${type}\n            @click=${this._handleRemove}\n          ></ha-icon-button>\n          <paper-tooltip animation-delay=\"0\"\n            >${this.hass.localize(\n              `ui.components.target-picker.remove_${type}`\n            )}</paper-tooltip\n          >\n        </span>\n      </div>\n    `;\n  }\n\n  private _renderPicker() {\n    switch (this._addMode) {\n      case \"area_id\":\n        return html`<ha-area-picker\n          .hass=${this.hass}\n          id=\"input\"\n          .type=${\"area_id\"}\n          .label=${this.hass.localize(\n            \"ui.components.target-picker.add_area_id\"\n          )}\n          no-add\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityRegFilter}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeDomains=${this.includeDomains}\n          @value-changed=${this._targetPicked}\n        ></ha-area-picker>`;\n      case \"device_id\":\n        return html`<ha-device-picker\n          .hass=${this.hass}\n          id=\"input\"\n          .type=${\"device_id\"}\n          .label=${this.hass.localize(\n            \"ui.components.target-picker.add_device_id\"\n          )}\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityRegFilter}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeDomains=${this.includeDomains}\n          @value-changed=${this._targetPicked}\n        ></ha-device-picker>`;\n      case \"entity_id\":\n        return html`<ha-entity-picker\n          .hass=${this.hass}\n          id=\"input\"\n          .type=${\"entity_id\"}\n          .label=${this.hass.localize(\n            \"ui.components.target-picker.add_entity_id\"\n          )}\n          .entityFilter=${this.entityFilter}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeDomains=${this.includeDomains}\n          @value-changed=${this._targetPicked}\n          allow-custom-entity\n        ></ha-entity-picker>`;\n    }\n    return html``;\n  }\n\n  private _targetPicked(ev) {\n    ev.stopPropagation();\n    if (!ev.detail.value) {\n      return;\n    }\n    const value = ev.detail.value;\n    const target = ev.currentTarget;\n    target.value = \"\";\n    this._addMode = undefined;\n    fireEvent(this, \"value-changed\", {\n      value: this.value\n        ? {\n            ...this.value,\n            [target.type]: this.value[target.type]\n              ? [...ensureArray(this.value[target.type]), value]\n              : value,\n          }\n        : { [target.type]: value },\n    });\n  }\n\n  private _handleExpand(ev) {\n    const target = ev.currentTarget as any;\n    const newDevices: string[] = [];\n    const newEntities: string[] = [];\n    if (target.type === \"area_id\") {\n      Object.values(this._devices!).forEach((device) => {\n        if (\n          device.area_id === target.id &&\n          !this.value!.device_id?.includes(device.id) &&\n          this._deviceMeetsFilter(device)\n        ) {\n          newDevices.push(device.id);\n        }\n      });\n      this._entities!.forEach((entity) => {\n        if (\n          entity.area_id === target.id &&\n          !this.value!.entity_id?.includes(entity.entity_id) &&\n          this._entityRegMeetsFilter(entity)\n        ) {\n          newEntities.push(entity.entity_id);\n        }\n      });\n    } else if (target.type === \"device_id\") {\n      this._entities!.forEach((entity) => {\n        if (\n          entity.device_id === target.id &&\n          !this.value!.entity_id?.includes(entity.entity_id) &&\n          this._entityRegMeetsFilter(entity)\n        ) {\n          newEntities.push(entity.entity_id);\n        }\n      });\n    } else {\n      return;\n    }\n    let value = this.value;\n    if (newEntities.length) {\n      value = this._addItems(value, \"entity_id\", newEntities);\n    }\n    if (newDevices.length) {\n      value = this._addItems(value, \"device_id\", newDevices);\n    }\n    value = this._removeItem(value, target.type, target.id);\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _handleRemove(ev) {\n    const target = ev.currentTarget as any;\n    fireEvent(this, \"value-changed\", {\n      value: this._removeItem(this.value, target.type, target.id),\n    });\n  }\n\n  private _addItems(\n    value: this[\"value\"],\n    type: string,\n    ids: string[]\n  ): this[\"value\"] {\n    return {\n      ...value,\n      [type]: value![type] ? ensureArray(value![type])!.concat(ids) : ids,\n    };\n  }\n\n  private _removeItem(\n    value: this[\"value\"],\n    type: string,\n    id: string\n  ): this[\"value\"] {\n    const newVal = ensureArray(value![type])!.filter(\n      (val) => String(val) !== id\n    );\n    if (newVal.length) {\n      return {\n        ...value,\n        [type]: newVal,\n      };\n    }\n    const val = { ...value }!;\n    delete val[type];\n    if (Object.keys(val).length) {\n      return val;\n    }\n    return undefined;\n  }\n\n  private _deviceMeetsFilter(device: DeviceRegistryEntry): boolean {\n    const devEntities = this._entities?.filter(\n      (entity) => entity.device_id === device.id\n    );\n    if (this.includeDomains) {\n      if (!devEntities || !devEntities.length) {\n        return false;\n      }\n      if (\n        !devEntities.some((entity) =>\n          this.includeDomains!.includes(computeDomain(entity.entity_id))\n        )\n      ) {\n        return false;\n      }\n    }\n\n    if (this.includeDeviceClasses) {\n      if (!devEntities || !devEntities.length) {\n        return false;\n      }\n      if (\n        !devEntities.some((entity) => {\n          const stateObj = this.hass.states[entity.entity_id];\n          if (!stateObj) {\n            return false;\n          }\n          return (\n            stateObj.attributes.device_class &&\n            this.includeDeviceClasses!.includes(\n              stateObj.attributes.device_class\n            )\n          );\n        })\n      ) {\n        return false;\n      }\n    }\n\n    if (this.deviceFilter) {\n      return this.deviceFilter(device);\n    }\n    return true;\n  }\n\n  private _entityRegMeetsFilter(entity: EntityRegistryEntry): boolean {\n    if (entity.entity_category) {\n      return false;\n    }\n    if (\n      this.includeDomains &&\n      !this.includeDomains.includes(computeDomain(entity.entity_id))\n    ) {\n      return false;\n    }\n    if (this.includeDeviceClasses) {\n      const stateObj = this.hass.states[entity.entity_id];\n      if (!stateObj) {\n        return false;\n      }\n      if (\n        !stateObj.attributes.device_class ||\n        !this.includeDeviceClasses!.includes(stateObj.attributes.device_class)\n      ) {\n        return false;\n      }\n    }\n    if (this.entityRegFilter) {\n      return this.entityRegFilter(entity);\n    }\n    return true;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        color: var(--primary-text-color);\n      }\n      .items {\n        z-index: 2;\n      }\n      .mdc-chip-set {\n        padding: 4px 0;\n      }\n      .mdc-chip.add {\n        color: rgba(0, 0, 0, 0.87);\n      }\n      .mdc-chip:not(.add) {\n        cursor: default;\n      }\n      .mdc-chip ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        display: flex;\n        align-items: center;\n        outline: none;\n      }\n      .mdc-chip ha-icon-button ha-svg-icon {\n        border-radius: 50%;\n        background: var(--secondary-text-color);\n      }\n      .mdc-chip__icon.mdc-chip__icon--trailing {\n        width: 16px;\n        height: 16px;\n        --mdc-icon-size: 14px;\n        color: var(--secondary-text-color);\n      }\n      .mdc-chip__icon--leading {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        --mdc-icon-size: 20px;\n        border-radius: 50%;\n        padding: 6px;\n        margin-left: -14px !important;\n      }\n      .expand-btn {\n        margin-right: 0;\n      }\n      .mdc-chip.area_id:not(.add) {\n        border: 2px solid #fed6a4;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.area_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.area_id.add {\n        background: #fed6a4;\n      }\n      .mdc-chip.device_id:not(.add) {\n        border: 2px solid #a8e1fb;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.device_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.device_id.add {\n        background: #a8e1fb;\n      }\n      .mdc-chip.entity_id:not(.add) {\n        border: 2px solid #d2e7b9;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.entity_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.entity_id.add {\n        background: #d2e7b9;\n      }\n      .mdc-chip:hover {\n        z-index: 5;\n      }\n      paper-tooltip.expand {\n        min-width: 200px;\n      }\n      :host([disabled]) .mdc-chip {\n        opacity: var(--light-disabled-opacity);\n        pointer-events: none;\n      }\n      :host-context([style*=\"direction: rtl;\"]) .mdc-chip__icon {\n        margin-right: -14px !important;\n        margin-left: 4px !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-target-picker\": HaTargetPicker;\n  }\n}\n","import {\n  HassEntity,\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ConfigEntry, getConfigEntries } from \"../../data/config_entries\";\nimport { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport { TargetSelector } from \"../../data/selector\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-target-picker\";\n\n@customElement(\"ha-selector-target\")\nexport class HaTargetSelector extends SubscribeMixin(LitElement) {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: TargetSelector;\n\n  @property() public value?: HassServiceTarget;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @state() private _entityPlaformLookup?: Record<string, string>;\n\n  @state() private _configEntries?: ConfigEntry[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        const entityLookup = {};\n        for (const confEnt of entities) {\n          if (!confEnt.platform) {\n            continue;\n          }\n          entityLookup[confEnt.entity_id] = confEnt.platform;\n        }\n        this._entityPlaformLookup = entityLookup;\n      }),\n    ];\n  }\n\n  protected updated(changedProperties) {\n    if (changedProperties.has(\"selector\")) {\n      const oldSelector = changedProperties.get(\"selector\");\n      if (\n        oldSelector !== this.selector &&\n        (this.selector.target.device?.integration ||\n          this.selector.target.entity?.integration)\n      ) {\n        this._loadConfigEntries();\n      }\n    }\n  }\n\n  protected render() {\n    return html`<ha-target-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .helper=${this.helper}\n      .deviceFilter=${this._filterDevices}\n      .entityRegFilter=${this._filterRegEntities}\n      .entityFilter=${this._filterEntities}\n      .includeDeviceClasses=${this.selector.target.entity?.device_class\n        ? [this.selector.target.entity.device_class]\n        : undefined}\n      .includeDomains=${this.selector.target.entity?.domain\n        ? [this.selector.target.entity.domain]\n        : undefined}\n      .disabled=${this.disabled}\n    ></ha-target-picker>`;\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (\n      this.selector.target.entity?.integration ||\n      this.selector.target.device?.integration\n    ) {\n      if (\n        !this._entityPlaformLookup ||\n        this._entityPlaformLookup[entity.entity_id] !==\n          (this.selector.target.entity?.integration ||\n            this.selector.target.device?.integration)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private _filterRegEntities = (entity: EntityRegistryEntry): boolean => {\n    if (this.selector.target.entity?.integration) {\n      if (entity.platform !== this.selector.target.entity.integration) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (\n      this.selector.target.device?.manufacturer &&\n      device.manufacturer !== this.selector.target.device.manufacturer\n    ) {\n      return false;\n    }\n    if (\n      this.selector.target.device?.model &&\n      device.model !== this.selector.target.device.model\n    ) {\n      return false;\n    }\n    if (\n      this.selector.target.device?.integration ||\n      this.selector.target.entity?.integration\n    ) {\n      if (\n        !this._configEntries?.some((entry) =>\n          device.config_entries.includes(entry.entry_id)\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private async _loadConfigEntries() {\n    this._configEntries = (await getConfigEntries(this.hass)).filter(\n      (entry) =>\n        entry.domain === this.selector.target.device?.integration ||\n        entry.domain === this.selector.target.entity?.integration\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-target-picker {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-target\": HaTargetSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-code-editor\";\nimport \"../ha-input-helper-text\";\n\n@customElement(\"ha-selector-template\")\nexport class HaTemplateSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      ${this.label\n        ? html`<p>${this.label}${this.required ? \" *\" : \"\"}</p>`\n        : \"\"}\n      <ha-code-editor\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${this.value}\n        .readOnly=${this.disabled}\n        autofocus\n        autocomplete-entities\n        @value-changed=${this._handleChange}\n        dir=\"ltr\"\n      ></ha-code-editor>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private _handleChange(ev) {\n    const value = ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-template\": HaTemplateSelector;\n  }\n}\n","import { mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { StringSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"../ha-textarea\";\nimport \"../ha-textfield\";\n\n@customElement(\"ha-selector-text\")\nexport class HaTextSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public helper?: string;\n\n  @property() public selector!: StringSelector;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _unmaskedPassword = false;\n\n  protected render() {\n    if (this.selector.text?.multiline) {\n      return html`<ha-textarea\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        .value=${this.value || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        @input=${this._handleChange}\n        autocapitalize=\"none\"\n        autocomplete=\"off\"\n        spellcheck=\"false\"\n        .required=${this.required}\n        autogrow\n      ></ha-textarea>`;\n    }\n    return html`<ha-textfield\n        .value=${this.value || \"\"}\n        .placeholder=${this.placeholder || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        .type=${this._unmaskedPassword ? \"text\" : this.selector.text?.type}\n        @input=${this._handleChange}\n        .label=${this.label || \"\"}\n        .suffix=${this.selector.text?.type === \"password\"\n          ? // reserve some space for the icon.\n            html`<div style=\"width: 24px\"></div>`\n          : this.selector.text?.suffix}\n        .required=${this.required}\n      ></ha-textfield>\n      ${this.selector.text?.type === \"password\"\n        ? html`<ha-icon-button\n            toggles\n            .label=${`${this._unmaskedPassword ? \"Hide\" : \"Show\"} password`}\n            @click=${this._toggleUnmaskedPassword}\n            .path=${this._unmaskedPassword ? mdiEyeOff : mdiEye}\n          ></ha-icon-button>`\n        : \"\"}`;\n  }\n\n  private _toggleUnmaskedPassword(): void {\n    this._unmaskedPassword = !this._unmaskedPassword;\n  }\n\n  private _handleChange(ev) {\n    let value = ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    if (value === \"\" && !this.required) {\n      value = undefined;\n    }\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      ha-textarea,\n      ha-textfield {\n        width: 100%;\n      }\n      ha-icon-button {\n        position: absolute;\n        top: 16px;\n        right: 16px;\n        --mdc-icon-button-size: 24px;\n        --mdc-icon-size: 20px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-text\": HaTextSelector;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-select\";\n\n@customElement(\"ha-theme-picker\")\nexport class HaThemePicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\"ui.components.theme_picker.theme\")}\n        .value=${this.value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        <mwc-list-item value=\"remove\"\n          >${this.hass!.localize(\n            \"ui.components.theme_picker.no_theme\"\n          )}</mwc-list-item\n        >\n        ${Object.keys(this.hass!.themes.themes)\n          .sort()\n          .map(\n            (theme) =>\n              html`<mwc-list-item .value=${theme}>${theme}</mwc-list-item>`\n          )}\n      </ha-select>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-select {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value === \"remove\" ? undefined : ev.target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-theme-picker\": HaThemePicker;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { ThemeSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-theme-picker\";\n\n@customElement(\"ha-selector-theme\")\nexport class HaThemeSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: ThemeSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-theme-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-theme-picker>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-theme\": HaThemeSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { TimeSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-time-input\";\n\n@customElement(\"ha-selector-time\")\nexport class HaTimeSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: TimeSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  protected render() {\n    return html`\n      <ha-time-input\n        .value=${this.value}\n        .locale=${this.hass.locale}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .helper=${this.helper}\n        .label=${this.label}\n        enable-second\n      ></ha-time-input>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-time\": HaTimeSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport type { Selector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-selector-action\";\nimport \"./ha-selector-addon\";\nimport \"./ha-selector-area\";\nimport \"./ha-selector-attribute\";\nimport \"./ha-selector-boolean\";\nimport \"./ha-selector-color-rgb\";\nimport \"./ha-selector-date\";\nimport \"./ha-selector-datetime\";\nimport \"./ha-selector-device\";\nimport \"./ha-selector-duration\";\nimport \"./ha-selector-entity\";\nimport \"./ha-selector-number\";\nimport \"./ha-selector-object\";\nimport \"./ha-selector-select\";\nimport \"./ha-selector-target\";\nimport \"./ha-selector-template\";\nimport \"./ha-selector-text\";\nimport \"./ha-selector-time\";\nimport \"./ha-selector-icon\";\nimport \"./ha-selector-media\";\nimport \"./ha-selector-theme\";\nimport \"./ha-selector-location\";\nimport \"./ha-selector-color-temp\";\n\n@customElement(\"ha-selector\")\nexport class HaSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: Selector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: any;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property() public context?: Record<string, any>;\n\n  public focus() {\n    this.shadowRoot?.getElementById(\"selector\")?.focus();\n  }\n\n  private get _type() {\n    return Object.keys(this.selector)[0];\n  }\n\n  protected render() {\n    return html`\n      ${dynamicElement(`ha-selector-${this._type}`, {\n        hass: this.hass,\n        selector: this.selector,\n        value: this.value,\n        label: this.label,\n        placeholder: this.placeholder,\n        disabled: this.disabled,\n        required: this.required,\n        helper: this.helper,\n        context: this.context,\n        id: \"selector\",\n      })}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector\": HaSelector;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport {\n  HassService,\n  HassServices,\n  HassServiceTarget,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeObjectId } from \"../common/entity/compute_object_id\";\nimport {\n  fetchIntegrationManifest,\n  IntegrationManifest,\n} from \"../data/integration\";\nimport { Selector } from \"../data/selector\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport { documentationUrl } from \"../util/documentation-url\";\nimport \"./ha-checkbox\";\nimport \"./ha-icon-button\";\nimport \"./ha-selector/ha-selector\";\nimport \"./ha-service-picker\";\nimport \"./ha-settings-row\";\nimport \"./ha-yaml-editor\";\nimport type { HaYamlEditor } from \"./ha-yaml-editor\";\n\nconst showOptionalToggle = (field) =>\n  field.selector &&\n  !field.required &&\n  !(\"boolean\" in field.selector && field.default);\n\ninterface ExtHassService extends Omit<HassService, \"fields\"> {\n  fields: {\n    key: string;\n    name?: string;\n    description: string;\n    required?: boolean;\n    advanced?: boolean;\n    default?: any;\n    example?: any;\n    selector?: Selector;\n  }[];\n  hasSelector: string[];\n}\n\n@customElement(\"ha-service-control\")\nexport class HaServiceControl extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public value?: {\n    service: string;\n    target?: HassServiceTarget;\n    data?: Record<string, any>;\n  };\n\n  @state() private _value!: this[\"value\"];\n\n  @property({ reflect: true, type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public showAdvanced?: boolean;\n\n  @state() private _checkedKeys = new Set();\n\n  @state() private _manifest?: IntegrationManifest;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  protected willUpdate(changedProperties: PropertyValues<this>) {\n    if (!changedProperties.has(\"value\")) {\n      return;\n    }\n    const oldValue = changedProperties.get(\"value\") as\n      | undefined\n      | this[\"value\"];\n\n    if (oldValue?.service !== this.value?.service) {\n      this._checkedKeys = new Set();\n    }\n\n    const serviceData = this._getServiceInfo(\n      this.value?.service,\n      this.hass.services\n    );\n\n    // Fetch the manifest if we have a service selected and the service domain changed.\n    // If no service is selected, clear the manifest.\n    if (this.value?.service) {\n      if (\n        !oldValue?.service ||\n        computeDomain(this.value.service) !== computeDomain(oldValue.service)\n      ) {\n        this._fetchManifest(computeDomain(this.value?.service));\n      }\n    } else {\n      this._manifest = undefined;\n    }\n\n    if (\n      serviceData &&\n      \"target\" in serviceData &&\n      (this.value?.data?.entity_id ||\n        this.value?.data?.area_id ||\n        this.value?.data?.device_id)\n    ) {\n      const target = {\n        ...this.value.target,\n      };\n\n      if (this.value.data.entity_id && !this.value.target?.entity_id) {\n        target.entity_id = this.value.data.entity_id;\n      }\n      if (this.value.data.area_id && !this.value.target?.area_id) {\n        target.area_id = this.value.data.area_id;\n      }\n      if (this.value.data.device_id && !this.value.target?.device_id) {\n        target.device_id = this.value.data.device_id;\n      }\n\n      this._value = {\n        ...this.value,\n        target,\n        data: { ...this.value.data },\n      };\n\n      delete this._value.data!.entity_id;\n      delete this._value.data!.device_id;\n      delete this._value.data!.area_id;\n    } else {\n      this._value = this.value;\n    }\n\n    if (oldValue?.service !== this.value?.service) {\n      let updatedDefaultValue = false;\n      if (this._value && serviceData) {\n        // Set mandatory bools without a default value to false\n        if (!this._value.data) {\n          this._value.data = {};\n        }\n        serviceData.fields.forEach((field) => {\n          if (\n            field.selector &&\n            field.required &&\n            field.default === undefined &&\n            \"boolean\" in field.selector &&\n            this._value!.data![field.key] === undefined\n          ) {\n            updatedDefaultValue = true;\n            this._value!.data![field.key] = false;\n          }\n        });\n      }\n      if (updatedDefaultValue) {\n        fireEvent(this, \"value-changed\", {\n          value: {\n            ...this._value,\n          },\n        });\n      }\n    }\n\n    if (this._value?.data) {\n      const yamlEditor = this._yamlEditor;\n      if (yamlEditor && yamlEditor.value !== this._value.data) {\n        yamlEditor.setValue(this._value.data);\n      }\n    }\n  }\n\n  private _getServiceInfo = memoizeOne(\n    (\n      service?: string,\n      serviceDomains?: HassServices\n    ): ExtHassService | undefined => {\n      if (!service || !serviceDomains) {\n        return undefined;\n      }\n      const domain = computeDomain(service);\n      const serviceName = computeObjectId(service);\n      if (!(domain in serviceDomains)) {\n        return undefined;\n      }\n      if (!(serviceName in serviceDomains[domain])) {\n        return undefined;\n      }\n\n      const fields = Object.entries(\n        serviceDomains[domain][serviceName].fields\n      ).map(([key, value]) => ({\n        key,\n        ...value,\n        selector: value.selector as Selector | undefined,\n      }));\n      return {\n        ...serviceDomains[domain][serviceName],\n        fields,\n        hasSelector: fields.length\n          ? fields.filter((field) => field.selector).map((field) => field.key)\n          : [],\n      };\n    }\n  );\n\n  protected render() {\n    const serviceData = this._getServiceInfo(\n      this._value?.service,\n      this.hass.services\n    );\n\n    const shouldRenderServiceDataYaml =\n      (serviceData?.fields.length && !serviceData.hasSelector.length) ||\n      (serviceData &&\n        Object.keys(this._value?.data || {}).some(\n          (key) => !serviceData!.hasSelector.includes(key)\n        ));\n\n    const entityId =\n      shouldRenderServiceDataYaml &&\n      serviceData?.fields.find((field) => field.key === \"entity_id\");\n\n    const hasOptional = Boolean(\n      !shouldRenderServiceDataYaml &&\n        serviceData?.fields.some((field) => showOptionalToggle(field))\n    );\n\n    return html`<ha-service-picker\n        .hass=${this.hass}\n        .value=${this._value?.service}\n        @value-changed=${this._serviceChanged}\n      ></ha-service-picker>\n      <div class=\"description\">\n        <p>${serviceData?.description}</p>\n        ${this._manifest\n          ? html` <a\n              href=${this._manifest.is_built_in\n                ? documentationUrl(\n                    this.hass,\n                    `/integrations/${this._manifest.domain}`\n                  )\n                : this._manifest.documentation}\n              title=${this.hass.localize(\n                \"ui.components.service-control.integration_doc\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <ha-icon-button\n                .path=${mdiHelpCircle}\n                class=\"help-icon\"\n              ></ha-icon-button>\n            </a>`\n          : \"\"}\n      </div>\n      ${serviceData && \"target\" in serviceData\n        ? html`<ha-settings-row .narrow=${this.narrow}>\n            ${hasOptional\n              ? html`<div slot=\"prefix\" class=\"checkbox-spacer\"></div>`\n              : \"\"}\n            <span slot=\"heading\"\n              >${this.hass.localize(\n                \"ui.components.service-control.target\"\n              )}</span\n            >\n            <span slot=\"description\"\n              >${this.hass.localize(\n                \"ui.components.service-control.target_description\"\n              )}</span\n            ><ha-selector\n              .hass=${this.hass}\n              .selector=${serviceData.target\n                ? { target: serviceData.target }\n                : { target: {} }}\n              @value-changed=${this._targetChanged}\n              .value=${this._value?.target}\n            ></ha-selector\n          ></ha-settings-row>`\n        : entityId\n        ? html`<ha-entity-picker\n            .hass=${this.hass}\n            .value=${this._value?.data?.entity_id}\n            .label=${entityId.description}\n            @value-changed=${this._entityPicked}\n            allow-custom-entity\n          ></ha-entity-picker>`\n        : \"\"}\n      ${shouldRenderServiceDataYaml\n        ? html`<ha-yaml-editor\n            .hass=${this.hass}\n            .label=${this.hass.localize(\n              \"ui.components.service-control.service_data\"\n            )}\n            .name=${\"data\"}\n            .defaultValue=${this._value?.data}\n            @value-changed=${this._dataChanged}\n          ></ha-yaml-editor>`\n        : serviceData?.fields.map((dataField) => {\n            const showOptional = showOptionalToggle(dataField);\n            return dataField.selector &&\n              (!dataField.advanced ||\n                this.showAdvanced ||\n                (this._value?.data &&\n                  this._value.data[dataField.key] !== undefined))\n              ? html`<ha-settings-row .narrow=${this.narrow}>\n                  ${!showOptional\n                    ? hasOptional\n                      ? html`<div slot=\"prefix\" class=\"checkbox-spacer\"></div>`\n                      : \"\"\n                    : html`<ha-checkbox\n                        .key=${dataField.key}\n                        .checked=${this._checkedKeys.has(dataField.key) ||\n                        (this._value?.data &&\n                          this._value.data[dataField.key] !== undefined)}\n                        @change=${this._checkboxChanged}\n                        slot=\"prefix\"\n                      ></ha-checkbox>`}\n                  <span slot=\"heading\">${dataField.name || dataField.key}</span>\n                  <span slot=\"description\">${dataField?.description}</span>\n                  <ha-selector\n                    .disabled=${showOptional &&\n                    !this._checkedKeys.has(dataField.key) &&\n                    (!this._value?.data ||\n                      this._value.data[dataField.key] === undefined)}\n                    .hass=${this.hass}\n                    .selector=${dataField.selector}\n                    .key=${dataField.key}\n                    @value-changed=${this._serviceDataChanged}\n                    .value=${this._value?.data &&\n                    this._value.data[dataField.key] !== undefined\n                      ? this._value.data[dataField.key]\n                      : dataField.default}\n                  ></ha-selector>\n                </ha-settings-row>`\n              : \"\";\n          })}`;\n  }\n\n  private _checkboxChanged(ev) {\n    const checked = ev.currentTarget.checked;\n    const key = ev.currentTarget.key;\n    let data;\n\n    if (checked) {\n      this._checkedKeys.add(key);\n      const defaultValue = this._getServiceInfo(\n        this._value?.service,\n        this.hass.services\n      )?.fields.find((field) => field.key === key)?.default;\n      if (defaultValue) {\n        data = {\n          ...this._value?.data,\n          [key]: defaultValue,\n        };\n      }\n    } else {\n      this._checkedKeys.delete(key);\n      data = { ...this._value?.data };\n      delete data[key];\n    }\n    if (data) {\n      fireEvent(this, \"value-changed\", {\n        value: {\n          ...this._value,\n          data,\n        },\n      });\n    }\n    this.requestUpdate(\"_checkedKeys\");\n  }\n\n  private _serviceChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    if (ev.detail.value === this._value?.service) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { service: ev.detail.value || \"\" },\n    });\n  }\n\n  private _entityPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (this._value?.data?.entity_id === newValue) {\n      return;\n    }\n    let value;\n    if (!newValue && this._value?.data) {\n      value = { ...this._value };\n      delete value.data.entity_id;\n    } else {\n      value = {\n        ...this._value,\n        data: { ...this._value?.data, entity_id: ev.detail.value },\n      };\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _targetChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (this._value?.target === newValue) {\n      return;\n    }\n    let value;\n    if (!newValue) {\n      value = { ...this._value };\n      delete value.target;\n    } else {\n      value = { ...this._value, target: ev.detail.value };\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _serviceDataChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const key = (ev.currentTarget as any).key;\n    const value = ev.detail.value;\n    if (\n      this._value?.data?.[key] === value ||\n      (!this._value?.data?.[key] && (value === \"\" || value === undefined))\n    ) {\n      return;\n    }\n\n    const data = { ...this._value?.data, [key]: value };\n\n    if (value === \"\" || value === undefined) {\n      delete data[key];\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._value,\n        data,\n      },\n    });\n  }\n\n  private _dataChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._value,\n        data: ev.detail.value,\n      },\n    });\n  }\n\n  private async _fetchManifest(integration: string) {\n    this._manifest = undefined;\n    try {\n      this._manifest = await fetchIntegrationManifest(this.hass, integration);\n    } catch (err: any) {\n      // Ignore if loading manifest fails. Probably bad JSON in manifest\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-settings-row {\n        padding: var(--service-control-padding, 0 16px);\n      }\n      ha-settings-row {\n        --paper-time-input-justify-content: flex-end;\n        --settings-row-content-width: 100%;\n        --settings-row-prefix-display: contents;\n        border-top: var(\n          --service-control-items-border-top,\n          1px solid var(--divider-color)\n        );\n      }\n      ha-service-picker,\n      ha-entity-picker,\n      ha-yaml-editor {\n        display: block;\n        margin: var(--service-control-padding, 0 16px);\n      }\n      ha-yaml-editor {\n        padding: 16px 0;\n      }\n      p {\n        margin: var(--service-control-padding, 0 16px);\n        padding: 16px 0;\n      }\n      .checkbox-spacer {\n        width: 32px;\n      }\n      ha-checkbox {\n        margin-left: -16px;\n      }\n      .help-icon {\n        color: var(--secondary-text-color);\n      }\n      .description {\n        justify-content: space-between;\n        display: flex;\n        align-items: center;\n        padding-right: 2px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-service-control\": HaServiceControl;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport { domainToName } from \"../data/integration\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-combo-box\";\n\nconst rowRenderer: ComboBoxLitRenderer<{ service: string; name: string }> = (\n  item\n) => html`<mwc-list-item twoline>\n  <span>${item.name}</span>\n  <span slot=\"secondary\"\n    >${item.name === item.service ? \"\" : item.service}</span\n  >\n</mwc-list-item>`;\n\nclass HaServicePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: string;\n\n  @state() private _filter?: string;\n\n  protected render() {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.hass.localize(\"ui.components.service-picker.service\")}\n        .filteredItems=${this._filteredServices(\n          this.hass.localize,\n          this.hass.services,\n          this._filter\n        )}\n        .value=${this.value}\n        .renderer=${rowRenderer}\n        item-value-path=\"service\"\n        item-label-path=\"name\"\n        allow-custom-value\n        @filter-changed=${this._filterChanged}\n        @value-changed=${this._valueChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private _services = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      services: HomeAssistant[\"services\"]\n    ): {\n      service: string;\n      name: string;\n    }[] => {\n      if (!services) {\n        return [];\n      }\n      const result: { service: string; name: string }[] = [];\n\n      Object.keys(services)\n        .sort()\n        .forEach((domain) => {\n          const services_keys = Object.keys(services[domain]).sort();\n\n          for (const service of services_keys) {\n            result.push({\n              service: `${domain}.${service}`,\n              name: `${domainToName(localize, domain)}: ${\n                services[domain][service].name || service\n              }`,\n            });\n          }\n        });\n\n      return result;\n    }\n  );\n\n  private _filteredServices = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      services: HomeAssistant[\"services\"],\n      filter?: string\n    ) => {\n      if (!services) {\n        return [];\n      }\n      const processedServices = this._services(localize, services);\n\n      if (!filter) {\n        return processedServices;\n      }\n      return processedServices.filter(\n        (service) =>\n          service.service.toLowerCase().includes(filter) ||\n          service.name?.toLowerCase().includes(filter)\n      );\n    }\n  );\n\n  private _filterChanged(ev: CustomEvent): void {\n    this._filter = ev.detail.value.toLowerCase();\n  }\n\n  private _valueChanged(ev) {\n    this.value = ev.detail.value;\n    fireEvent(this, \"change\");\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ncustomElements.define(\"ha-service-picker\", HaServicePicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-service-picker\": HaServicePicker;\n  }\n}\n","import { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textarea\")\nexport class HaTextArea extends TextAreaBase {\n  @property({ type: Boolean, reflect: true }) autogrow = false;\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.autogrow && changedProperties.has(\"value\")) {\n      this.mdcRoot.dataset.value = this.value + '=\\u200B\"'; // add a zero-width space to correctly wrap\n    }\n  }\n\n  static override styles = [\n    textfieldStyles,\n    textareaStyles,\n    css`\n      :host([autogrow]) .mdc-text-field {\n        position: relative;\n        min-height: 74px;\n        min-width: 178px;\n        max-height: 200px;\n      }\n      :host([autogrow]) .mdc-text-field:after {\n        content: attr(data-value);\n        margin-top: 23px;\n        margin-bottom: 9px;\n        line-height: 1.5rem;\n        min-height: 42px;\n        padding: 0px 32px 0 16px;\n        letter-spacing: var(\n          --mdc-typography-subtitle1-letter-spacing,\n          0.009375em\n        );\n        visibility: hidden;\n        white-space: pre-wrap;\n      }\n      :host([autogrow]) .mdc-text-field__input {\n        position: absolute;\n        height: calc(100% - 32px);\n      }\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textarea\": HaTextArea;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { useAmPm } from \"../common/datetime/use_am_pm\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { FrontendLocaleData } from \"../data/translation\";\nimport \"./ha-base-time-input\";\nimport type { TimeChangedEvent } from \"./ha-base-time-input\";\n\n@customElement(\"ha-time-input\")\nexport class HaTimeInput extends LitElement {\n  @property({ attribute: false }) public locale!: FrontendLocaleData;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"enable-second\" })\n  public enableSecond = false;\n\n  protected render() {\n    const useAMPM = useAmPm(this.locale);\n\n    const parts = this.value?.split(\":\") || [];\n    let hours = parts[0];\n    const numberHours = Number(parts[0]);\n    if (numberHours && useAMPM && numberHours > 12 && numberHours < 24) {\n      hours = String(numberHours - 12).padStart(2, \"0\");\n    }\n    if (useAMPM && numberHours === 0) {\n      hours = \"12\";\n    }\n\n    return html`\n      <ha-base-time-input\n        .label=${this.label}\n        .hours=${Number(hours)}\n        .minutes=${Number(parts[1])}\n        .seconds=${Number(parts[2])}\n        .format=${useAMPM ? 12 : 24}\n        .amPm=${useAMPM && (numberHours >= 12 ? \"PM\" : \"AM\")}\n        .disabled=${this.disabled}\n        @value-changed=${this._timeChanged}\n        .enableSecond=${this.enableSecond}\n        .required=${this.required}\n        .helper=${this.helper}\n      ></ha-base-time-input>\n    `;\n  }\n\n  private _timeChanged(ev: CustomEvent<{ value: TimeChangedEvent }>) {\n    ev.stopPropagation();\n    const eventValue = ev.detail.value;\n\n    const useAMPM = useAmPm(this.locale);\n    let hours = eventValue.hours || 0;\n    if (eventValue && useAMPM) {\n      if (eventValue.amPm === \"PM\" && hours < 12) {\n        hours += 12;\n      }\n      if (eventValue.amPm === \"AM\" && hours === 12) {\n        hours = 0;\n      }\n    }\n    const value = `${hours.toString().padStart(2, \"0\")}:${\n      eventValue.minutes ? eventValue.minutes.toString().padStart(2, \"0\") : \"00\"\n    }:${\n      eventValue.seconds ? eventValue.seconds.toString().padStart(2, \"0\") : \"00\"\n    }`;\n\n    if (value === this.value) {\n      return;\n    }\n\n    this.value = value;\n    fireEvent(this, \"change\");\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-time-input\": HaTimeInput;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiArrowDown, mdiArrowUp, mdiDotsVertical } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-select\";\nimport type { HaSelect } from \"../../../../components/ha-select\";\nimport type { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\nimport { validateConfig } from \"../../../../data/config\";\nimport { Action, getActionType } from \"../../../../data/script\";\nimport { callExecuteScript } from \"../../../../data/service\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { showToast } from \"../../../../util/toast\";\nimport \"./types/ha-automation-action-activate_scene\";\nimport \"./types/ha-automation-action-choose\";\nimport \"./types/ha-automation-action-condition\";\nimport \"./types/ha-automation-action-delay\";\nimport \"./types/ha-automation-action-device_id\";\nimport \"./types/ha-automation-action-event\";\nimport \"./types/ha-automation-action-if\";\nimport \"./types/ha-automation-action-parallel\";\nimport \"./types/ha-automation-action-play_media\";\nimport \"./types/ha-automation-action-repeat\";\nimport \"./types/ha-automation-action-service\";\nimport \"./types/ha-automation-action-stop\";\nimport \"./types/ha-automation-action-wait_for_trigger\";\nimport \"./types/ha-automation-action-wait_template\";\n\nconst OPTIONS = [\n  \"condition\",\n  \"delay\",\n  \"event\",\n  \"play_media\",\n  \"activate_scene\",\n  \"service\",\n  \"wait_template\",\n  \"wait_for_trigger\",\n  \"repeat\",\n  \"choose\",\n  \"if\",\n  \"device_id\",\n  \"stop\",\n  \"parallel\",\n];\n\nconst getType = (action: Action | undefined) => {\n  if (!action) {\n    return undefined;\n  }\n  if (\"service\" in action || \"scene\" in action) {\n    return getActionType(action);\n  }\n  if ([\"and\", \"or\", \"not\"].some((key) => key in action)) {\n    return \"condition\";\n  }\n  return OPTIONS.find((option) => option in action);\n};\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"move-action\": { direction: \"up\" | \"down\" };\n  }\n}\n\nexport interface ActionElement extends LitElement {\n  action: Action;\n}\n\nexport const handleChangeEvent = (element: ActionElement, ev: CustomEvent) => {\n  ev.stopPropagation();\n  const name = (ev.target as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = ev.detail?.value || (ev.target as any).value;\n\n  if ((element.action[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newAction: Action;\n  if (!newVal) {\n    newAction = { ...element.action };\n    delete newAction[name];\n  } else {\n    newAction = { ...element.action, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newAction });\n};\n\n@customElement(\"ha-automation-action-row\")\nexport default class HaAutomationActionRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: Action;\n\n  @property() public index!: number;\n\n  @property() public totalActions!: number;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _warnings?: string[];\n\n  @state() private _uiModeAvailable = true;\n\n  @state() private _yamlMode = false;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string][] =>\n      OPTIONS.map(\n        (action) =>\n          [\n            action,\n            localize(\n              `ui.panel.config.automation.editor.actions.type.${action}.label`\n            ),\n          ] as [string, string]\n      ).sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  protected willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    this._uiModeAvailable = getType(this.action) !== undefined;\n    if (!this._uiModeAvailable && !this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    if (this._yamlMode) {\n      const yamlEditor = this._yamlEditor;\n      if (yamlEditor && yamlEditor.value !== this.action) {\n        yamlEditor.setValue(this.action);\n      }\n    }\n  }\n\n  protected render() {\n    const type = getType(this.action);\n    const yamlMode = this._yamlMode;\n\n    return html`\n      <ha-card outlined>\n        ${this.action.enabled === false\n          ? html`<div class=\"disabled-bar\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.disabled\"\n              )}\n            </div>`\n          : \"\"}\n        <div class=\"card-menu\">\n          ${this.index !== 0\n            ? html`\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.automation.editor.move_up\"\n                  )}\n                  .path=${mdiArrowUp}\n                  @click=${this._moveUp}\n                ></ha-icon-button>\n              `\n            : \"\"}\n          ${this.index !== this.totalActions - 1\n            ? html`\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.automation.editor.move_down\"\n                  )}\n                  .path=${mdiArrowDown}\n                  @click=${this._moveDown}\n                ></ha-icon-button>\n              `\n            : \"\"}\n          <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            ></ha-icon-button>\n            <mwc-list-item>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.run_action\"\n              )}\n            </mwc-list-item>\n            <mwc-list-item .disabled=${!this._uiModeAvailable}>\n              ${yamlMode\n                ? this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_ui\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_yaml\"\n                  )}\n            </mwc-list-item>\n            <mwc-list-item>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.duplicate\"\n              )}\n            </mwc-list-item>\n            <mwc-list-item>\n              ${this.action.enabled === false\n                ? this.hass.localize(\n                    \"ui.panel.config.automation.editor.actions.enable\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.config.automation.editor.actions.disable\"\n                  )}\n            </mwc-list-item>\n            <mwc-list-item class=\"warning\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.delete\"\n              )}\n            </mwc-list-item>\n          </ha-button-menu>\n        </div>\n        <div\n          class=\"card-content ${this.action.enabled === false\n            ? \"disabled\"\n            : \"\"}\"\n        >\n          ${this._warnings\n            ? html`<ha-alert\n                alert-type=\"warning\"\n                .title=${this.hass.localize(\n                  \"ui.errors.config.editor_not_supported\"\n                )}\n              >\n                ${this._warnings!.length > 0 && this._warnings![0] !== undefined\n                  ? html` <ul>\n                      ${this._warnings!.map(\n                        (warning) => html`<li>${warning}</li>`\n                      )}\n                    </ul>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.errors.config.edit_in_yaml_supported\")}\n              </ha-alert>`\n            : \"\"}\n          ${yamlMode\n            ? html`\n                ${type === undefined\n                  ? html`\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.editor.actions.unsupported_action\",\n                        \"action\",\n                        type\n                      )}\n                    `\n                  : \"\"}\n                <h2>\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_yaml\"\n                  )}\n                </h2>\n                <ha-yaml-editor\n                  .hass=${this.hass}\n                  .defaultValue=${this.action}\n                  @value-changed=${this._onYamlChange}\n                ></ha-yaml-editor>\n              `\n            : html`\n                <ha-select\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.automation.editor.actions.type_select\"\n                  )}\n                  .value=${getType(this.action)}\n                  naturalMenuWidth\n                  @selected=${this._typeChanged}\n                >\n                  ${this._processedTypes(this.hass.localize).map(\n                    ([opt, label]) => html`\n                      <mwc-list-item .value=${opt}>${label}</mwc-list-item>\n                    `\n                  )}\n                </ha-select>\n\n                <div @ui-mode-not-available=${this._handleUiModeNotAvailable}>\n                  ${dynamicElement(`ha-automation-action-${type}`, {\n                    hass: this.hass,\n                    action: this.action,\n                    narrow: this.narrow,\n                  })}\n                </div>\n              `}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    // Prevent possible parent action-row from switching to yamlMode\n    ev.stopPropagation();\n\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private _moveUp() {\n    fireEvent(this, \"move-action\", { direction: \"up\" });\n  }\n\n  private _moveDown() {\n    fireEvent(this, \"move-action\", { direction: \"down\" });\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._runAction();\n        break;\n      case 1:\n        this._switchYamlMode();\n        break;\n      case 2:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 3:\n        this._onDisable();\n        break;\n      case 4:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDisable() {\n    const enabled = !(this.action.enabled ?? true);\n    const value = { ...this.action, enabled };\n    fireEvent(this, \"value-changed\", { value });\n    if (this._yamlMode) {\n      this._yamlEditor?.setValue(value);\n    }\n  }\n\n  private async _runAction() {\n    const validated = await validateConfig(this.hass, {\n      action: this.action,\n    });\n\n    if (!validated.action.valid) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.invalid_action\"\n        ),\n        text: validated.action.error,\n      });\n      return;\n    }\n\n    try {\n      await callExecuteScript(this.hass, this.action);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.run_action_error\"\n        ),\n        text: err.message || err,\n      });\n      return;\n    }\n\n    showToast(this, {\n      message: this.hass.localize(\n        \"ui.panel.config.automation.editor.actions.run_action_success\"\n      ),\n    });\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.actions.delete_confirm\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = (ev.target as HaSelect).value;\n\n    if (!type) {\n      return;\n    }\n\n    this._uiModeAvailable = OPTIONS.includes(type);\n    if (!this._uiModeAvailable && !this._yamlMode) {\n      this._yamlMode = false;\n    }\n\n    if (type !== getType(this.action)) {\n      const elClass = customElements.get(\n        `ha-automation-action-${type}`\n      ) as CustomElementConstructor & { defaultConfig: Action };\n\n      fireEvent(this, \"value-changed\", {\n        value: {\n          ...elClass.defaultConfig,\n        },\n      });\n    }\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = !this._yamlMode;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .disabled {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n        .card-content {\n          padding-top: 16px;\n          margin-top: 0;\n        }\n        .disabled-bar {\n          background: var(--divider-color, #e0e0e0);\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius);\n          border-top-left-radius: var(--ha-card-border-radius);\n        }\n        .card-menu {\n          float: right;\n          z-index: 3;\n          margin: 4px;\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n        :host-context([style*=\"direction: rtl;\"]) .card-menu {\n          right: initial;\n          left: 16px;\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n        .warning {\n          margin-bottom: 8px;\n        }\n        .warning ul {\n          margin: 4px 0;\n        }\n        ha-select {\n          margin-bottom: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-row\": HaAutomationActionRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport { Action } from \"../../../../data/script\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-action-row\";\nimport { HaDeviceAction } from \"./types/ha-automation-action-device_id\";\n\n@customElement(\"ha-automation-action\")\nexport default class HaAutomationAction extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property() public actions!: Action[];\n\n  protected render() {\n    return html`\n      ${this.actions.map(\n        (action, idx) => html`\n          <ha-automation-action-row\n            .index=${idx}\n            .totalActions=${this.actions.length}\n            .action=${action}\n            .narrow=${this.narrow}\n            @duplicate=${this._duplicateAction}\n            @move-action=${this._move}\n            @value-changed=${this._actionChanged}\n            .hass=${this.hass}\n          ></ha-automation-action-row>\n        `\n      )}\n      <ha-card outlined>\n        <div class=\"card-actions add-card\">\n          <mwc-button @click=${this._addAction}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.add\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addAction() {\n    const actions = this.actions.concat({\n      ...HaDeviceAction.defaultConfig,\n    });\n\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _move(ev: CustomEvent) {\n    // Prevent possible parent action-row from also moving\n    ev.stopPropagation();\n\n    const index = (ev.target as any).index;\n    const newIndex = ev.detail.direction === \"up\" ? index - 1 : index + 1;\n    const actions = this.actions.concat();\n    const action = actions.splice(index, 1)[0];\n    actions.splice(newIndex, 0, action);\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const actions = [...this.actions];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      actions.splice(index, 1);\n    } else {\n      actions[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _duplicateAction(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.actions.concat(this.actions[index]),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-action-row,\n      ha-card {\n        display: block;\n        margin-top: 16px;\n      }\n      .add-card mwc-button {\n        display: block;\n        text-align: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action\": HaAutomationAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport { SceneAction } from \"../../../../../data/script\";\nimport { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\nconst includeDomains = [\"scene\"];\n\n@customElement(\"ha-automation-action-activate_scene\")\nexport class HaSceneAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: SceneAction;\n\n  public static get defaultConfig(): SceneAction {\n    return {\n      service: \"scene.turn_on\",\n      target: {\n        entity_id: \"\",\n      },\n      metadata: {},\n    };\n  }\n\n  protected render() {\n    let scene;\n\n    if (\"scene\" in this.action) {\n      scene = this.action.scene;\n    } else {\n      scene = this.action.target?.entity_id;\n    }\n\n    return html`\n      <ha-entity-picker\n        .hass=${this.hass}\n        .value=${scene}\n        @value-changed=${this._entityPicked}\n        .includeDomains=${includeDomains}\n        allow-custom-entity\n      ></ha-entity-picker>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        service: \"scene.turn_on\",\n        target: {\n          entity_id: ev.detail.value,\n        },\n        metadata: {},\n      },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-activate_scene\": HaSceneAction;\n  }\n}\n","import { mdiDelete } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { ensureArray } from \"../../../../../common/ensure-array\";\nimport \"../../../../../components/ha-icon-button\";\nimport { Condition } from \"../../../../../data/automation\";\nimport { Action, ChooseAction } from \"../../../../../data/script\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\nimport \"../../../../../components/ha-form/ha-form\";\n\n@customElement(\"ha-automation-action-choose\")\nexport class HaChooseAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: ChooseAction;\n\n  public static get defaultConfig() {\n    return { choose: [{ conditions: [], sequence: [] }], default: [] };\n  }\n\n  protected render() {\n    const action = this.action;\n\n    return html`\n      ${(action.choose ? ensureArray(action.choose) : []).map(\n        (option, idx) => html`<ha-card>\n          <ha-icon-button\n            .idx=${idx}\n            @click=${this._removeOption}\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.type.choose.remove_option\"\n            )}\n            .path=${mdiDelete}\n          ></ha-icon-button>\n          <div class=\"card-content\">\n            <h2>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.option\",\n                \"number\",\n                idx + 1\n              )}:\n            </h2>\n            <h3>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.conditions\"\n              )}:\n            </h3>\n            <ha-automation-condition\n              .conditions=${option.conditions}\n              .hass=${this.hass}\n              .idx=${idx}\n              @value-changed=${this._conditionChanged}\n            ></ha-automation-condition>\n            <h3>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.sequence\"\n              )}:\n            </h3>\n            <ha-form\n              .hass=${this.hass}\n              .schema=${[{ name: \"sequence\", selector: { action: {} } }]}\n              .data=${option}\n              .idx=${idx}\n              @value-changed=${this._actionChanged}\n            ></ha-form>\n          </div>\n        </ha-card>`\n      )}\n      <ha-card outlined>\n        <div class=\"card-actions add-card\">\n          <mwc-button @click=${this._addOption}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.type.choose.add_option\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n      <h2>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.choose.default\"\n        )}:\n      </h2>\n      <ha-automation-action\n        .actions=${action.default || []}\n        @value-changed=${this._defaultChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Condition[];\n    const index = (ev.target as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose[index].conditions = value;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value.sequence as Action[];\n    const index = (ev.target as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose[index].sequence = value;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _addOption() {\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose.push({ conditions: [], sequence: [] });\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _removeOption(ev: CustomEvent) {\n    const index = (ev.currentTarget as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose.splice(index, 1);\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _defaultChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        default: value,\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          margin-top: 16px;\n        }\n        .add-card mwc-button {\n          display: block;\n          text-align: center;\n        }\n        ha-icon-button {\n          position: absolute;\n          right: 0;\n          padding: 4px;\n        }\n        ha-form::part(root) {\n          overflow: visible;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-choose\": HaChooseAction;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/buttons/ha-progress-button\";\nimport type { HaProgressButton } from \"../../../../components/buttons/ha-progress-button\";\nimport \"../../../../components/ha-icon-button\";\nimport { Condition, testCondition } from \"../../../../data/automation\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-condition-editor\";\nimport { validateConfig } from \"../../../../data/config\";\nimport { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\n\nexport interface ConditionElement extends LitElement {\n  condition: Condition;\n}\n\nexport const handleChangeEvent = (\n  element: ConditionElement,\n  ev: CustomEvent\n) => {\n  ev.stopPropagation();\n  const name = (ev.currentTarget as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = ev.detail?.value || (ev.currentTarget as any)?.value;\n\n  if ((element.condition[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newCondition: Condition;\n  if (!newVal) {\n    newCondition = { ...element.condition };\n    delete newCondition[name];\n  } else {\n    newCondition = { ...element.condition, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newCondition });\n};\n\n@customElement(\"ha-automation-condition-row\")\nexport default class HaAutomationConditionRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: Condition;\n\n  @state() private _yamlMode = false;\n\n  @state() private _warnings?: string[];\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  protected render() {\n    if (!this.condition) {\n      return html``;\n    }\n    return html`\n      <ha-card outlined>\n        ${this.condition.enabled === false\n          ? html`<div class=\"disabled-bar\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.disabled\"\n              )}\n            </div>`\n          : \"\"}\n        <div class=\"card-menu\">\n          <ha-progress-button @click=${this._testCondition}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.test\"\n            )}\n          </ha-progress-button>\n          <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            >\n            </ha-icon-button>\n            <mwc-list-item>\n              ${this._yamlMode\n                ? this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_ui\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_yaml\"\n                  )}\n            </mwc-list-item>\n            <mwc-list-item>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.duplicate\"\n              )}\n            </mwc-list-item>\n            <mwc-list-item>\n              ${this.condition.enabled === false\n                ? this.hass.localize(\n                    \"ui.panel.config.automation.editor.actions.enable\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.config.automation.editor.actions.disable\"\n                  )}\n            </mwc-list-item>\n            <mwc-list-item class=\"warning\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.delete\"\n              )}\n            </mwc-list-item>\n          </ha-button-menu>\n        </div>\n        <div\n          class=\"card-content ${this.condition.enabled === false\n            ? \"disabled\"\n            : \"\"}\"\n        >\n          ${this._warnings\n            ? html`<ha-alert\n                alert-type=\"warning\"\n                .title=${this.hass.localize(\n                  \"ui.errors.config.editor_not_supported\"\n                )}\n              >\n                ${this._warnings!.length > 0 && this._warnings![0] !== undefined\n                  ? html` <ul>\n                      ${this._warnings!.map(\n                        (warning) => html`<li>${warning}</li>`\n                      )}\n                    </ul>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.errors.config.edit_in_yaml_supported\")}\n              </ha-alert>`\n            : \"\"}\n          <ha-automation-condition-editor\n            @ui-mode-not-available=${this._handleUiModeNotAvailable}\n            @value-changed=${this._handleChangeEvent}\n            .yamlMode=${this._yamlMode}\n            .hass=${this.hass}\n            .condition=${this.condition}\n          ></ha-automation-condition-editor>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    // Prevent possible parent action-row from switching to yamlMode\n    ev.stopPropagation();\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private _handleChangeEvent(ev: CustomEvent) {\n    if (ev.detail.yaml) {\n      this._warnings = undefined;\n    }\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._switchYamlMode();\n        break;\n      case 1:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 2:\n        this._onDisable();\n        break;\n      case 3:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDisable() {\n    const enabled = !(this.condition.enabled ?? true);\n    const value = { ...this.condition, enabled };\n    fireEvent(this, \"value-changed\", { value });\n    if (this._yamlMode) {\n      this._yamlEditor?.setValue(value);\n    }\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.delete_confirm\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = !this._yamlMode;\n  }\n\n  private async _testCondition(ev) {\n    const condition = this.condition;\n    const button = ev.target as HaProgressButton;\n    if (button.progress) {\n      return;\n    }\n    button.progress = true;\n\n    try {\n      const validateResult = await validateConfig(this.hass, {\n        condition,\n      });\n\n      // Abort if condition changed.\n      if (this.condition !== condition) {\n        return;\n      }\n\n      if (!validateResult.condition.valid) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.invalid_condition\"\n          ),\n          text: validateResult.condition.error,\n        });\n        return;\n      }\n      let result: { result: boolean };\n      try {\n        result = await testCondition(this.hass, condition);\n      } catch (err: any) {\n        if (this.condition !== condition) {\n          return;\n        }\n\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.test_failed\"\n          ),\n          text: err.message,\n        });\n        return;\n      }\n\n      if (this.condition !== condition) {\n        return;\n      }\n\n      if (result.result) {\n        button.actionSuccess();\n      } else {\n        button.actionError();\n      }\n    } finally {\n      button.progress = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .disabled {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n        .card-content {\n          padding-top: 16px;\n          margin-top: 0;\n        }\n        .disabled-bar {\n          background: var(--divider-color, #e0e0e0);\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius);\n          border-top-left-radius: var(--ha-card-border-radius);\n        }\n        .card-menu {\n          float: right;\n          z-index: 3;\n          margin: 4px;\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n        :host-context([style*=\"direction: rtl;\"]) .card-menu {\n          float: left;\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-row\": HaAutomationConditionRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport { Condition } from \"../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-condition-row\";\nimport { HaDeviceCondition } from \"./types/ha-automation-condition-device\";\n\n@customElement(\"ha-automation-condition\")\nexport default class HaAutomationCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public conditions!: Condition[];\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"conditions\")) {\n      return;\n    }\n    let updatedConditions: Condition[] | undefined;\n    if (!Array.isArray(this.conditions)) {\n      updatedConditions = [this.conditions];\n    }\n\n    (updatedConditions || this.conditions).forEach((condition, index) => {\n      if (typeof condition === \"string\") {\n        updatedConditions = updatedConditions || [...this.conditions];\n        updatedConditions[index] = {\n          condition: \"template\",\n          value_template: condition,\n        };\n      }\n    });\n\n    if (updatedConditions) {\n      fireEvent(this, \"value-changed\", {\n        value: updatedConditions,\n      });\n    }\n  }\n\n  protected render() {\n    if (!Array.isArray(this.conditions)) {\n      return html``;\n    }\n    return html`\n      ${this.conditions.map(\n        (cond, idx) => html`\n          <ha-automation-condition-row\n            .index=${idx}\n            .condition=${cond}\n            @duplicate=${this._duplicateCondition}\n            @value-changed=${this._conditionChanged}\n            .hass=${this.hass}\n          ></ha-automation-condition-row>\n        `\n      )}\n      <ha-card outlined>\n        <div class=\"card-actions add-card\">\n          <mwc-button @click=${this._addCondition}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.add\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addCondition() {\n    const conditions = this.conditions.concat({\n      condition: \"device\",\n      ...HaDeviceCondition.defaultConfig,\n    });\n\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const conditions = [...this.conditions];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      conditions.splice(index, 1);\n    } else {\n      conditions[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  private _duplicateCondition(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.conditions.concat(this.conditions[index]),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-condition-row,\n      ha-card {\n        display: block;\n        margin-top: 16px;\n      }\n      .add-card mwc-button {\n        display: block;\n        text-align: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition\": HaAutomationCondition;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { assert, literal, object, optional, string, union } from \"superstruct\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport type { StateCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { forDictStruct } from \"../../structs\";\nimport type { ConditionElement } from \"../ha-automation-condition-row\";\nimport \"../../../../../components/ha-form/ha-form\";\n\nconst stateConditionStruct = object({\n  condition: literal(\"state\"),\n  entity_id: optional(string()),\n  attribute: optional(string()),\n  state: optional(string()),\n  for: optional(union([string(), forDictStruct])),\n});\n\n@customElement(\"ha-automation-condition-state\")\nexport class HaStateCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: StateCondition;\n\n  public static get defaultConfig() {\n    return { entity_id: \"\", state: \"\" };\n  }\n\n  private _schema = memoizeOne((entityId) => [\n    { name: \"entity_id\", required: true, selector: { entity: {} } },\n    {\n      name: \"attribute\",\n      selector: { attribute: { entity_id: entityId } },\n    },\n    { name: \"state\", selector: { text: {} } },\n    { name: \"for\", selector: { duration: {} } },\n  ]);\n\n  public shouldUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"condition\")) {\n      try {\n        assert(this.condition, stateConditionStruct);\n      } catch (e: any) {\n        fireEvent(this, \"ui-mode-not-available\", e);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected render() {\n    const trgFor = createDurationData(this.condition.for);\n    const data = { ...this.condition, for: trgFor };\n    const schema = this._schema(this.condition.entity_id);\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n\n    Object.keys(newTrigger).forEach((key) =>\n      newTrigger[key] === undefined || newTrigger[key] === \"\"\n        ? delete newTrigger[key]\n        : {}\n    );\n\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string => {\n    switch (schema.name) {\n      case \"entity_id\":\n        return this.hass.localize(\"ui.components.entity.entity-picker.entity\");\n      case \"attribute\":\n        return this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        );\n      case \"for\":\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.triggers.type.state.for`\n        );\n      default:\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.conditions.type.state.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-state\": HaStateCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type {\n  Condition,\n  LogicalCondition,\n} from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport \"../ha-automation-condition\";\nimport type { ConditionElement } from \"../ha-automation-condition-row\";\nimport { HaStateCondition } from \"./ha-automation-condition-state\";\n\n@customElement(\"ha-automation-condition-logical\")\nexport class HaLogicalCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: LogicalCondition;\n\n  public static get defaultConfig() {\n    return {\n      conditions: [\n        {\n          condition: \"state\",\n          ...HaStateCondition.defaultConfig,\n        },\n      ] as Condition[],\n    };\n  }\n\n  protected render() {\n    return html`\n      <ha-automation-condition\n        .conditions=${this.condition.conditions || []}\n        @value-changed=${this._valueChanged}\n        .hass=${this.hass}\n      ></ha-automation-condition>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, conditions: ev.detail.value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-logical\": HaLogicalCondition;\n  }\n}\n","import \"../../../../../components/ha-form/ha-form\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport { NumericStateCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-numeric_state\")\nexport default class HaNumericStateCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: NumericStateCondition;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n    };\n  }\n\n  private _schema = memoizeOne((entityId): HaFormSchema[] => [\n    { name: \"entity_id\", required: true, selector: { entity: {} } },\n    {\n      name: \"attribute\",\n      selector: { attribute: { entity_id: entityId } },\n    },\n    { name: \"above\", selector: { text: {} } },\n    { name: \"below\", selector: { text: {} } },\n    {\n      name: \"value_template\",\n      selector: { text: { multiline: true } },\n    },\n  ]);\n\n  public render() {\n    const schema = this._schema(this.condition.entity_id);\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this.condition}\n        .schema=${schema}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string => {\n    switch (schema.name) {\n      case \"entity_id\":\n        return this.hass.localize(\"ui.components.entity.entity-picker.entity\");\n      case \"attribute\":\n        return this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        );\n      default:\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.triggers.type.numeric_state.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-numeric_state\": HaNumericStateCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { SunCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { ConditionElement } from \"../ha-automation-condition-row\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport \"../../../../../components/ha-form/ha-form\";\n\n@customElement(\"ha-automation-condition-sun\")\nexport class HaSunCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: SunCondition;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  private _schema = memoizeOne((localize: LocalizeFunc) => [\n    {\n      name: \"before\",\n      type: \"select\",\n      required: true,\n      options: [\n        [\n          \"sunrise\",\n          localize(\n            \"ui.panel.config.automation.editor.conditions.type.sun.sunrise\"\n          ),\n        ],\n        [\n          \"sunset\",\n          localize(\n            \"ui.panel.config.automation.editor.conditions.type.sun.sunset\"\n          ),\n        ],\n      ],\n    },\n    { name: \"before_offset\", selector: { text: {} } },\n    {\n      name: \"after\",\n      type: \"select\",\n      required: true,\n      options: [\n        [\n          \"sunrise\",\n          localize(\n            \"ui.panel.config.automation.editor.conditions.type.sun.sunrise\"\n          ),\n        ],\n        [\n          \"sunset\",\n          localize(\n            \"ui.panel.config.automation.editor.conditions.type.sun.sunset\"\n          ),\n        ],\n      ],\n    },\n    { name: \"after_offset\", selector: { text: {} } },\n  ]);\n\n  protected render() {\n    const schema = this._schema(this.hass.localize);\n    return html`\n      <ha-form\n        .schema=${schema}\n        .data=${this.condition}\n        .hass=${this.hass}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.conditions.type.sun.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-sun\": HaSunCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../../components/ha-textarea\";\nimport type { TemplateCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-condition-row\";\n\n@customElement(\"ha-automation-condition-template\")\nexport class HaTemplateCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TemplateCondition;\n\n  public static get defaultConfig() {\n    return { value_template: \"\" };\n  }\n\n  protected render() {\n    const { value_template } = this.condition;\n    return html`\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.template.value_template\"\n        )}\n        *\n      </p>\n      <ha-code-editor\n        .name=${\"value_template\"}\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${value_template}\n        autocomplete-entities\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-template\": HaTemplateCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { TimeCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { ConditionElement } from \"../ha-automation-condition-row\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport \"../../../../../components/ha-form/ha-form\";\n\nconst DAYS = {\n  mon: 1,\n  tue: 2,\n  wed: 3,\n  thu: 4,\n  fri: 5,\n  sat: 6,\n  sun: 7,\n};\n\n@customElement(\"ha-automation-condition-time\")\nexport class HaTimeCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TimeCondition;\n\n  @state() private _inputModeBefore?: boolean;\n\n  @state() private _inputModeAfter?: boolean;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  private _schema = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      inputModeAfter?: boolean,\n      inputModeBefore?: boolean\n    ): HaFormSchema[] => {\n      const modeAfterSchema = inputModeAfter\n        ? { name: \"after\", selector: { entity: { domain: \"input_datetime\" } } }\n        : { name: \"after\", selector: { time: {} } };\n\n      const modeBeforeSchema = inputModeBefore\n        ? { name: \"before\", selector: { entity: { domain: \"input_datetime\" } } }\n        : { name: \"before\", selector: { time: {} } };\n\n      return [\n        {\n          name: \"mode_after\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"value\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.time.type_value\"\n              ),\n            ],\n            [\n              \"input\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.time.type_input\"\n              ),\n            ],\n          ],\n        },\n        modeAfterSchema,\n        {\n          name: \"mode_before\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"value\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.time.type_value\"\n              ),\n            ],\n            [\n              \"input\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.time.type_input\"\n              ),\n            ],\n          ],\n        },\n        modeBeforeSchema,\n        {\n          type: \"multi_select\",\n          name: \"weekday\",\n          options: Object.keys(DAYS).map((day) => [\n            day,\n            localize(\n              `ui.panel.config.automation.editor.conditions.type.time.weekdays.${day}`\n            ),\n          ]),\n        },\n      ];\n    }\n  );\n\n  protected render() {\n    const inputModeBefore =\n      this._inputModeBefore ??\n      this.condition.before?.startsWith(\"input_datetime.\");\n    const inputModeAfter =\n      this._inputModeAfter ??\n      this.condition.after?.startsWith(\"input_datetime.\");\n\n    const schema: HaFormSchema[] = this._schema(\n      this.hass.localize,\n      inputModeAfter,\n      inputModeBefore\n    );\n\n    const data = {\n      mode_before: inputModeBefore ? \"input\" : \"value\",\n      mode_after: inputModeAfter ? \"input\" : \"value\",\n      ...this.condition,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    this._inputModeAfter = newValue.mode_after === \"input\";\n    this._inputModeBefore = newValue.mode_before === \"input\";\n\n    delete newValue.mode_after;\n    delete newValue.mode_before;\n\n    Object.keys(newValue).forEach((key) =>\n      newValue[key] === undefined || newValue[key] === \"\"\n        ? delete newValue[key]\n        : {}\n    );\n\n    fireEvent(this, \"value-changed\", { value: newValue });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.conditions.type.time.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-time\": HaTimeCondition;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { ensureArray } from \"../../../../../common/ensure-array\";\nimport \"../../../../../components/ha-select\";\nimport type {\n  AutomationConfig,\n  Trigger,\n  TriggerCondition,\n} from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-trigger\")\nexport class HaTriggerCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TriggerCondition;\n\n  @state() private _triggers: Trigger[] = [];\n\n  private _unsub?: UnsubscribeFunc;\n\n  public static get defaultConfig() {\n    return {\n      id: \"\",\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const details = { callback: (config) => this._automationUpdated(config) };\n    fireEvent(this, \"subscribe-automation-config\", details);\n    this._unsub = (details as any).unsub;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsub) {\n      this._unsub();\n    }\n  }\n\n  protected render() {\n    const { id } = this.condition;\n\n    if (!this._triggers.length) {\n      return this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.type.trigger.no_triggers\"\n      );\n    }\n    return html`<ha-select\n      .label=${this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.type.trigger.id\"\n      )}\n      .value=${id}\n      @selected=${this._triggerPicked}\n    >\n      ${this._triggers.map(\n        (trigger) =>\n          html`\n            <mwc-list-item .value=${trigger.id}> ${trigger.id} </mwc-list-item>\n          `\n      )}\n    </ha-select>`;\n  }\n\n  private _automationUpdated(config?: AutomationConfig) {\n    this._triggers = config?.trigger\n      ? ensureArray(config.trigger).filter((t) => t.id)\n      : [];\n  }\n\n  private _triggerPicked(ev) {\n    ev.stopPropagation();\n    if (!ev.target.value) {\n      return;\n    }\n    const newTrigger = ev.target.value;\n    if (this.condition.id === newTrigger) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, id: newTrigger },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-trigger\": HaTriggerCondition;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../../../common/entity/compute_state_domain\";\nimport { hasLocation } from \"../../../../../common/entity/has_location\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport { ZoneCondition } from \"../../../../../data/automation\";\nimport { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport { HomeAssistant } from \"../../../../../types\";\n\nfunction zoneAndLocationFilter(stateObj) {\n  return hasLocation(stateObj) && computeStateDomain(stateObj) !== \"zone\";\n}\n\nconst includeDomains = [\"zone\"];\n\n@customElement(\"ha-automation-condition-zone\")\nexport class HaZoneCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: ZoneCondition;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n      zone: \"\",\n    };\n  }\n\n  protected render() {\n    const { entity_id, zone } = this.condition;\n    return html`\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.entity\"\n        )}\n        .value=${entity_id}\n        @value-changed=${this._entityPicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .entityFilter=${zoneAndLocationFilter}\n      ></ha-entity-picker>\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.zone\"\n        )}\n        .value=${zone}\n        @value-changed=${this._zonePicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .includeDomains=${includeDomains}\n      ></ha-entity-picker>\n      <label id=\"eventlabel\">\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.event\"\n        )}\n      </label>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, entity_id: ev.detail.value },\n    });\n  }\n\n  private _zonePicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, zone: ev.detail.value },\n    });\n  }\n\n  static styles = css`\n    ha-entity-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-zone\": HaZoneCondition;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-select\";\nimport type { HaSelect } from \"../../../../components/ha-select\";\nimport \"../../../../components/ha-yaml-editor\";\nimport type { Condition } from \"../../../../data/automation\";\nimport { expandConditionWithShorthand } from \"../../../../data/automation\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./types/ha-automation-condition-and\";\nimport \"./types/ha-automation-condition-device\";\nimport \"./types/ha-automation-condition-not\";\nimport \"./types/ha-automation-condition-numeric_state\";\nimport \"./types/ha-automation-condition-or\";\nimport \"./types/ha-automation-condition-state\";\nimport \"./types/ha-automation-condition-sun\";\nimport \"./types/ha-automation-condition-template\";\nimport \"./types/ha-automation-condition-time\";\nimport \"./types/ha-automation-condition-trigger\";\nimport \"./types/ha-automation-condition-zone\";\n\nconst OPTIONS = [\n  \"device\",\n  \"and\",\n  \"or\",\n  \"not\",\n  \"state\",\n  \"numeric_state\",\n  \"sun\",\n  \"template\",\n  \"time\",\n  \"trigger\",\n  \"zone\",\n];\n\n@customElement(\"ha-automation-condition-editor\")\nexport default class HaAutomationConditionEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() condition!: Condition;\n\n  @property() public yamlMode = false;\n\n  private _processedCondition = memoizeOne((condition) =>\n    expandConditionWithShorthand(condition)\n  );\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string][] =>\n      OPTIONS.map(\n        (condition) =>\n          [\n            condition,\n            localize(\n              `ui.panel.config.automation.editor.conditions.type.${condition}.label`\n            ),\n          ] as [string, string]\n      ).sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  protected render() {\n    const condition = this._processedCondition(this.condition);\n    const selected = OPTIONS.indexOf(condition.condition);\n    const yamlMode = this.yamlMode || selected === -1;\n    return html`\n      ${yamlMode\n        ? html`\n            ${selected === -1\n              ? html`\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.conditions.unsupported_condition\",\n                    \"condition\",\n                    condition.condition\n                  )}\n                `\n              : \"\"}\n            <h2>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.edit_yaml\"\n              )}\n            </h2>\n            <ha-yaml-editor\n              .hass=${this.hass}\n              .defaultValue=${this.condition}\n              @value-changed=${this._onYamlChange}\n            ></ha-yaml-editor>\n          `\n        : html`\n            <ha-select\n              .label=${this.hass.localize(\n                \"ui.panel.config.automation.editor.conditions.type_select\"\n              )}\n              .value=${condition.condition}\n              naturalMenuWidth\n              @selected=${this._typeChanged}\n            >\n              ${this._processedTypes(this.hass.localize).map(\n                ([opt, label]) => html`\n                  <mwc-list-item .value=${opt}>${label}</mwc-list-item>\n                `\n              )}\n            </ha-select>\n\n            <div>\n              ${dynamicElement(\n                `ha-automation-condition-${condition.condition}`,\n                { hass: this.hass, condition: condition }\n              )}\n            </div>\n          `}\n    `;\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = (ev.target as HaSelect).value;\n\n    if (!type) {\n      return;\n    }\n\n    const elClass = customElements.get(\n      `ha-automation-condition-${type}`\n    ) as CustomElementConstructor & {\n      defaultConfig: Omit<Condition, \"condition\">;\n    };\n\n    if (type !== this._processedCondition(this.condition).condition) {\n      fireEvent(this, \"value-changed\", {\n        value: {\n          condition: type,\n          ...elClass.defaultConfig,\n        },\n      });\n    }\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    // @ts-ignore\n    fireEvent(this, \"value-changed\", { value: ev.detail.value, yaml: true });\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      ha-select {\n        margin-bottom: 24px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-editor\": HaAutomationConditionEditor;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { Condition } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../condition/ha-automation-condition-editor\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-condition\")\nexport class HaConditionAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: Condition;\n\n  public static get defaultConfig() {\n    return { condition: \"state\" };\n  }\n\n  protected render() {\n    return html`\n      <ha-automation-condition-editor\n        .condition=${this.action}\n        .hass=${this.hass}\n        @value-changed=${this._conditionChanged}\n      ></ha-automation-condition-editor>\n    `;\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    fireEvent(this, \"value-changed\", {\n      value: ev.detail.value,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-condition\": HaConditionAction;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport type { HaDurationData } from \"../../../../../components/ha-duration-input\";\nimport \"../../../../../components/ha-duration-input\";\nimport { DelayAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\n\n@customElement(\"ha-automation-action-delay\")\nexport class HaDelayAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: DelayAction;\n\n  @property() public _timeData?: HaDurationData;\n\n  public static get defaultConfig() {\n    return { delay: \"\" };\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    // Check for templates in action. If found, revert to YAML mode.\n    if (this.action && hasTemplate(this.action)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return;\n    }\n\n    this._timeData = createDurationData(this.action.delay);\n  }\n\n  protected render() {\n    return html`<ha-duration-input\n      .label=${this.hass.localize(\n        `ui.panel.config.automation.editor.actions.type.delay.delay`\n      )}\n      .data=${this._timeData}\n      enableMillisecond\n      @value-changed=${this._valueChanged}\n    ></ha-duration-input>`;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n    if (!value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, delay: value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-delay\": HaDelayAction;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-action-picker\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  DeviceAction,\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  fetchDeviceActionCapabilities,\n} from \"../../../../../data/device_automation\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-action-device_id\")\nexport class HaDeviceAction extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public action!: DeviceAction;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origAction?: DeviceAction;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (action: DeviceAction, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (action[item.name] !== undefined) {\n          extraFieldsData![item.name] = action[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.action.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.device_id.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-action-picker\n        .value=${this.action}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceActionPicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.device_id.action\"\n        )}\n      ></ha-device-action-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this._extraFieldsData(this.action, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.action) {\n      this._origAction = this.action;\n    }\n  }\n\n  protected updated(changedPros) {\n    const prevAction = changedPros.get(\"action\");\n    if (prevAction && !deviceAutomationsEqual(prevAction, this.action)) {\n      this._deviceId = undefined;\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    this._capabilities = this.action.domain\n      ? await fetchDeviceActionCapabilities(this.hass, this.action)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n    if (this._deviceId === undefined) {\n      fireEvent(this, \"value-changed\", {\n        value: HaDeviceAction.defaultConfig,\n      });\n    }\n  }\n\n  private _deviceActionPicked(ev) {\n    ev.stopPropagation();\n    let action = ev.detail.value;\n    if (this._origAction && deviceAutomationsEqual(this._origAction, action)) {\n      action = this._origAction;\n    }\n    fireEvent(this, \"value-changed\", { value: action });\n  }\n\n  private _extraFieldsChanged(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.actions.type.device_id.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n\n  static styles = css`\n    ha-device-picker {\n      display: block;\n      margin-bottom: 16px;\n    }\n    ha-device-action-picker {\n      display: block;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-device_id\": HaDeviceAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport \"../../../../../components/ha-service-picker\";\nimport \"../../../../../components/ha-textfield\";\nimport \"../../../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../../../components/ha-yaml-editor\";\nimport type { EventAction } from \"../../../../../data/script\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement, handleChangeEvent } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-event\")\nexport class HaEventAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: EventAction;\n\n  @query(\"ha-yaml-editor\", true) private _yamlEditor?: HaYamlEditor;\n\n  private _actionData?: EventAction[\"event_data\"];\n\n  public static get defaultConfig(): EventAction {\n    return { event: \"\", event_data: {} };\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    if (this._actionData && this._actionData !== this.action.event_data) {\n      if (this._yamlEditor) {\n        this._yamlEditor.setValue(this.action.event_data);\n      }\n    }\n    this._actionData = this.action.event_data;\n  }\n\n  protected render() {\n    const { event, event_data } = this.action;\n\n    return html`\n      <ha-textfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.event.event\"\n        )}\n        .value=${event}\n        @change=${this._eventChanged}\n      ></ha-textfield>\n      <ha-yaml-editor\n        .hass=${this.hass}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.event.event_data\"\n        )}\n        .name=${\"event_data\"}\n        .defaultValue=${event_data}\n        @value-changed=${this._dataChanged}\n      ></ha-yaml-editor>\n    `;\n  }\n\n  private _dataChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._actionData = ev.detail.value;\n    handleChangeEvent(this, ev);\n  }\n\n  private _eventChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, event: (ev.target as any).value },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-textfield {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-event\": HaEventAction;\n  }\n}\n","import { CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { Action, IfAction } from \"../../../../../data/script\";\nimport { HaDeviceCondition } from \"../../condition/types/ha-automation-condition-device\";\nimport { HaDeviceAction } from \"./ha-automation-action-device_id\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { Condition } from \"../../../../lovelace/common/validate-condition\";\nimport \"../ha-automation-action\";\nimport \"../../../../../components/ha-textfield\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-if\")\nexport class HaIfAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: IfAction;\n\n  public static get defaultConfig() {\n    return {\n      if: [{ ...HaDeviceCondition.defaultConfig, condition: \"device\" }],\n      then: [HaDeviceAction.defaultConfig],\n    };\n  }\n\n  protected render() {\n    const action = this.action;\n\n    return html`\n      <h3>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.if.if\"\n        )}*:\n      </h3>\n      <ha-automation-condition\n        .conditions=${action.if}\n        .hass=${this.hass}\n        @value-changed=${this._ifChanged}\n      ></ha-automation-condition>\n\n      <h3>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.if.then\"\n        )}*:\n      </h3>\n      <ha-automation-action\n        .actions=${action.then}\n        @value-changed=${this._thenChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n\n      <h3>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.if.else\"\n        )}:\n      </h3>\n      <ha-automation-action\n        .actions=${action.else || []}\n        @value-changed=${this._elseChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _ifChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Condition[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        if: value,\n      },\n    });\n  }\n\n  private _thenChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        then: value,\n      },\n    });\n  }\n\n  private _elseChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        else: value,\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-if\": HaIfAction;\n  }\n}\n","import { CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { Action, ParallelAction } from \"../../../../../data/script\";\nimport { HaDeviceAction } from \"./ha-automation-action-device_id\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport \"../ha-automation-action\";\nimport \"../../../../../components/ha-textfield\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-parallel\")\nexport class HaParallelAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: ParallelAction;\n\n  public static get defaultConfig() {\n    return {\n      parallel: [HaDeviceAction.defaultConfig],\n    };\n  }\n\n  protected render() {\n    const action = this.action;\n\n    return html`\n      <ha-automation-action\n        .actions=${action.parallel}\n        @value-changed=${this._actionsChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _actionsChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        parallel: value,\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-parallel\": HaParallelAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-selector/ha-selector-media\";\nimport { PlayMediaAction } from \"../../../../../data/script\";\nimport type { MediaSelectorValue } from \"../../../../../data/selector\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-play_media\")\nexport class HaPlayMediaAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: PlayMediaAction;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  public static get defaultConfig(): PlayMediaAction {\n    return {\n      service: \"media_player.play_media\",\n      target: { entity_id: \"\" },\n      data: { media_content_id: \"\", media_content_type: \"\" },\n      metadata: {},\n    };\n  }\n\n  private _getSelectorValue = memoizeOne(\n    (action: PlayMediaAction): MediaSelectorValue => ({\n      entity_id: action.target?.entity_id || action.entity_id,\n      media_content_id: action.data?.media_content_id,\n      media_content_type: action.data?.media_content_type,\n      metadata: action.metadata,\n    })\n  );\n\n  protected render() {\n    return html`\n      <ha-selector-media\n        .hass=${this.hass}\n        .value=${this._getSelectorValue(this.action)}\n        @value-changed=${this._valueChanged}\n      ></ha-selector-media>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent<{ value: MediaSelectorValue }>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        service: \"media_player.play_media\",\n        target: { entity_id: ev.detail.value.entity_id },\n        data: {\n          media_content_id: ev.detail.value.media_content_id,\n          media_content_type: ev.detail.value.media_content_type,\n        },\n        metadata: ev.detail.value.metadata || {},\n      } as PlayMediaAction,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-play_media\": HaPlayMediaAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport {\n  Action,\n  CountRepeat,\n  RepeatAction,\n  UntilRepeat,\n  WhileRepeat,\n} from \"../../../../../data/script\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { Condition } from \"../../../../lovelace/common/validate-condition\";\nimport \"../ha-automation-action\";\nimport \"../../../../../components/ha-textfield\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\n\nconst OPTIONS = [\"count\", \"while\", \"until\"];\n\nconst getType = (action) => OPTIONS.find((option) => option in action);\n\n@customElement(\"ha-automation-action-repeat\")\nexport class HaRepeatAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: RepeatAction;\n\n  public static get defaultConfig() {\n    return { repeat: { count: 2, sequence: [] } };\n  }\n\n  protected render() {\n    const action = this.action.repeat;\n\n    const type = getType(action);\n\n    return html`\n      <ha-select\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.repeat.type_select\"\n        )}\n        .value=${type}\n        @selected=${this._typeChanged}\n      >\n        ${OPTIONS.map(\n          (opt) => html`\n            <mwc-list-item .value=${opt}>\n              ${this.hass.localize(\n                `ui.panel.config.automation.editor.actions.type.repeat.type.${opt}.label`\n              )}\n            </mwc-list-item>\n          `\n        )}\n      </ha-select>\n      ${type === \"count\"\n        ? html`\n            <ha-textfield\n              .label=${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.repeat.type.count.label\"\n              )}\n              name=\"count\"\n              .value=${(action as CountRepeat).count || \"0\"}\n              @change=${this._countChanged}\n            ></ha-textfield>\n          `\n        : \"\"}\n      ${type === \"while\"\n        ? html` <h3>\n              ${this.hass.localize(\n                `ui.panel.config.automation.editor.actions.type.repeat.type.while.conditions`\n              )}:\n            </h3>\n            <ha-automation-condition\n              .conditions=${(action as WhileRepeat).while || []}\n              .hass=${this.hass}\n              @value-changed=${this._conditionChanged}\n            ></ha-automation-condition>`\n        : \"\"}\n      ${type === \"until\"\n        ? html` <h3>\n              ${this.hass.localize(\n                `ui.panel.config.automation.editor.actions.type.repeat.type.until.conditions`\n              )}:\n            </h3>\n            <ha-automation-condition\n              .conditions=${(action as UntilRepeat).until || []}\n              .hass=${this.hass}\n              @value-changed=${this._conditionChanged}\n            ></ha-automation-condition>`\n        : \"\"}\n      <h3>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.repeat.sequence\"\n        )}:\n      </h3>\n      <ha-automation-action\n        .actions=${action.sequence}\n        @value-changed=${this._actionChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _typeChanged(ev) {\n    const type = ev.target.value;\n\n    if (!type || type === getType(this.action.repeat)) {\n      return;\n    }\n\n    const value = type === \"count\" ? 2 : [];\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        repeat: { [type]: value, sequence: this.action.repeat.sequence },\n      },\n    });\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Condition[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        repeat: {\n          ...this.action.repeat,\n          [getType(this.action.repeat)!]: value,\n        },\n      },\n    });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        repeat: {\n          ...this.action.repeat,\n          sequence: value,\n        },\n      },\n    });\n  }\n\n  private _countChanged(ev: CustomEvent): void {\n    const newVal = (ev.target as any).value;\n    if ((this.action.repeat as CountRepeat).count === newVal) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        repeat: {\n          ...this.action.repeat,\n          count: newVal,\n        },\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-textfield {\n          margin-top: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-repeat\": HaRepeatAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { any, assert, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport { entityIdOrAll } from \"../../../../../common/structs/is-entity-id\";\nimport \"../../../../../components/ha-service-control\";\nimport { ServiceAction } from \"../../../../../data/script\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\nconst actionStruct = object({\n  service: optional(string()),\n  entity_id: optional(entityIdOrAll()),\n  target: optional(any()),\n  data: optional(any()),\n});\n\n@customElement(\"ha-automation-action-service\")\nexport class HaServiceAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: ServiceAction;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _action!: ServiceAction;\n\n  public static get defaultConfig() {\n    return { service: \"\", data: {} };\n  }\n\n  protected willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    try {\n      assert(this.action, actionStruct);\n    } catch (err: any) {\n      fireEvent(this, \"ui-mode-not-available\", err);\n      return;\n    }\n    if (this.action && hasTemplate(this.action)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return;\n    }\n    if (this.action.entity_id) {\n      this._action = {\n        ...this.action,\n        data: { ...this.action.data, entity_id: this.action.entity_id },\n      };\n      delete this._action.entity_id;\n    } else {\n      this._action = this.action;\n    }\n  }\n\n  protected render() {\n    return html`\n      <ha-service-control\n        .narrow=${this.narrow}\n        .hass=${this.hass}\n        .value=${this._action}\n        .showAdvanced=${this.hass.userData?.showAdvanced}\n        @value-changed=${this._actionChanged}\n      ></ha-service-control>\n    `;\n  }\n\n  private _actionChanged(ev) {\n    if (ev.detail.value === this._action) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-service-control {\n        display: block;\n        margin: 0 -16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-service\": HaServiceAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-textfield\";\nimport { StopAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-stop\")\nexport class HaStopAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: StopAction;\n\n  public static get defaultConfig() {\n    return { stop: \"\" };\n  }\n\n  protected render() {\n    const { error, stop } = this.action;\n\n    return html`\n      <ha-textfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.stop.stop\"\n        )}\n        .value=${stop}\n        @change=${this._stopChanged}\n      ></ha-textfield>\n      <ha-formfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.stop.error\"\n        )}\n      >\n        <ha-switch\n          .checked=${error ?? false}\n          @change=${this._errorChanged}\n        ></ha-switch>\n      </ha-formfield>\n    `;\n  }\n\n  private _stopChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, stop: (ev.target as any).value },\n    });\n  }\n\n  private _errorChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, error: (ev.target as any).checked },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-textfield {\n        display: block;\n        margin-bottom: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-stop\": HaStopAction;\n  }\n}\n","import \"../../../../../components/ha-textfield\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-formfield\";\nimport { WaitForTriggerAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../trigger/ha-automation-trigger\";\nimport { ActionElement, handleChangeEvent } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-wait_for_trigger\")\nexport class HaWaitForTriggerAction\n  extends LitElement\n  implements ActionElement\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: WaitForTriggerAction;\n\n  public static get defaultConfig() {\n    return { wait_for_trigger: [] };\n  }\n\n  protected render() {\n    const { wait_for_trigger, continue_on_timeout, timeout } = this.action;\n\n    return html`\n      <ha-textfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_for_trigger.timeout\"\n        )}\n        .name=${\"timeout\"}\n        .value=${timeout || \"\"}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n      <ha-formfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_for_trigger.continue_timeout\"\n        )}\n      >\n        <ha-switch\n          .checked=${continue_on_timeout ?? true}\n          @change=${this._continueChanged}\n        ></ha-switch>\n      </ha-formfield>\n      <ha-automation-trigger\n        .triggers=${wait_for_trigger}\n        .hass=${this.hass}\n        .name=${\"wait_for_trigger\"}\n        @value-changed=${this._valueChanged}\n      ></ha-automation-trigger>\n    `;\n  }\n\n  private _continueChanged(ev) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, continue_on_timeout: ev.target.checked },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-textfield {\n        display: block;\n        margin-bottom: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-wait_for_trigger\": HaWaitForTriggerAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport type { WaitAction } from \"../../../../../data/script\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\nimport \"../../../../../components/ha-form/ha-form\";\n\nconst SCHEMA: HaFormSchema[] = [\n  {\n    name: \"wait_template\",\n    selector: {\n      template: {},\n    },\n  },\n  {\n    name: \"timeout\",\n    required: false,\n    selector: {\n      text: {},\n    },\n  },\n  {\n    name: \"continue_on_timeout\",\n    selector: { boolean: {} },\n  },\n];\n\n@customElement(\"ha-automation-action-wait_template\")\nexport class HaWaitAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: WaitAction;\n\n  public static get defaultConfig() {\n    return { wait_template: \"\", continue_on_timeout: true };\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this.action}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.actions.type.wait_template.${\n        schema.name === \"continue_on_timeout\" ? \"continue_timeout\" : schema.name\n      }`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-wait_template\": HaWaitAction;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-condition-picker\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  DeviceCondition,\n  fetchDeviceConditionCapabilities,\n} from \"../../../../../data/device_automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-device\")\nexport class HaDeviceCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public condition!: DeviceCondition;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origCondition?: DeviceCondition;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (condition: DeviceCondition, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (condition[item.name] !== undefined) {\n          extraFieldsData![item.name] = condition[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.condition.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.device.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-condition-picker\n        .value=${this.condition}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceConditionPicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.device.condition\"\n        )}\n      ></ha-device-condition-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this._extraFieldsData(this.condition, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.condition) {\n      this._origCondition = this.condition;\n    }\n  }\n\n  protected updated(changedPros) {\n    const prevCondition = changedPros.get(\"condition\");\n    if (\n      prevCondition &&\n      !deviceAutomationsEqual(prevCondition, this.condition)\n    ) {\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    const condition = this.condition;\n\n    this._capabilities = condition.domain\n      ? await fetchDeviceConditionCapabilities(this.hass, condition)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n    if (this._deviceId === undefined) {\n      fireEvent(this, \"value-changed\", {\n        value: { ...HaDeviceCondition.defaultConfig, condition: \"device\" },\n      });\n    }\n  }\n\n  private _deviceConditionPicked(ev) {\n    ev.stopPropagation();\n    let condition = ev.detail.value;\n    if (\n      this._origCondition &&\n      deviceAutomationsEqual(this._origCondition, condition)\n    ) {\n      condition = this._origCondition;\n    }\n    fireEvent(this, \"value-changed\", { value: condition });\n  }\n\n  private _extraFieldsChanged(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.condition,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.conditions.type.device.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n\n  static styles = css`\n    ha-device-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-device\": HaDeviceCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { CalendarTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\n\n@customElement(\"ha-automation-trigger-calendar\")\nexport class HaCalendarTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: CalendarTrigger;\n\n  private _schema = memoizeOne((localize: LocalizeFunc) => [\n    {\n      name: \"entity_id\",\n      required: true,\n      selector: { entity: { domain: \"calendar\" } },\n    },\n    {\n      name: \"event\",\n      type: \"select\",\n      required: true,\n      options: [\n        [\n          \"start\",\n          localize(\n            \"ui.panel.config.automation.editor.triggers.type.calendar.start\"\n          ),\n        ],\n        [\n          \"end\",\n          localize(\n            \"ui.panel.config.automation.editor.triggers.type.calendar.end\"\n          ),\n        ],\n      ],\n    },\n  ]);\n\n  public static get defaultConfig() {\n    return {\n      event: \"start\" as CalendarTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    const schema = this._schema(this.hass.localize);\n    return html`\n      <ha-form\n        .schema=${schema}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.calendar.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-calendar\": HaCalendarTrigger;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/device/ha-device-trigger-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  DeviceTrigger,\n  fetchDeviceTriggerCapabilities,\n} from \"../../../../../data/device_automation\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-trigger-device\")\nexport class HaDeviceTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public trigger!: DeviceTrigger;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origTrigger?: DeviceTrigger;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (trigger: DeviceTrigger, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (trigger[item.name] !== undefined) {\n          extraFieldsData![item.name] = trigger[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.trigger.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.device.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-trigger-picker\n        .value=${this.trigger}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceTriggerPicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.device.trigger\"\n        )}\n      ></ha-device-trigger-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this._extraFieldsData(this.trigger, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.trigger) {\n      this._origTrigger = this.trigger;\n    }\n  }\n\n  protected updated(changedPros) {\n    if (!changedPros.has(\"trigger\")) {\n      return;\n    }\n    const prevTrigger = changedPros.get(\"trigger\");\n    if (prevTrigger && !deviceAutomationsEqual(prevTrigger, this.trigger)) {\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    const trigger = this.trigger;\n\n    this._capabilities = trigger.domain\n      ? await fetchDeviceTriggerCapabilities(this.hass, trigger)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n    if (this._deviceId === undefined) {\n      fireEvent(this, \"value-changed\", {\n        value: { ...HaDeviceTrigger.defaultConfig, platform: \"device\" },\n      });\n    }\n  }\n\n  private _deviceTriggerPicked(ev) {\n    ev.stopPropagation();\n    let trigger = ev.detail.value;\n    if (\n      this._origTrigger &&\n      deviceAutomationsEqual(this._origTrigger, trigger)\n    ) {\n      trigger = this._origTrigger;\n    }\n    if (this.trigger.id) {\n      trigger.id = this.trigger.id;\n    }\n    fireEvent(this, \"value-changed\", { value: trigger });\n  }\n\n  private _extraFieldsChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.triggers.type.device.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n\n  static styles = css`\n    ha-device-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-device\": HaDeviceTrigger;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeUserInitials, User } from \"../../data/user\";\nimport { CurrentUser, HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-user-badge\")\nclass UserBadge extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public user?: User | CurrentUser;\n\n  @state() private _personPicture?: string;\n\n  private _personEntityId?: string;\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"user\")) {\n      this._getPersonPicture();\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (\n      this._personEntityId &&\n      oldHass &&\n      this.hass.states[this._personEntityId] !==\n        oldHass.states[this._personEntityId]\n    ) {\n      const entityState = this.hass.states[this._personEntityId];\n      if (entityState) {\n        this._personPicture = entityState.attributes.entity_picture;\n      } else {\n        this._getPersonPicture();\n      }\n    } else if (!this._personEntityId && oldHass) {\n      this._getPersonPicture();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.user) {\n      return html``;\n    }\n    const picture = this._personPicture;\n\n    if (picture) {\n      return html`<div\n        style=${styleMap({ backgroundImage: `url(${picture})` })}\n        class=\"picture\"\n      ></div>`;\n    }\n    const initials = computeUserInitials(this.user.name);\n    return html`<div\n      class=\"initials ${classMap({ long: initials!.length > 2 })}\"\n    >\n      ${initials}\n    </div>`;\n  }\n\n  private _getPersonPicture() {\n    this._personEntityId = undefined;\n    this._personPicture = undefined;\n    if (!this.hass || !this.user) {\n      return;\n    }\n    for (const entity of Object.values(this.hass.states)) {\n      if (\n        entity.attributes.user_id === this.user.id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._personEntityId = entity.entity_id;\n        this._personPicture = entity.attributes.entity_picture;\n        break;\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: contents;\n      }\n      .picture {\n        width: 40px;\n        height: 40px;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-badge\": UserBadge;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport { fetchUsers, User } from \"../../data/user\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-select\";\nimport \"./ha-user-badge\";\n\nclass HaUserPicker extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public noUserLabel?: string;\n\n  @property() public value = \"\";\n\n  @property() public users?: User[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  private _sortedUsers = memoizeOne((users?: User[]) => {\n    if (!users) {\n      return [];\n    }\n\n    return users\n      .filter((user) => !user.system_generated)\n      .sort((a, b) => stringCompare(a.name, b.name));\n  });\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-select\n        .label=${this.label}\n        .disabled=${this.disabled}\n        .value=${this.value}\n        @selected=${this._userChanged}\n      >\n        ${this.users?.length === 0\n          ? html`<mwc-list-item value=\"\">\n              ${this.noUserLabel ||\n              this.hass?.localize(\"ui.components.user-picker.no_user\")}\n            </mwc-list-item>`\n          : \"\"}\n        ${this._sortedUsers(this.users).map(\n          (user) => html`\n            <mwc-list-item graphic=\"avatar\" .value=${user.id}>\n              <ha-user-badge\n                .hass=${this.hass}\n                .user=${user}\n                slot=\"graphic\"\n              ></ha-user-badge>\n              ${user.name}\n            </mwc-list-item>\n          `\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (this.users === undefined) {\n      fetchUsers(this.hass!).then((users) => {\n        this.users = users;\n      });\n    }\n  }\n\n  private _userChanged(ev) {\n    const newValue = ev.target.value;\n\n    if (newValue !== this.value) {\n      this.value = newValue;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: newValue });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n      }\n      mwc-list {\n        display: block;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-user-picker\", HaUserPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-picker\": HaUserPicker;\n  }\n}\n","import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { guard } from \"lit/directives/guard\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { fetchUsers, User } from \"../../data/user\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"./ha-user-picker\";\n\n@customElement(\"ha-users-picker\")\nclass HaUsersPickerLight extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string[];\n\n  @property({ attribute: \"picked-user-label\" })\n  public pickedUserLabel?: string;\n\n  @property({ attribute: \"pick-user-label\" })\n  public pickUserLabel?: string;\n\n  @property({ attribute: false })\n  public users?: User[];\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (this.users === undefined) {\n      fetchUsers(this.hass!).then((users) => {\n        this.users = users;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.users) {\n      return html``;\n    }\n\n    const notSelectedUsers = this._notSelectedUsers(this.users, this.value);\n    return html`\n      ${guard([notSelectedUsers], () =>\n        this.value?.map(\n          (user_id, idx) => html`\n            <div>\n              <ha-user-picker\n                .label=${this.pickedUserLabel}\n                .noUserLabel=${this.hass!.localize(\n                  \"ui.components.user-picker.remove_user\"\n                )}\n                .index=${idx}\n                .hass=${this.hass}\n                .value=${user_id}\n                .users=${this._notSelectedUsersAndSelected(\n                  user_id,\n                  this.users,\n                  notSelectedUsers\n                )}\n                @value-changed=${this._userChanged}\n              ></ha-user-picker>\n              <ha-icon-button\n                .userId=${user_id}\n                .label=${this.hass!.localize(\n                  \"ui.components.user-picker.remove_user\"\n                )}\n                .path=${mdiClose}\n                @click=${this._removeUser}\n              >\n                ></ha-icon-button\n              >\n            </div>\n          `\n        )\n      )}\n      <ha-user-picker\n        .label=${this.pickUserLabel ||\n        this.hass!.localize(\"ui.components.user-picker.add_user\")}\n        .hass=${this.hass}\n        .users=${notSelectedUsers}\n        .disabled=${!notSelectedUsers?.length}\n        @value-changed=${this._addUser}\n      ></ha-user-picker>\n    `;\n  }\n\n  private _notSelectedUsers = memoizeOne(\n    (users?: User[], currentUsers?: string[]) =>\n      currentUsers\n        ? users?.filter(\n            (user) => !user.system_generated && !currentUsers.includes(user.id)\n          )\n        : users?.filter((user) => !user.system_generated)\n  );\n\n  private _notSelectedUsersAndSelected = (\n    userId: string,\n    users?: User[],\n    notSelected?: User[]\n  ) => {\n    const selectedUser = users?.find((user) => user.id === userId);\n    if (selectedUser) {\n      return notSelected ? [...notSelected, selectedUser] : [selectedUser];\n    }\n    return notSelected;\n  };\n\n  private get _currentUsers() {\n    return this.value || [];\n  }\n\n  private async _updateUsers(users) {\n    this.value = users;\n    fireEvent(this, \"value-changed\", {\n      value: users,\n    });\n  }\n\n  private _userChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const index = (event.currentTarget as any).index;\n    const newValue = event.detail.value;\n    const newUsers = [...this._currentUsers];\n    if (newValue === \"\") {\n      newUsers.splice(index, 1);\n    } else {\n      newUsers.splice(index, 1, newValue);\n    }\n    this._updateUsers(newUsers);\n  }\n\n  private async _addUser(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentUsers = this._currentUsers;\n    if (currentUsers.includes(toAdd)) {\n      return;\n    }\n\n    this._updateUsers([...currentUsers, toAdd]);\n  }\n\n  private _removeUser(event) {\n    const userId = (event.currentTarget as any).userId;\n    this._updateUsers(this._currentUsers.filter((user) => user !== userId));\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      div {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-users-picker\": HaUsersPickerLight;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-textfield\";\nimport \"../../../../../components/ha-yaml-editor\";\nimport \"../../../../../components/user/ha-users-picker\";\nimport { EventTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport {\n  handleChangeEvent,\n  TriggerElement,\n} from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-event\")\nexport class HaEventTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: EventTrigger;\n\n  public static get defaultConfig() {\n    return { event_type: \"\" };\n  }\n\n  protected render() {\n    const { event_type, event_data, context } = this.trigger;\n    return html`\n      <ha-textfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.event_type\"\n        )}\n        name=\"event_type\"\n        .value=${event_type}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n      <ha-yaml-editor\n        .hass=${this.hass}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.event_data\"\n        )}\n        .name=${\"event_data\"}\n        .defaultValue=${event_data}\n        @value-changed=${this._dataChanged}\n      ></ha-yaml-editor>\n      <br />\n      ${this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.type.event.context_users\"\n      )}\n      <ha-users-picker\n        .pickedUserLabel=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.context_user_picked\"\n        )}\n        .pickUserLabel=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.context_user_pick\"\n        )}\n        .hass=${this.hass}\n        .value=${this._wrapUsersInArray(context?.user_id)}\n        @value-changed=${this._usersChanged}\n      ></ha-users-picker>\n    `;\n  }\n\n  private _wrapUsersInArray(user_id: string | string[] | undefined): string[] {\n    if (!user_id) {\n      return [];\n    }\n    if (typeof user_id === \"string\") {\n      return [user_id];\n    }\n    return user_id;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    handleChangeEvent(this, ev);\n  }\n\n  private _dataChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    handleChangeEvent(this, ev);\n  }\n\n  private _usersChanged(ev) {\n    ev.stopPropagation();\n    const value = { ...this.trigger };\n    if (!ev.detail.value.length && value.context) {\n      delete value.context.user_id;\n    } else {\n      if (!value.context) {\n        value.context = {};\n      }\n      value.context.user_id = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-textfield {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-event\": HaEventTrigger;\n  }\n}\n","import \"../../../../../components/ha-form/ha-form\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport type { GeoLocationTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\n\n@customElement(\"ha-automation-trigger-geo_location\")\nexport class HaGeolocationTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: GeoLocationTrigger;\n\n  private _schema = memoizeOne((localize: LocalizeFunc) => [\n    { name: \"source\", selector: { text: {} } },\n    { name: \"zone\", selector: { entity: { domain: \"zone\" } } },\n    {\n      name: \"event\",\n      type: \"select\",\n      required: true,\n      options: [\n        [\n          \"enter\",\n          localize(\n            \"ui.panel.config.automation.editor.triggers.type.geo_location.enter\"\n          ),\n        ],\n        [\n          \"leave\",\n          localize(\n            \"ui.panel.config.automation.editor.triggers.type.geo_location.leave\"\n          ),\n        ],\n      ],\n    },\n  ]);\n\n  public static get defaultConfig() {\n    return {\n      source: \"\",\n      zone: \"\",\n      event: \"enter\" as GeoLocationTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .schema=${this._schema(this.hass.localize)}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.geo_location.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-geo_location\": HaGeolocationTrigger;\n  }\n}\n","import \"../../../../../components/ha-form/ha-form\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { HassTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\n\n@customElement(\"ha-automation-trigger-homeassistant\")\nexport class HaHassTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: HassTrigger;\n\n  private _schema = memoizeOne((localize: LocalizeFunc) => [\n    {\n      name: \"event\",\n      type: \"select\",\n      required: true,\n      options: [\n        [\n          \"start\",\n          localize(\n            \"ui.panel.config.automation.editor.triggers.type.homeassistant.start\"\n          ),\n        ],\n        [\n          \"shutdown\",\n          localize(\n            \"ui.panel.config.automation.editor.triggers.type.homeassistant.shutdown\"\n          ),\n        ],\n      ],\n    },\n  ]);\n\n  public static get defaultConfig() {\n    return {\n      event: \"start\" as HassTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .schema=${this._schema(this.hass.localize)}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.geo_location.${schema.name}`\n    );\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-homeassistant\": HaHassTrigger;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport { MqttTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\n\nconst SCHEMA: HaFormSchema[] = [\n  { name: \"topic\", required: true, selector: { text: {} } },\n  { name: \"payload\", selector: { text: {} } },\n];\n\n@customElement(\"ha-automation-trigger-mqtt\")\nexport class HaMQTTTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: MqttTrigger;\n\n  public static get defaultConfig() {\n    return { topic: \"\" };\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .schema=${SCHEMA}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.mqtt.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-mqtt\": HaMQTTTrigger;\n  }\n}\n","import \"../../../../../components/ha-form/ha-form\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport type { NumericStateTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-trigger-numeric_state\")\nexport class HaNumericStateTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: NumericStateTrigger;\n\n  private _schema = memoizeOne((entityId): HaFormSchema[] => [\n    { name: \"entity_id\", required: true, selector: { entity: {} } },\n    {\n      name: \"attribute\",\n      selector: { attribute: { entity_id: entityId } },\n    },\n    { name: \"above\", selector: { text: {} } },\n    { name: \"below\", selector: { text: {} } },\n    {\n      name: \"value_template\",\n      selector: { text: { multiline: true } },\n    },\n    { name: \"for\", selector: { duration: {} } },\n  ]);\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return;\n    }\n    // Check for templates in trigger. If found, revert to YAML mode.\n    if (this.trigger && hasTemplate(this.trigger)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n    }\n  }\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n    };\n  }\n\n  public render() {\n    const trgFor = createDurationData(this.trigger.for);\n\n    const data = { ...this.trigger, for: trgFor };\n    const schema = this._schema(this.trigger.entity_id);\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string => {\n    switch (schema.name) {\n      case \"entity_id\":\n        return this.hass.localize(\"ui.components.entity.entity-picker.entity\");\n      case \"attribute\":\n        return this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        );\n      case \"for\":\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.triggers.type.state.for`\n        );\n      default:\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.triggers.type.numeric_state.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-numeric_state\": HaNumericStateTrigger;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport {\n  array,\n  assert,\n  assign,\n  literal,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../../../../common/ensure-array\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport { StateTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { baseTriggerStruct, forDictStruct } from \"../../structs\";\nimport { TriggerElement } from \"../ha-automation-trigger-row\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { HaFormSchema } from \"../../../../../components/ha-form/types\";\n\nconst stateTriggerStruct = assign(\n  baseTriggerStruct,\n  object({\n    platform: literal(\"state\"),\n    entity_id: optional(union([string(), array(string())])),\n    attribute: optional(string()),\n    from: optional(string()),\n    to: optional(string()),\n    for: optional(union([string(), forDictStruct])),\n  })\n);\n\n@customElement(\"ha-automation-trigger-state\")\nexport class HaStateTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: StateTrigger;\n\n  public static get defaultConfig() {\n    return { entity_id: [] };\n  }\n\n  private _schema = memoizeOne((entityId) => [\n    {\n      name: \"entity_id\",\n      required: true,\n      selector: { entity: { multiple: true } },\n    },\n    {\n      name: \"attribute\",\n      selector: { attribute: { entity_id: entityId } },\n    },\n    { name: \"from\", selector: { text: {} } },\n    { name: \"to\", selector: { text: {} } },\n    { name: \"for\", selector: { duration: {} } },\n  ]);\n\n  public shouldUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return true;\n    }\n    if (\n      this.trigger.for &&\n      typeof this.trigger.for === \"object\" &&\n      this.trigger.for.milliseconds === 0\n    ) {\n      delete this.trigger.for.milliseconds;\n    }\n    // Check for templates in trigger. If found, revert to YAML mode.\n    if (this.trigger && hasTemplate(this.trigger)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return false;\n    }\n    try {\n      assert(this.trigger, stateTriggerStruct);\n    } catch (e: any) {\n      fireEvent(this, \"ui-mode-not-available\", e);\n      return false;\n    }\n    return true;\n  }\n\n  protected render() {\n    const trgFor = createDurationData(this.trigger.for);\n\n    const data = {\n      ...this.trigger,\n      entity_id: ensureArray(this.trigger.entity_id),\n      for: trgFor,\n    };\n    const schema = this._schema(this.trigger.entity_id);\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n\n    Object.keys(newTrigger).forEach((key) =>\n      newTrigger[key] === undefined || newTrigger[key] === \"\"\n        ? delete newTrigger[key]\n        : {}\n    );\n\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      schema.name === \"entity_id\"\n        ? \"ui.components.entity.entity-picker.entity\"\n        : `ui.panel.config.automation.editor.triggers.type.state.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-state\": HaStateTrigger;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { SunTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\n\n@customElement(\"ha-automation-trigger-sun\")\nexport class HaSunTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: SunTrigger;\n\n  private _schema = memoizeOne((localize: LocalizeFunc) => [\n    {\n      name: \"event\",\n      type: \"select\",\n      required: true,\n      options: [\n        [\n          \"sunrise\",\n          localize(\n            \"ui.panel.config.automation.editor.triggers.type.sun.sunrise\"\n          ),\n        ],\n        [\n          \"sunset\",\n          localize(\n            \"ui.panel.config.automation.editor.triggers.type.sun.sunset\"\n          ),\n        ],\n      ],\n    },\n    { name: \"offset\", selector: { text: {} } },\n  ]);\n\n  public static get defaultConfig() {\n    return {\n      event: \"sunrise\" as SunTrigger[\"event\"],\n      offset: 0,\n    };\n  }\n\n  protected render() {\n    const schema = this._schema(this.hass.localize);\n    return html`\n      <ha-form\n        .schema=${schema}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.sun.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-sun\": HaSunTrigger;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { caseInsensitiveStringCompare } from \"../../../../../common/string/compare\";\nimport \"../../../../../components/ha-select\";\nimport { TagTrigger } from \"../../../../../data/automation\";\nimport { fetchTags, Tag } from \"../../../../../data/tag\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { TriggerElement } from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-tag\")\nexport class HaTagTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: TagTrigger;\n\n  @state() private _tags: Tag[] = [];\n\n  public static get defaultConfig() {\n    return { tag_id: \"\" };\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._fetchTags();\n  }\n\n  protected render() {\n    const { tag_id } = this.trigger;\n    return html`\n      <ha-select\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.tag.label\"\n        )}\n        .disabled=${this._tags.length === 0}\n        .value=${tag_id}\n        @selected=${this._tagChanged}\n      >\n        ${this._tags.map(\n          (tag) => html`\n            <mwc-list-item .value=${tag.id}>\n              ${tag.name || tag.id}\n            </mwc-list-item>\n          `\n        )}\n      </ha-select>\n    `;\n  }\n\n  private async _fetchTags() {\n    this._tags = await fetchTags(this.hass);\n    this._tags.sort((a, b) =>\n      caseInsensitiveStringCompare(a.name || a.id, b.name || b.id)\n    );\n  }\n\n  private _tagChanged(ev) {\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        tag_id: ev.target.value,\n      },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-tag\": HaTagTrigger;\n  }\n}\n","import \"../../../../../components/ha-textarea\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { TemplateTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-template\")\nexport class HaTemplateTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: TemplateTrigger;\n\n  public static get defaultConfig() {\n    return { value_template: \"\" };\n  }\n\n  protected render() {\n    const { value_template } = this.trigger;\n    return html`\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.template.value_template\"\n        )}\n        *\n      </p>\n      <ha-code-editor\n        .name=${\"value_template\"}\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${value_template}\n        autocomplete-entities\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-template\": HaTemplateTrigger;\n  }\n}\n","import memoizeOne from \"memoize-one\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { TimeTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-form/ha-form\";\n\n@customElement(\"ha-automation-trigger-time\")\nexport class HaTimeTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: TimeTrigger;\n\n  @state() private _inputMode?: boolean;\n\n  public static get defaultConfig() {\n    return { at: \"\" };\n  }\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc, inputMode?: boolean): HaFormSchema[] => {\n      const atSelector = inputMode\n        ? { entity: { domain: \"input_datetime\" } }\n        : { time: {} };\n\n      return [\n        {\n          name: \"mode\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"value\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.time.type_value\"\n              ),\n            ],\n            [\n              \"input\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.time.type_input\"\n              ),\n            ],\n          ],\n        },\n        { name: \"at\", selector: atSelector },\n      ];\n    }\n  );\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return;\n    }\n    // We dont support multiple times atm.\n    if (this.trigger && Array.isArray(this.trigger.at)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.editor_not_supported\"))\n      );\n    }\n  }\n\n  protected render() {\n    const at = this.trigger.at;\n\n    if (Array.isArray(at)) {\n      return html``;\n    }\n\n    const inputMode =\n      this._inputMode ??\n      (at?.startsWith(\"input_datetime.\") || at?.startsWith(\"sensor.\"));\n\n    const schema: HaFormSchema[] = this._schema(this.hass.localize, inputMode);\n\n    const data = {\n      mode: inputMode ? \"input\" : \"value\",\n      ...this.trigger,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    this._inputMode = newValue.mode === \"input\";\n    delete newValue.mode;\n\n    Object.keys(newValue).forEach((key) =>\n      newValue[key] === undefined || newValue[key] === \"\"\n        ? delete newValue[key]\n        : {}\n    );\n\n    fireEvent(this, \"value-changed\", { value: newValue });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.time.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-time\": HaTimeTrigger;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { HaFormSchema } from \"../../../../../components/ha-form/types\";\nimport type { TimePatternTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\n\nconst SCHEMA: HaFormSchema[] = [\n  { name: \"hours\", selector: { text: {} } },\n  { name: \"minutes\", selector: { text: {} } },\n  { name: \"seconds\", selector: { text: {} } },\n];\n\n@customElement(\"ha-automation-trigger-time_pattern\")\nexport class HaTimePatternTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: TimePatternTrigger;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .schema=${SCHEMA}\n        .data=${this.trigger}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (schema: HaFormSchema): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.time_pattern.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-time_pattern\": HaTimePatternTrigger;\n  }\n}\n","import \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-textfield\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { slugify } from \"../../../../../common/string/slugify\";\nimport { copyToClipboard } from \"../../../../../common/util/copy-clipboard\";\nimport type { HaTextField } from \"../../../../../components/ha-textfield\";\nimport { showToast } from \"../../../../../util/toast\";\nimport {\n  WebhookTrigger,\n  AutomationConfig,\n} from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-trigger-row\";\n\nconst DEFAULT_WEBHOOK_ID = \"\";\n\n@customElement(\"ha-automation-trigger-webhook\")\nexport class HaWebhookTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: WebhookTrigger;\n\n  @state() private _config?: AutomationConfig;\n\n  private _unsub?: UnsubscribeFunc;\n\n  public static get defaultConfig() {\n    return {\n      webhook_id: DEFAULT_WEBHOOK_ID,\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const details = {\n      callback: (config) => {\n        this._config = config;\n      },\n    };\n    fireEvent(this, \"subscribe-automation-config\", details);\n    this._unsub = (details as any).unsub;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsub) {\n      this._unsub();\n    }\n  }\n\n  private _generateWebhookId(): string {\n    // The webhook_id should be treated like a password. Generate a default\n    // value that would be hard for someone to guess. This generates a\n    // 144-bit random value. The output is a 24 character url-safe string.\n    const randomBytes = crypto.getRandomValues(new Uint8Array(18));\n    const base64Str = btoa(String.fromCharCode(...randomBytes));\n    const urlSafeId = base64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n\n    // Include the automation name to give the user context about what the\n    // webhook_id is used for.\n    const urlSafeAlias = slugify(this._config?.alias || \"\", \"-\");\n\n    return `${urlSafeAlias}-${urlSafeId}`;\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    if (changedProperties.has(\"trigger\")) {\n      if (this.trigger.webhook_id === DEFAULT_WEBHOOK_ID) {\n        this.trigger.webhook_id = this._generateWebhookId();\n      }\n    }\n  }\n\n  protected render() {\n    const { webhook_id: webhookId } = this.trigger;\n\n    return html`\n      <ha-textfield\n        name=\"webhook_id\"\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.webhook.webhook_id\"\n        )}\n        .helper=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.webhook.webhook_id_helper\"\n        )}\n        iconTrailing\n        .value=${webhookId || \"\"}\n        @input=${this._valueChanged}\n      >\n        <ha-icon-button\n          @click=${this._copyUrl}\n          slot=\"trailingIcon\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.webhook.copy_url\"\n          )}\n          .path=${mdiContentCopy}\n        ></ha-icon-button>\n      </ha-textfield>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  private async _copyUrl(ev): Promise<void> {\n    const inputElement = ev.target.parentElement as HaTextField;\n    const url = this.hass.hassUrl(`/api/webhook/${inputElement.value}`);\n\n    await copyToClipboard(url);\n    showToast(this, {\n      message: this.hass.localize(\"ui.common.copied_clipboard\"),\n    });\n  }\n\n  static styles = css`\n    ha-textfield {\n      display: block;\n    }\n\n    ha-textfield > ha-icon-button {\n      --mdc-icon-button-size: 24px;\n      --mdc-icon-size: 18px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-webhook\": HaWebhookTrigger;\n  }\n}\n","import \"../../../../../components/entity/ha-entity-picker\";\nimport \"../../../../../components/ha-formfield\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../../../common/entity/compute_state_domain\";\nimport { hasLocation } from \"../../../../../common/entity/has_location\";\nimport type { ZoneTrigger } from \"../../../../../data/automation\";\nimport type { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { HaRadio } from \"../../../../../components/ha-radio\";\n\nfunction zoneAndLocationFilter(stateObj) {\n  return hasLocation(stateObj) && computeStateDomain(stateObj) !== \"zone\";\n}\n\nconst includeDomains = [\"zone\"];\n\n@customElement(\"ha-automation-trigger-zone\")\nexport class HaZoneTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: ZoneTrigger;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n      zone: \"\",\n      event: \"enter\" as ZoneTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    const { entity_id, zone, event } = this.trigger;\n    return html`\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.entity\"\n        )}\n        .value=${entity_id}\n        @value-changed=${this._entityPicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .entityFilter=${zoneAndLocationFilter}\n      ></ha-entity-picker>\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.zone\"\n        )}\n        .value=${zone}\n        @value-changed=${this._zonePicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .includeDomains=${includeDomains}\n      ></ha-entity-picker>\n\n      <label>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.event\"\n        )}\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.zone.enter\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"enter\"\n            .checked=${event === \"enter\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.zone.leave\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"leave\"\n            .checked=${event === \"leave\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n      </label>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.trigger, entity_id: ev.detail.value },\n    });\n  }\n\n  private _zonePicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.trigger, zone: ev.detail.value },\n    });\n  }\n\n  private _radioGroupPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        event: (ev.target as HaRadio).value,\n      },\n    });\n  }\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n    ha-entity-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-zone\": HaZoneTrigger;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport { debounce } from \"../../../../common/util/debounce\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\nimport \"../../../../components/ha-select\";\nimport type { HaSelect } from \"../../../../components/ha-select\";\nimport \"../../../../components/ha-textfield\";\nimport { subscribeTrigger, Trigger } from \"../../../../data/automation\";\nimport { validateConfig } from \"../../../../data/config\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./types/ha-automation-trigger-calendar\";\nimport \"./types/ha-automation-trigger-device\";\nimport \"./types/ha-automation-trigger-event\";\nimport \"./types/ha-automation-trigger-geo_location\";\nimport \"./types/ha-automation-trigger-homeassistant\";\nimport \"./types/ha-automation-trigger-mqtt\";\nimport \"./types/ha-automation-trigger-numeric_state\";\nimport \"./types/ha-automation-trigger-state\";\nimport \"./types/ha-automation-trigger-sun\";\nimport \"./types/ha-automation-trigger-tag\";\nimport \"./types/ha-automation-trigger-template\";\nimport \"./types/ha-automation-trigger-time\";\nimport \"./types/ha-automation-trigger-time_pattern\";\nimport \"./types/ha-automation-trigger-webhook\";\nimport \"./types/ha-automation-trigger-zone\";\n\nconst OPTIONS = [\n  \"calendar\",\n  \"device\",\n  \"event\",\n  \"state\",\n  \"geo_location\",\n  \"homeassistant\",\n  \"mqtt\",\n  \"numeric_state\",\n  \"sun\",\n  \"tag\",\n  \"template\",\n  \"time\",\n  \"time_pattern\",\n  \"webhook\",\n  \"zone\",\n];\n\nexport interface TriggerElement extends LitElement {\n  trigger: Trigger;\n}\n\nexport const handleChangeEvent = (element: TriggerElement, ev: CustomEvent) => {\n  ev.stopPropagation();\n  const name = (ev.currentTarget as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = (ev.target as any)?.value;\n\n  if ((element.trigger[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newTrigger: Trigger;\n  if (newVal === undefined || newVal === \"\") {\n    newTrigger = { ...element.trigger };\n    delete newTrigger[name];\n  } else {\n    newTrigger = { ...element.trigger, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newTrigger });\n};\n\n@customElement(\"ha-automation-trigger-row\")\nexport default class HaAutomationTriggerRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: Trigger;\n\n  @state() private _warnings?: string[];\n\n  @state() private _yamlMode = false;\n\n  @state() private _requestShowId = false;\n\n  @state() private _triggered?: Record<string, unknown>;\n\n  @state() private _triggerColor = false;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  private _triggerUnsub?: Promise<UnsubscribeFunc>;\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string][] =>\n      OPTIONS.map(\n        (action) =>\n          [\n            action,\n            localize(\n              `ui.panel.config.automation.editor.triggers.type.${action}.label`\n            ),\n          ] as [string, string]\n      ).sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  protected render() {\n    const selected = OPTIONS.indexOf(this.trigger.platform);\n    const yamlMode = this._yamlMode || selected === -1;\n    const showId = \"id\" in this.trigger || this._requestShowId;\n\n    return html`\n      <ha-card outlined>\n        ${this.trigger.enabled === false\n          ? html`<div class=\"disabled-bar\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.disabled\"\n              )}\n            </div>`\n          : \"\"}\n        <div class=\"card-menu\">\n          <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            ></ha-icon-button>\n            <mwc-list-item>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.triggers.edit_id\"\n              )}\n            </mwc-list-item>\n            <mwc-list-item .disabled=${selected === -1}>\n              ${yamlMode\n                ? this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_ui\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_yaml\"\n                  )}\n            </mwc-list-item>\n            <mwc-list-item>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.duplicate\"\n              )}\n            </mwc-list-item>\n            <mwc-list-item>\n              ${this.trigger.enabled === false\n                ? this.hass.localize(\n                    \"ui.panel.config.automation.editor.actions.enable\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.config.automation.editor.actions.disable\"\n                  )}\n            </mwc-list-item>\n            <mwc-list-item class=\"warning\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.delete\"\n              )}\n            </mwc-list-item>\n          </ha-button-menu>\n        </div>\n        <div\n          class=\"card-content ${this.trigger.enabled === false\n            ? \"disabled\"\n            : \"\"}\"\n        >\n          ${this._warnings\n            ? html`<ha-alert\n                alert-type=\"warning\"\n                .title=${this.hass.localize(\n                  \"ui.errors.config.editor_not_supported\"\n                )}\n              >\n                ${this._warnings.length && this._warnings[0] !== undefined\n                  ? html` <ul>\n                      ${this._warnings.map(\n                        (warning) => html`<li>${warning}</li>`\n                      )}\n                    </ul>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.errors.config.edit_in_yaml_supported\")}\n              </ha-alert>`\n            : \"\"}\n          ${yamlMode\n            ? html`\n                ${selected === -1\n                  ? html`\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.editor.triggers.unsupported_platform\",\n                        \"platform\",\n                        this.trigger.platform\n                      )}\n                    `\n                  : \"\"}\n                <h2>\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_yaml\"\n                  )}\n                </h2>\n                <ha-yaml-editor\n                  .hass=${this.hass}\n                  .defaultValue=${this.trigger}\n                  @value-changed=${this._onYamlChange}\n                ></ha-yaml-editor>\n              `\n            : html`\n                <ha-select\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.automation.editor.triggers.type_select\"\n                  )}\n                  .value=${this.trigger.platform}\n                  naturalMenuWidth\n                  @selected=${this._typeChanged}\n                >\n                  ${this._processedTypes(this.hass.localize).map(\n                    ([opt, label]) => html`\n                      <mwc-list-item .value=${opt}>${label}</mwc-list-item>\n                    `\n                  )}\n                </ha-select>\n                ${showId\n                  ? html`\n                      <ha-textfield\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.automation.editor.triggers.id\"\n                        )}\n                        .value=${this.trigger.id || \"\"}\n                        @change=${this._idChanged}\n                      >\n                      </ha-textfield>\n                    `\n                  : \"\"}\n                <div @ui-mode-not-available=${this._handleUiModeNotAvailable}>\n                  ${dynamicElement(\n                    `ha-automation-trigger-${this.trigger.platform}`,\n                    { hass: this.hass, trigger: this.trigger }\n                  )}\n                </div>\n              `}\n        </div>\n        <div\n          class=\"triggered ${classMap({\n            active: this._triggered !== undefined,\n            accent: this._triggerColor,\n          })}\"\n          @click=${this._showTriggeredInfo}\n        >\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.triggered\"\n          )}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected override updated(changedProps: PropertyValues<this>): void {\n    super.updated(changedProps);\n    if (changedProps.has(\"trigger\")) {\n      this._subscribeTrigger();\n    }\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hasUpdated && this.trigger) {\n      this._subscribeTrigger();\n    }\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    if (this._triggerUnsub) {\n      this._triggerUnsub.then((unsub) => unsub());\n      this._triggerUnsub = undefined;\n    }\n    this._doSubscribeTrigger.cancel();\n  }\n\n  private _subscribeTrigger() {\n    // Clean up old trigger subscription.\n    if (this._triggerUnsub) {\n      this._triggerUnsub.then((unsub) => unsub());\n      this._triggerUnsub = undefined;\n    }\n\n    this._doSubscribeTrigger();\n  }\n\n  private _doSubscribeTrigger = debounce(async () => {\n    let untriggerTimeout: number | undefined;\n    const showTriggeredTime = 5000;\n    const trigger = this.trigger;\n\n    // Clean up old trigger subscription.\n    if (this._triggerUnsub) {\n      this._triggerUnsub.then((unsub) => unsub());\n      this._triggerUnsub = undefined;\n    }\n\n    const validateResult = await validateConfig(this.hass, {\n      trigger,\n    });\n\n    // Don't do anything if trigger not valid or if trigger changed.\n    if (!validateResult.trigger.valid || this.trigger !== trigger) {\n      return;\n    }\n\n    const triggerUnsub = subscribeTrigger(\n      this.hass,\n      (result) => {\n        if (untriggerTimeout !== undefined) {\n          clearTimeout(untriggerTimeout);\n          this._triggerColor = !this._triggerColor;\n        } else {\n          this._triggerColor = false;\n        }\n        this._triggered = result;\n        untriggerTimeout = window.setTimeout(() => {\n          this._triggered = undefined;\n          untriggerTimeout = undefined;\n        }, showTriggeredTime);\n      },\n      trigger\n    );\n    triggerUnsub.catch(() => {\n      if (this._triggerUnsub === triggerUnsub) {\n        this._triggerUnsub = undefined;\n      }\n    });\n    this._triggerUnsub = triggerUnsub;\n  }, 5000);\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._requestShowId = true;\n        break;\n      case 1:\n        this._switchYamlMode();\n        break;\n      case 2:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 3:\n        this._onDisable();\n        break;\n      case 4:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.delete_confirm\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _onDisable() {\n    const enabled = !(this.trigger.enabled ?? true);\n    const value = { ...this.trigger, enabled };\n    fireEvent(this, \"value-changed\", { value });\n    if (this._yamlMode) {\n      this._yamlEditor?.setValue(value);\n    }\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = (ev.target as HaSelect).value;\n\n    if (!type) {\n      return;\n    }\n\n    const elClass = customElements.get(\n      `ha-automation-trigger-${type}`\n    ) as CustomElementConstructor & {\n      defaultConfig: Omit<Trigger, \"platform\">;\n    };\n\n    if (type !== this.trigger.platform) {\n      const value = {\n        platform: type,\n        ...elClass.defaultConfig,\n      };\n      if (this.trigger.id) {\n        value.id = this.trigger.id;\n      }\n      fireEvent(this, \"value-changed\", {\n        value,\n      });\n    }\n  }\n\n  private _idChanged(ev: CustomEvent) {\n    const newId = (ev.target as any).value;\n    if (newId === (this.trigger.id ?? \"\")) {\n      return;\n    }\n    this._requestShowId = true;\n    const value = { ...this.trigger };\n    if (!newId) {\n      delete value.id;\n    } else {\n      value.id = newId;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._warnings = undefined;\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = !this._yamlMode;\n  }\n\n  private _showTriggeredInfo() {\n    showAlertDialog(this, {\n      text: html`\n        <ha-yaml-editor\n          readOnly\n          .hass=${this.hass}\n          .defaultValue=${this._triggered}\n        ></ha-yaml-editor>\n      `,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .disabled {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n        .card-content {\n          padding-top: 16px;\n          margin-top: 0;\n        }\n        .disabled-bar {\n          background: var(--divider-color, #e0e0e0);\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius);\n          border-top-left-radius: var(--ha-card-border-radius);\n        }\n        .card-menu {\n          float: right;\n          z-index: 3;\n          margin: 4px;\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n        :host-context([style*=\"direction: rtl;\"]) .card-menu {\n          float: left;\n        }\n        .triggered {\n          cursor: pointer;\n          position: absolute;\n          top: 0px;\n          right: 0px;\n          left: 0px;\n          text-transform: uppercase;\n          font-weight: bold;\n          font-size: 14px;\n          background-color: var(--primary-color);\n          color: var(--text-primary-color);\n          max-height: 0px;\n          overflow: hidden;\n          transition: max-height 0.3s;\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius, 4px);\n          border-top-left-radius: var(--ha-card-border-radius, 4px);\n        }\n        .triggered.active {\n          max-height: 100px;\n        }\n        .triggered:hover {\n          opacity: 0.8;\n        }\n        .triggered.accent {\n          background-color: var(--accent-color);\n          color: var(--text-accent-color, var(--text-primary-color));\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n        ha-select {\n          margin-bottom: 24px;\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-row\": HaAutomationTriggerRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport { Trigger } from \"../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-trigger-row\";\nimport { HaDeviceTrigger } from \"./types/ha-automation-trigger-device\";\n\n@customElement(\"ha-automation-trigger\")\nexport default class HaAutomationTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public triggers!: Trigger[];\n\n  protected render() {\n    return html`\n      ${this.triggers.map(\n        (trg, idx) => html`\n          <ha-automation-trigger-row\n            .index=${idx}\n            .trigger=${trg}\n            @duplicate=${this._duplicateTrigger}\n            @value-changed=${this._triggerChanged}\n            .hass=${this.hass}\n          ></ha-automation-trigger-row>\n        `\n      )}\n      <ha-card outlined>\n        <div class=\"card-actions add-card\">\n          <mwc-button @click=${this._addTrigger}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.triggers.add\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addTrigger() {\n    const triggers = this.triggers.concat({\n      platform: \"device\",\n      ...HaDeviceTrigger.defaultConfig,\n    });\n\n    fireEvent(this, \"value-changed\", { value: triggers });\n  }\n\n  private _triggerChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const triggers = [...this.triggers];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      triggers.splice(index, 1);\n    } else {\n      triggers[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: triggers });\n  }\n\n  private _duplicateTrigger(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.triggers.concat(this.triggers[index]),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-trigger-row,\n      ha-card {\n        display: block;\n        margin-top: 16px;\n      }\n      .add-card mwc-button {\n        display: block;\n        text-align: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger\": HaAutomationTrigger;\n  }\n}\n"],"names":[],"sourceRoot":""}