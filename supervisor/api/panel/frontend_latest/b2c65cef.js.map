{"version":3,"file":"b2c65cef.js","mappings":";;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAGA;;AAEA;;AAGA;;AAIA;AAEA;AACA;AAGA;;;;AAMA;;;AAMA;;AAKA;;;;;;;;;;;AAeA;;AC1EA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-color-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-ui-color.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport {\n  computeRgbColor,\n  THEME_COLORS,\n} from \"../../../common/color/compute-color\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport \"../../../components/ha-select\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-color-picker\")\nexport class HuiColorPicker extends LitElement {\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  _valueSelected(ev) {\n    const value = ev.target.value;\n    if (value) {\n      fireEvent(this, \"value-changed\", {\n        value: value !== \"default\" ? value : undefined,\n      });\n    }\n  }\n\n  render() {\n    return html`\n      <ha-select\n        .icon=${Boolean(this.value)}\n        .label=${this.label}\n        .value=${this.value || \"default\"}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        @closed=${stopPropagation}\n        @selected=${this._valueSelected}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${this.value\n          ? html`\n              <span slot=\"icon\">\n                ${this.renderColorCircle(this.value || \"grey\")}\n              </span>\n            `\n          : null}\n        <mwc-list-item value=\"default\">\n          ${this.hass.localize(\n            `ui.panel.lovelace.editor.color-picker.default_color`\n          )}\n        </mwc-list-item>\n        ${Array.from(THEME_COLORS).map(\n          (color) => html`\n            <mwc-list-item .value=${color} graphic=\"icon\">\n              ${this.hass.localize(\n                `ui.panel.lovelace.editor.color-picker.colors.${color}`\n              ) || color}\n              <span slot=\"graphic\">${this.renderColorCircle(color)}</span>\n            </mwc-list-item>\n          `\n        )}\n      </ha-select>\n    `;\n  }\n\n  private renderColorCircle(color: string) {\n    return html`\n      <span\n        class=\"circle-color\"\n        style=${styleMap({\n          \"--circle-color\": computeRgbColor(color),\n        })}\n      ></span>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      .circle-color {\n        display: block;\n        background-color: rgb(var(--circle-color));\n        border-radius: 10px;\n        width: 20px;\n        height: 20px;\n      }\n      ha-select {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-color-picker\": HuiColorPicker;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { ActionConfig } from \"../../data/lovelace\";\nimport { UiColorSelector } from \"../../data/selector\";\nimport \"../../panels/lovelace/components/hui-color-picker\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-selector-ui-color\")\nexport class HaSelectorUiColor extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: UiColorSelector;\n\n  @property() public value?: ActionConfig;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  protected render() {\n    return html`\n      <hui-color-picker\n        .label=${this.label}\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        @value-changed=${this._valueChanged}\n      ></hui-color-picker>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-ui-color\": HaSelectorUiColor;\n  }\n}\n"],"names":[],"sourceRoot":""}