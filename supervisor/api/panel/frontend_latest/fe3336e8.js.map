{"version":3,"file":"fe3336e8.js","mappings":";;AAcA;AACA;AACA;;;AAKA;;;;;;;;;;;;;;;;;;;AAhBA;;;AC8HA;;;AAKA;AAGA;AAEA;AAGA;;;AAmCA;AAnCA;AAGA;;AAGA;;;AAGA;;;AAIA;;;AAOA;;AAGA;;;;AAMA;;;AAYA;;AAGA;;AAGA;;;AAKA;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5GA","sources":["webpack://home-assistant-frontend/./src/components/ha-faded.ts","webpack://home-assistant-frontend/./hassio/src/update-available/update-available-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-faded\")\nclass HaFaded extends LitElement {\n  @property({ type: Number, attribute: \"faded-height\" })\n  public fadedHeight = 102;\n\n  @state() _contentShown = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        class=\"container ${classMap({ faded: !this._contentShown })}\"\n        style=${!this._contentShown ? `max-height: ${this.fadedHeight}px` : \"\"}\n        @click=${this._showContent}\n      >\n        <slot\n          @iron-resize=${\n            // ha-markdown-element fire this when render is complete\n            this._setShowContent\n          }\n        ></slot>\n      </div>\n    `;\n  }\n\n  get _slottedHeight(): number {\n    return (\n      (\n        this.shadowRoot!.querySelector(\".container\")\n          ?.firstElementChild as HTMLSlotElement\n      )\n        .assignedElements()\n        .reduce(\n          (partial, element) => partial + (element as HTMLElement).offsetHeight,\n          0\n        ) || 0\n    );\n  }\n\n  private _setShowContent() {\n    const height = this._slottedHeight;\n    this._contentShown = height !== 0 && height <= this.fadedHeight + 50;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._setShowContent();\n  }\n\n  private _showContent(): void {\n    this._contentShown = true;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .container {\n        display: block;\n        height: auto;\n        cursor: default;\n      }\n      .faded {\n        cursor: pointer;\n        -webkit-mask-image: linear-gradient(\n          to bottom,\n          black 25%,\n          transparent 100%\n        );\n        mask-image: linear-gradient(to bottom, black 25%, transparent 100%);\n        overflow-y: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-faded\": HaFaded;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../src/common/dom/fire_event\";\nimport \"../../../src/components/buttons/ha-progress-button\";\nimport \"../../../src/components/ha-alert\";\nimport \"../../../src/components/ha-button-menu\";\nimport \"../../../src/components/ha-card\";\nimport \"../../../src/components/ha-checkbox\";\nimport \"../../../src/components/ha-faded\";\nimport \"../../../src/components/ha-formfield\";\nimport \"../../../src/components/ha-icon-button\";\nimport \"../../../src/components/ha-markdown\";\nimport \"../../../src/components/ha-settings-row\";\nimport \"../../../src/components/ha-svg-icon\";\nimport \"../../../src/components/ha-switch\";\nimport {\n  fetchHassioAddonChangelog,\n  fetchHassioAddonInfo,\n  HassioAddonDetails,\n  updateHassioAddon,\n} from \"../../../src/data/hassio/addon\";\nimport {\n  extractApiErrorMessage,\n  ignoreSupervisorError,\n} from \"../../../src/data/hassio/common\";\nimport { fetchHassioHassOsInfo, updateOS } from \"../../../src/data/hassio/host\";\nimport {\n  fetchHassioHomeAssistantInfo,\n  fetchHassioSupervisorInfo,\n  updateSupervisor,\n} from \"../../../src/data/hassio/supervisor\";\nimport { updateCore } from \"../../../src/data/supervisor/core\";\nimport { StoreAddon } from \"../../../src/data/supervisor/store\";\nimport { Supervisor } from \"../../../src/data/supervisor/supervisor\";\nimport { showAlertDialog } from \"../../../src/dialogs/generic/show-dialog-box\";\nimport \"../../../src/layouts/hass-loading-screen\";\nimport \"../../../src/layouts/hass-subpage\";\nimport \"../../../src/layouts/hass-tabs-subpage\";\nimport { HomeAssistant, Route } from \"../../../src/types\";\nimport { addonArchIsSupported, extractChangelog } from \"../util/addon\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"update-complete\": undefined;\n  }\n}\n\nconst SUPERVISOR_UPDATE_NAMES = {\n  core: \"Home Assistant Core\",\n  os: \"Home Assistant Operating System\",\n  supervisor: \"Home Assistant Supervisor\",\n};\n\ntype updateType = \"os\" | \"supervisor\" | \"core\" | \"addon\";\n\nconst changelogUrl = (\n  entry: updateType,\n  version: string\n): string | undefined => {\n  if (entry === \"addon\") {\n    return undefined;\n  }\n  if (entry === \"core\") {\n    return version.includes(\"dev\")\n      ? \"https://github.com/home-assistant/core/commits/dev\"\n      : version.includes(\"b\")\n      ? \"https://next.home-assistant.io/latest-release-notes/\"\n      : \"https://www.home-assistant.io/latest-release-notes/\";\n  }\n  if (entry === \"os\") {\n    return version.includes(\"dev\")\n      ? \"https://github.com/home-assistant/operating-system/commits/dev\"\n      : `https://github.com/home-assistant/operating-system/releases/tag/${version}`;\n  }\n  if (entry === \"supervisor\") {\n    return version.includes(\"dev\")\n      ? \"https://github.com/home-assistant/supervisor/commits/main\"\n      : `https://github.com/home-assistant/supervisor/releases/tag/${version}`;\n  }\n  return undefined;\n};\n\n@customElement(\"update-available-card\")\nclass UpdateAvailableCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public addonSlug?: string;\n\n  @state() private _updateType?: updateType;\n\n  @state() private _changelogContent?: string;\n\n  @state() private _addonInfo?: HassioAddonDetails;\n\n  @state() private _updating = false;\n\n  @state() private _error?: string;\n\n  private _addonStoreInfo = memoizeOne(\n    (slug: string, storeAddons: StoreAddon[]) =>\n      storeAddons.find((addon) => addon.slug === slug)\n  );\n\n  protected render(): TemplateResult {\n    if (\n      !this._updateType ||\n      (this._updateType === \"addon\" && !this._addonInfo)\n    ) {\n      return html``;\n    }\n\n    const changelog = changelogUrl(this._updateType, this._version_latest);\n\n    return html`\n      <ha-card\n        outlined\n        .header=${this.supervisor.localize(\"update_available.update_name\", {\n          name: this._name,\n        })}\n      >\n        <div class=\"card-content\">\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          ${this._version === this._version_latest\n            ? html`<p>\n                ${this.supervisor.localize(\"update_available.no_update\", {\n                  name: this._name,\n                })}\n              </p>`\n            : !this._updating\n            ? html`\n                ${this._changelogContent\n                  ? html`\n                      <ha-faded>\n                        <ha-markdown .content=${this._changelogContent}>\n                        </ha-markdown>\n                      </ha-faded>\n                    `\n                  : \"\"}\n                <div class=\"versions\">\n                  <p>\n                    ${this.supervisor.localize(\"update_available.description\", {\n                      name: this._name,\n                      version: this._version,\n                      newest_version: this._version_latest,\n                    })}\n                  </p>\n                </div>\n                ${[\"core\", \"addon\"].includes(this._updateType)\n                  ? html`\n                      <ha-formfield\n                        .label=${this.supervisor.localize(\n                          \"update_available.create_backup\"\n                        )}\n                      >\n                        <ha-checkbox checked></ha-checkbox>\n                      </ha-formfield>\n                    `\n                  : \"\"}\n              `\n            : html`<ha-circular-progress alt=\"Updating\" size=\"large\" active>\n                </ha-circular-progress>\n                <p class=\"progress-text\">\n                  ${this.supervisor.localize(\"update_available.updating\", {\n                    name: this._name,\n                    version: this._version_latest,\n                  })}\n                </p>`}\n        </div>\n        ${this._version !== this._version_latest && !this._updating\n          ? html`\n              <div class=\"card-actions\">\n                ${changelog\n                  ? html`<a .href=${changelog} target=\"_blank\" rel=\"noreferrer\">\n                      <mwc-button\n                        .label=${this.supervisor.localize(\n                          \"update_available.open_release_notes\"\n                        )}\n                      >\n                      </mwc-button>\n                    </a>`\n                  : \"\"}\n                <span></span>\n                <ha-progress-button @click=${this._update} raised>\n                  ${this.supervisor.localize(\"common.update\")}\n                </ha-progress-button>\n              </div>\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    const pathPart = this.route?.path.substring(1, this.route.path.length);\n    const updateType = [\"core\", \"os\", \"supervisor\"].includes(pathPart)\n      ? pathPart\n      : \"addon\";\n    this._updateType = updateType as updateType;\n\n    switch (updateType) {\n      case \"addon\":\n        if (!this.addonSlug) {\n          this.addonSlug = pathPart;\n        }\n        this._loadAddonData();\n        break;\n      case \"core\":\n        this._loadCoreData();\n        break;\n      case \"supervisor\":\n        this._loadSupervisorData();\n        break;\n      case \"os\":\n        this._loadOsData();\n        break;\n    }\n  }\n\n  get _shouldCreateBackup(): boolean {\n    if (this._updateType && ![\"core\", \"addon\"].includes(this._updateType)) {\n      return false;\n    }\n    const checkbox = this.shadowRoot?.querySelector(\"ha-checkbox\");\n    if (checkbox) {\n      return checkbox.checked;\n    }\n    return true;\n  }\n\n  get _version(): string {\n    return this._updateType\n      ? this._updateType === \"addon\"\n        ? this._addonInfo!.version\n        : this.supervisor[this._updateType]?.version || \"\"\n      : \"\";\n  }\n\n  get _version_latest(): string {\n    return this._updateType\n      ? this._updateType === \"addon\"\n        ? this._addonInfo!.version_latest\n        : this.supervisor[this._updateType]?.version_latest || \"\"\n      : \"\";\n  }\n\n  get _name(): string {\n    return this._updateType\n      ? this._updateType === \"addon\"\n        ? this._addonInfo!.name\n        : SUPERVISOR_UPDATE_NAMES[this._updateType]\n      : \"\";\n  }\n\n  private async _loadAddonData() {\n    try {\n      this._addonInfo = await fetchHassioAddonInfo(this.hass, this.addonSlug!);\n    } catch (err) {\n      showAlertDialog(this, {\n        title: this._updateType,\n        text: extractApiErrorMessage(err),\n      });\n      return;\n    }\n    const addonStoreInfo =\n      !this._addonInfo.detached && !this._addonInfo.available\n        ? this._addonStoreInfo(\n            this._addonInfo.slug,\n            this.supervisor.store.addons\n          )\n        : undefined;\n\n    if (this._addonInfo.changelog) {\n      try {\n        const content = await fetchHassioAddonChangelog(\n          this.hass,\n          this.addonSlug!\n        );\n        this._changelogContent = extractChangelog(this._addonInfo, content);\n      } catch (err) {\n        this._error = extractApiErrorMessage(err);\n        return;\n      }\n    }\n\n    if (!this._addonInfo.available && addonStoreInfo) {\n      if (\n        !addonArchIsSupported(\n          this.supervisor.info.supported_arch,\n          this._addonInfo.arch\n        )\n      ) {\n        this._error = this.supervisor.localize(\n          \"addon.dashboard.not_available_arch\"\n        );\n      } else {\n        this._error = this.supervisor.localize(\n          \"addon.dashboard.not_available_version\",\n          {\n            core_version_installed: this.supervisor.core.version,\n            core_version_needed: addonStoreInfo.homeassistant,\n          }\n        );\n      }\n    }\n  }\n\n  private async _loadSupervisorData() {\n    try {\n      const supervisor = await fetchHassioSupervisorInfo(this.hass);\n      fireEvent(this, \"supervisor-update\", { supervisor });\n    } catch (err) {\n      showAlertDialog(this, {\n        title: this._updateType,\n        text: extractApiErrorMessage(err),\n      });\n    }\n  }\n\n  private async _loadCoreData() {\n    try {\n      const core = await fetchHassioHomeAssistantInfo(this.hass);\n      fireEvent(this, \"supervisor-update\", { core });\n    } catch (err) {\n      showAlertDialog(this, {\n        title: this._updateType,\n        text: extractApiErrorMessage(err),\n      });\n    }\n  }\n\n  private async _loadOsData() {\n    try {\n      const os = await fetchHassioHassOsInfo(this.hass);\n      fireEvent(this, \"supervisor-update\", { os });\n    } catch (err) {\n      showAlertDialog(this, {\n        title: this._updateType,\n        text: extractApiErrorMessage(err),\n      });\n    }\n  }\n\n  private async _update() {\n    if (this._shouldCreateBackup && this.supervisor.info.state === \"freeze\") {\n      this._error = this.supervisor.localize(\"backup.backup_already_running\");\n      return;\n    }\n\n    this._error = undefined;\n    this._updating = true;\n\n    try {\n      if (this._updateType === \"addon\") {\n        await updateHassioAddon(\n          this.hass,\n          this.addonSlug!,\n          this._shouldCreateBackup\n        );\n      } else if (this._updateType === \"core\") {\n        await updateCore(this.hass, this._shouldCreateBackup);\n      } else if (this._updateType === \"os\") {\n        await updateOS(this.hass);\n      } else if (this._updateType === \"supervisor\") {\n        await updateSupervisor(this.hass);\n      }\n    } catch (err: any) {\n      if (this.hass.connection.connected && !ignoreSupervisorError(err)) {\n        this._error = extractApiErrorMessage(err);\n        this._updating = false;\n        return;\n      }\n    }\n    fireEvent(this, \"update-complete\");\n    this._updating = false;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      ha-card {\n        margin: auto;\n      }\n      a {\n        text-decoration: none;\n        color: var(--primary-text-color);\n      }\n      ha-settings-row {\n        padding: 0;\n      }\n      .card-actions {\n        display: flex;\n        justify-content: space-between;\n        border-top: none;\n        padding: 0 8px 8px;\n      }\n\n      ha-circular-progress {\n        display: block;\n        margin: 32px;\n        text-align: center;\n      }\n\n      .progress-text {\n        text-align: center;\n      }\n\n      ha-markdown {\n        padding-bottom: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"update-available-card\": UpdateAvailableCard;\n  }\n}\n"],"names":[],"sourceRoot":""}