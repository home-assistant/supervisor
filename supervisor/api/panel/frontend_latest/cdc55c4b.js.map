{"version":3,"file":"cdc55c4b.js","mappings":";;;AA8CA;AACA;AACA;;AAEA;;;AAIA;;;AASA;AAEA;AACA;;AAEA;AAEA;;;AAIA;AACA;AAGA;;AAIA;;AAGA;AAEA;AACA;;;;AAMA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AApFA","sources":["webpack://home-assistant-frontend/./src/dialogs/generic/dialog-box.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { mdiAlertOutline } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-switch\";\nimport { HaTextField } from \"../../components/ha-textfield\";\nimport { HomeAssistant } from \"../../types\";\nimport { DialogBoxParams } from \"./show-dialog-box\";\n\n@customElement(\"dialog-box\")\nclass DialogBox extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogBoxParams;\n\n  @query(\"ha-textfield\") private _textField?: HaTextField;\n\n  public async showDialog(params: DialogBoxParams): Promise<void> {\n    this._params = params;\n  }\n\n  public closeDialog(): boolean {\n    if (this._params?.confirmation || this._params?.prompt) {\n      return false;\n    }\n    if (this._params) {\n      this._dismiss();\n      return true;\n    }\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const confirmPrompt = this._params.confirmation || this._params.prompt;\n\n    return html`\n      <ha-dialog\n        open\n        ?scrimClickAction=${confirmPrompt}\n        ?escapeKeyAction=${confirmPrompt}\n        @closed=${this._dialogClosed}\n        defaultAction=\"ignore\"\n        .heading=${html`${this._params.warning\n          ? html`<ha-svg-icon\n              .path=${mdiAlertOutline}\n              style=\"color: var(--warning-color)\"\n            ></ha-svg-icon> `\n          : \"\"}${this._params.title\n          ? this._params.title\n          : this._params.confirmation &&\n            this.hass.localize(\n              \"ui.dialogs.generic.default_confirmation_title\"\n            )}`}\n      >\n        <div>\n          ${this._params.text\n            ? html`\n                <p class=${this._params.prompt ? \"no-bottom-padding\" : \"\"}>\n                  ${this._params.text}\n                </p>\n              `\n            : \"\"}\n          ${this._params.prompt\n            ? html`\n                <ha-textfield\n                  dialogInitialFocus\n                  value=${ifDefined(this._params.defaultValue)}\n                  .label=${this._params.inputLabel\n                    ? this._params.inputLabel\n                    : \"\"}\n                  .type=${this._params.inputType\n                    ? this._params.inputType\n                    : \"text\"}\n                ></ha-textfield>\n              `\n            : \"\"}\n        </div>\n        ${confirmPrompt &&\n        html`\n          <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n            ${this._params.dismissText\n              ? this._params.dismissText\n              : this.hass.localize(\"ui.dialogs.generic.cancel\")}\n          </mwc-button>\n        `}\n        <mwc-button\n          @click=${this._confirm}\n          ?dialogInitialFocus=${!this._params.prompt}\n          slot=\"primaryAction\"\n        >\n          ${this._params.confirmText\n            ? this._params.confirmText\n            : this.hass.localize(\"ui.dialogs.generic.ok\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _dismiss(): void {\n    if (this._params?.cancel) {\n      this._params.cancel();\n    }\n    this._close();\n  }\n\n  private _confirm(): void {\n    if (this._params!.confirm) {\n      this._params!.confirm(this._textField?.value);\n    }\n    this._close();\n  }\n\n  private _dialogClosed(ev) {\n    if (ev.detail.action === \"ignore\") {\n      return;\n    }\n    this._dismiss();\n  }\n\n  private _close(): void {\n    if (!this._params) {\n      return;\n    }\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host([inert]) {\n        pointer-events: initial !important;\n        cursor: initial !important;\n      }\n      a {\n        color: var(--primary-color);\n      }\n      p {\n        margin: 0;\n        color: var(--primary-text-color);\n      }\n      .no-bottom-padding {\n        padding-bottom: 0;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      ha-dialog {\n        --mdc-dialog-heading-ink-color: var(--primary-text-color);\n        --mdc-dialog-content-ink-color: var(--primary-text-color);\n        /* Place above other dialogs */\n        --dialog-z-index: 104;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-box\": DialogBox;\n  }\n}\n"],"names":[],"sourceRoot":""}