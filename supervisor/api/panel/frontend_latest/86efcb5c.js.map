{"version":3,"file":"86efcb5c.js","mappings":";;AAqDA;;;AAGA;;;AAKA;AAGA;;;;;AAKA;;AAEA;AAGA;AACA;;;;;;AAOA;AAGA;;;;;AAKA;;AAEA;AAGA;AACA;;;;;;;AAQA;AACA;;;;;;;;;;;;;;;;;;;;ACpFA;ACmCA;;AAEA;;AAEA;AACA;;AA1CA;ACwFA;;;;AAIA;;;AAGA;;AAEA;;;;AAIA;AACA;;;AASA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AAQA;AAEA;AACA;;AAEA;AAGA;;AAMA;;;;AAMA;;AAGA;;;AAKA;AACA;;;AAGA;;;AAIA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1IA;;ACSA;;;AAKA;;;;;;AAQA;;;AAKA;;AAIA;;AAEA;;AAGA;;;AAGA;AACA;AAGA;AACA;;;;AAIA;;;;;;;AAQA;AACA;;AAEA;AACA;;;;AAxDA;;;;;;;;;;;AAlBA;;ACPA;AAEA;;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;AAEA;;;;;;;;;;;;;AA9CA;;;AC4BA;;AAIA;;;;AATA;;;;;;;;;;;;;;ACZA;AACA;AACA;;;;;;;AApBA;ACcA;AACA;;AAGA;;;;;;;;AAXA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;AAzBA;ACmHA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;;AAIA;;AAIA;;;AAKA;AAGA;;;;;;;;;AAUA;;AAEA;AAEA;;AAGA;;AAIA;;AAEA;;AAGA;;AAIA;;;AAGA;;;;AAKA;AAEA;AACA;;AAEA;;;AAKA;AAEA;;;;;AAOA;;AAGA;AAIA;;;;;AAKA;;;AAGA;AAGA;;;;AAKA;AAKA;;;AAGA;;;AAGA;;AAIA;;;AAIA;;;;AAIA;;AAIA;AAEA;;;AAIA;;;;AAIA;;AAIA;AAEA;;;AAIA;;;;;AAKA;;AAEA;;AAIA;AAEA;AAEA;;;AAGA;;AAEA;;AAIA;AAEA;AAEA;;AAEA;;AAIA;AAEA;AAEA;;AAEA;;AAIA;AAEA;;;AAIA;AACA;;;;AAIA;;AAIA;AAEA;AAEA;;AAEA;;AAIA;AAEA;AAEA;;;;;AAKA;;AAIA;;;;AAKA;AACA;AAIA;;;;;AAMA;;;AAIA;;AAEA;AAEA;;AAGA;;AAKA;;AAEA;;;AAKA;;;AAKA;AACA;;;;;AAKA;AAEA;;AAEA;;;AAKA;;;AAKA;AACA;;;;AAIA;AAEA;AAGA;;AAEA;;;AAKA;;;AAKA;AACA;;;;AAIA;AAEA;AAEA;;AAEA;;;AAKA;;;AAKA;AACA;;;;AAIA;AAEA;AAEA;;AAEA;;;AAKA;;;AAKA;AACA;;;;AAIA;;AAGA;;;AAIA;;AAGA;;AAEA;;AAEA;;AAIA;AACA;AACA;;AALA;;;AAYA;AAGA;;AAcA;;AAdA;;AAOA;;;;;;AAoBA;;;AAKA;;AAEA;;;;AAIA;;AAEA;;AAEA;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;;;;;AAKA;;AAIA;;;;;;AAMA;;;AAKA;AAEA;AAEA;AACA;;AAIA;;;AAIA;;AAEA;;AAEA;;;AAIA;AACA;;AAEA;;AAEA;;;;;AAOA;;;;AAKA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAziBA;;;AC3DA;AACA;AACA;AACA;AACA;;;AAVA;;;;;;AAbA;ACwBA;;AAEA;;AAIA;AAEA;AACA;;;AAIA;AACA;;;;;;;;;;;;ACxBA;AACA;AACA;;;AAPA;;;;;;AATA;ACqDA;AAIA;;AAuCA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://home-assistant-frontend/./hassio/src/addon-view/config/hassio-addon-audio.ts","webpack://home-assistant-frontend/./src/components/ha-code-editor.ts","webpack://home-assistant-frontend/./src/components/ha-yaml-editor.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/config/hassio-addon-config.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/config/hassio-addon-network.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/config/hassio-addon-config-tab.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/documentation/hassio-addon-documentation-tab.ts","webpack://home-assistant-frontend/./src/components/buttons/ha-call-api-button.ts","webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/info/hassio-addon-info.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/info/hassio-addon-info-tab.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/log/hassio-addon-logs.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/log/hassio-addon-log-tab.ts","webpack://home-assistant-frontend/./hassio/src/addon-view/hassio-addon-dashboard.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"web-animations-js/web-animations-next-lite.min\";\nimport \"../../../../src/components/buttons/ha-progress-button\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-card\";\nimport {\n  HassioAddonDetails,\n  HassioAddonSetOptionParams,\n  setHassioAddonOption,\n} from \"../../../../src/data/hassio/addon\";\nimport {\n  fetchHassioHardwareAudio,\n  HassioHardwareAudioDevice,\n} from \"../../../../src/data/hassio/hardware\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport { suggestAddonRestart } from \"../../dialogs/suggestAddonRestart\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\n\n@customElement(\"hassio-addon-audio\")\nclass HassioAddonAudio extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public addon!: HassioAddonDetails;\n\n  @state() private _error?: string;\n\n  @state() private _inputDevices?: HassioHardwareAudioDevice[];\n\n  @state() private _outputDevices?: HassioHardwareAudioDevice[];\n\n  @state() private _selectedInput!: null | string;\n\n  @state() private _selectedOutput!: null | string;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card\n        .header=${this.supervisor.localize(\"addon.configuration.audio.header\")}\n      >\n        <div class=\"card-content\">\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n\n          <paper-dropdown-menu\n            .label=${this.supervisor.localize(\n              \"addon.configuration.audio.input\"\n            )}\n            @iron-select=${this._setInputDevice}\n          >\n            <paper-listbox\n              slot=\"dropdown-content\"\n              attr-for-selected=\"device\"\n              .selected=${this._selectedInput!}\n            >\n              ${this._inputDevices &&\n              this._inputDevices.map(\n                (item) => html`\n                  <paper-item device=${item.device || \"\"}>\n                    ${item.name}\n                  </paper-item>\n                `\n              )}\n            </paper-listbox>\n          </paper-dropdown-menu>\n          <paper-dropdown-menu\n            .label=${this.supervisor.localize(\n              \"addon.configuration.audio.output\"\n            )}\n            @iron-select=${this._setOutputDevice}\n          >\n            <paper-listbox\n              slot=\"dropdown-content\"\n              attr-for-selected=\"device\"\n              .selected=${this._selectedOutput!}\n            >\n              ${this._outputDevices &&\n              this._outputDevices.map(\n                (item) => html`\n                  <paper-item device=${item.device || \"\"}\n                    >${item.name}</paper-item\n                  >\n                `\n              )}\n            </paper-listbox>\n          </paper-dropdown-menu>\n        </div>\n        <div class=\"card-actions\">\n          <ha-progress-button @click=${this._saveSettings}>\n            ${this.supervisor.localize(\"common.save\")}\n          </ha-progress-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        :host,\n        ha-card,\n        paper-dropdown-menu {\n          display: block;\n        }\n        paper-item {\n          width: 450px;\n        }\n        .card-actions {\n          text-align: right;\n        }\n      `,\n    ];\n  }\n\n  protected update(changedProperties: PropertyValues): void {\n    super.update(changedProperties);\n    if (changedProperties.has(\"addon\")) {\n      this._addonChanged();\n    }\n  }\n\n  private _setInputDevice(ev): void {\n    const device = ev.detail.item.getAttribute(\"device\");\n    this._selectedInput = device;\n  }\n\n  private _setOutputDevice(ev): void {\n    const device = ev.detail.item.getAttribute(\"device\");\n    this._selectedOutput = device;\n  }\n\n  private async _addonChanged(): Promise<void> {\n    this._selectedInput =\n      this.addon.audio_input === null ? \"default\" : this.addon.audio_input;\n    this._selectedOutput =\n      this.addon.audio_output === null ? \"default\" : this.addon.audio_output;\n    if (this._outputDevices) {\n      return;\n    }\n\n    const noDevice: HassioHardwareAudioDevice = {\n      device: \"default\",\n      name: this.supervisor.localize(\"addon.configuration.audio.default\"),\n    };\n\n    try {\n      const { audio } = await fetchHassioHardwareAudio(this.hass);\n      const input = Object.keys(audio.input).map((key) => ({\n        device: key,\n        name: audio.input[key],\n      }));\n      const output = Object.keys(audio.output).map((key) => ({\n        device: key,\n        name: audio.output[key],\n      }));\n\n      this._inputDevices = [noDevice, ...input];\n      this._outputDevices = [noDevice, ...output];\n    } catch {\n      this._error = \"Failed to fetch audio hardware\";\n      this._inputDevices = [noDevice];\n      this._outputDevices = [noDevice];\n    }\n  }\n\n  private async _saveSettings(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    this._error = undefined;\n    const data: HassioAddonSetOptionParams = {\n      audio_input:\n        this._selectedInput === \"default\" ? null : this._selectedInput,\n      audio_output:\n        this._selectedOutput === \"default\" ? null : this._selectedOutput,\n    };\n    try {\n      await setHassioAddonOption(this.hass, this.addon.slug, data);\n      if (this.addon?.state === \"started\") {\n        await suggestAddonRestart(this, this.hass, this.supervisor, this.addon);\n      }\n    } catch {\n      this._error = \"Failed to set addon audio device\";\n    }\n\n    button.progress = false;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-audio\": HassioAddonAudio;\n  }\n}\n","import type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public error = false;\n\n  @state() private _value = \"\";\n\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.HighlightStyle.get(\n      this.codemirror.state,\n      this._loadedCodeMirror.tags.comment\n    );\n    return !!this.shadowRoot!.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.langCompartment!.reconfigure(\n          this._mode\n        ),\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.dispatch({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._blockKeyboardShortcuts();\n    this._load();\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private async _load(): Promise<void> {\n    this._loadedCodeMirror = await loadCodeMirror();\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions: [\n          this._loadedCodeMirror.lineNumbers(),\n          this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n          this._loadedCodeMirror.history(),\n          this._loadedCodeMirror.highlightSelectionMatches(),\n          this._loadedCodeMirror.highlightActiveLine(),\n          this._loadedCodeMirror.drawSelection(),\n          this._loadedCodeMirror.rectangularSelection(),\n          this._loadedCodeMirror.keymap.of([\n            ...this._loadedCodeMirror.defaultKeymap,\n            ...this._loadedCodeMirror.searchKeymap,\n            ...this._loadedCodeMirror.historyKeymap,\n            ...this._loadedCodeMirror.tabKeyBindings,\n            saveKeyBinding,\n          ] as KeyBinding[]),\n          this._loadedCodeMirror.langCompartment.of(this._mode),\n          this._loadedCodeMirror.theme,\n          this._loadedCodeMirror.Prec.fallback(\n            this._loadedCodeMirror.highlightStyle\n          ),\n          this._loadedCodeMirror.readonlyCompartment.of(\n            this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n          ),\n          this._loadedCodeMirror.EditorView.updateListener.of((update) =>\n            this._onUpdate(update)\n          ),\n        ],\n      }),\n      root: this.shadowRoot!,\n      parent: this.shadowRoot!,\n    });\n  }\n\n  private _blockKeyboardShortcuts() {\n    this.addEventListener(\"keydown\", (ev) => ev.stopPropagation());\n  }\n\n  private _onUpdate(update: ViewUpdate): void {\n    if (!update.docChanged) {\n      return;\n    }\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  // Only Lit 2.0 will use this\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.error-state) div.cm-wrap .cm-gutters {\n        border-color: var(--error-state-color, red);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { DEFAULT_SCHEMA, dump, load, Schema } from \"js-yaml\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-code-editor\";\n\nconst isEmpty = (obj: Record<string, unknown>): boolean => {\n  if (typeof obj !== \"object\") {\n    return false;\n  }\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n@customElement(\"ha-yaml-editor\")\nexport class HaYamlEditor extends LitElement {\n  @property() public value?: any;\n\n  @property({ attribute: false }) public yamlSchema: Schema = DEFAULT_SCHEMA;\n\n  @property() public defaultValue?: any;\n\n  @property() public isValid = true;\n\n  @property() public label?: string;\n\n  @state() private _yaml = \"\";\n\n  public setValue(value): void {\n    try {\n      this._yaml =\n        value && !isEmpty(value)\n          ? dump(value, { schema: this.yamlSchema })\n          : \"\";\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err, value);\n      alert(`There was an error converting to YAML: ${err}`);\n    }\n  }\n\n  protected firstUpdated(): void {\n    if (this.defaultValue) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._yaml === undefined) {\n      return html``;\n    }\n    return html`\n      ${this.label ? html`<p>${this.label}</p>` : \"\"}\n      <ha-code-editor\n        .value=${this._yaml}\n        mode=\"yaml\"\n        .error=${this.isValid === false}\n        @value-changed=${this._onChange}\n      ></ha-code-editor>\n    `;\n  }\n\n  private _onChange(ev: CustomEvent): void {\n    ev.stopPropagation();\n    this._yaml = ev.detail.value;\n    let parsed;\n    let isValid = true;\n\n    if (this._yaml) {\n      try {\n        parsed = load(this._yaml, { schema: this.yamlSchema });\n      } catch (err: any) {\n        // Invalid YAML\n        isValid = false;\n      }\n    } else {\n      parsed = {};\n    }\n\n    this.value = parsed;\n    this.isValid = isValid;\n\n    fireEvent(this, \"value-changed\", { value: parsed, isValid } as any);\n  }\n\n  get yaml() {\n    return this._yaml;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-yaml-editor\": HaYamlEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport { ActionDetail } from \"@material/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport { DEFAULT_SCHEMA, Type } from \"js-yaml\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport \"../../../../src/components/buttons/ha-progress-button\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-button-menu\";\nimport \"../../../../src/components/ha-card\";\nimport \"../../../../src/components/ha-form/ha-form\";\nimport type { HaFormSchema } from \"../../../../src/components/ha-form/types\";\nimport \"../../../../src/components/ha-formfield\";\nimport \"../../../../src/components/ha-icon-button\";\nimport \"../../../../src/components/ha-switch\";\nimport \"../../../../src/components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../../src/components/ha-yaml-editor\";\nimport {\n  HassioAddonDetails,\n  HassioAddonSetOptionParams,\n  setHassioAddonOption,\n  validateHassioAddonOption,\n} from \"../../../../src/data/hassio/addon\";\nimport { extractApiErrorMessage } from \"../../../../src/data/hassio/common\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport { showConfirmationDialog } from \"../../../../src/dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport type { HomeAssistant } from \"../../../../src/types\";\nimport { suggestAddonRestart } from \"../../dialogs/suggestAddonRestart\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\n\nconst SUPPORTED_UI_TYPES = [\"string\", \"select\", \"boolean\", \"integer\", \"float\"];\n\nconst ADDON_YAML_SCHEMA = DEFAULT_SCHEMA.extend([\n  new Type(\"!secret\", {\n    kind: \"scalar\",\n    construct: (data) => `!secret ${data}`,\n  }),\n]);\n\n@customElement(\"hassio-addon-config\")\nclass HassioAddonConfig extends LitElement {\n  @property({ attribute: false }) public addon!: HassioAddonDetails;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ type: Boolean }) private _configHasChanged = false;\n\n  @property({ type: Boolean }) private _valid = true;\n\n  @state() private _canShowSchema = false;\n\n  @state() private _showOptional = false;\n\n  @state() private _error?: string;\n\n  @state() private _options?: Record<string, unknown>;\n\n  @state() private _yamlMode = false;\n\n  @query(\"ha-yaml-editor\") private _editor?: HaYamlEditor;\n\n  public computeLabel = (entry: HaFormSchema): string =>\n    this.addon.translations[this.hass.language]?.configuration?.[entry.name]\n      ?.name ||\n    this.addon.translations.en?.configuration?.[entry.name].name ||\n    entry.name;\n\n  private _schema = memoizeOne((schema: HaFormSchema[]): HaFormSchema[] =>\n    // @ts-expect-error supervisor does not implement [string, string] for select.options[]\n    schema.map((entry) =>\n      entry.type === \"select\"\n        ? {\n            ...entry,\n            options: entry.options.map((option) => [option, option]),\n          }\n        : entry\n    )\n  );\n\n  private _filteredShchema = memoizeOne(\n    (options: Record<string, unknown>, schema: HaFormSchema[]) =>\n      schema.filter((entry) => entry.name in options || entry.required)\n  );\n\n  protected render(): TemplateResult {\n    const showForm =\n      !this._yamlMode && this._canShowSchema && this.addon.schema;\n    const hasHiddenOptions =\n      showForm &&\n      JSON.stringify(this.addon.schema) !==\n        JSON.stringify(\n          this._filteredShchema(this.addon.options, this.addon.schema!)\n        );\n    return html`\n      <h1>${this.addon.name}</h1>\n      <ha-card>\n        <div class=\"header\">\n          <h2>\n            ${this.supervisor.localize(\"addon.configuration.options.header\")}\n          </h2>\n          <div class=\"card-menu\">\n            <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n              <ha-icon-button\n                .label=${this.hass.localize(\"common.menu\")}\n                .path=${mdiDotsVertical}\n                slot=\"trigger\"\n              ></ha-icon-button>\n              <mwc-list-item .disabled=${!this._canShowSchema}>\n                ${this._yamlMode\n                  ? this.supervisor.localize(\n                      \"addon.configuration.options.edit_in_ui\"\n                    )\n                  : this.supervisor.localize(\n                      \"addon.configuration.options.edit_in_yaml\"\n                    )}\n              </mwc-list-item>\n              <mwc-list-item class=\"warning\">\n                ${this.supervisor.localize(\"common.reset_defaults\")}\n              </mwc-list-item>\n            </ha-button-menu>\n          </div>\n        </div>\n\n        <div class=\"card-content\">\n          ${showForm\n            ? html`<ha-form\n                .data=${this._options!}\n                @value-changed=${this._configChanged}\n                .computeLabel=${this.computeLabel}\n                .schema=${this._schema(\n                  this._showOptional\n                    ? this.addon.schema!\n                    : this._filteredShchema(\n                        this.addon.options,\n                        this.addon.schema!\n                      )\n                )}\n              ></ha-form>`\n            : html` <ha-yaml-editor\n                @value-changed=${this._configChanged}\n                .yamlSchema=${ADDON_YAML_SCHEMA}\n              ></ha-yaml-editor>`}\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          ${!this._yamlMode ||\n          (this._canShowSchema && this.addon.schema) ||\n          this._valid\n            ? \"\"\n            : html`\n                <ha-alert alert-type=\"error\">\n                  ${this.supervisor.localize(\n                    \"addon.configuration.options.invalid_yaml\"\n                  )}\n                </ha-alert>\n              `}\n        </div>\n        ${hasHiddenOptions\n          ? html`<ha-formfield\n              class=\"show-additional\"\n              .label=${this.supervisor.localize(\n                \"addon.configuration.options.show_unused_optional\"\n              )}\n            >\n              <ha-switch\n                @change=${this._toggleOptional}\n                .checked=${this._showOptional}\n              >\n              </ha-switch>\n            </ha-formfield>`\n          : \"\"}\n        <div class=\"card-actions right\">\n          <ha-progress-button\n            @click=${this._saveTapped}\n            .disabled=${!this._configHasChanged || !this._valid}\n          >\n            ${this.supervisor.localize(\"common.save\")}\n          </ha-progress-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._canShowSchema = !this.addon.schema!.find(\n      // @ts-ignore\n      (entry) => !SUPPORTED_UI_TYPES.includes(entry.type) || entry.multiple\n    );\n    this._yamlMode = !this._canShowSchema;\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"addon\")) {\n      this._options = { ...this.addon.options };\n    }\n    super.updated(changedProperties);\n    if (\n      changedProperties.has(\"_yamlMode\") ||\n      changedProperties.has(\"_options\")\n    ) {\n      if (this._yamlMode) {\n        const editor = this._editor;\n        if (editor) {\n          editor.setValue(this._options!);\n        }\n      }\n    }\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._yamlMode = !this._yamlMode;\n        break;\n      case 1:\n        this._resetTapped(ev);\n        break;\n    }\n  }\n\n  private _toggleOptional() {\n    this._showOptional = !this._showOptional;\n  }\n\n  private _configChanged(ev): void {\n    if (this.addon.schema && this._canShowSchema && !this._yamlMode) {\n      this._valid = true;\n      this._configHasChanged = true;\n      this._options! = ev.detail.value;\n    } else {\n      this._configHasChanged = true;\n      this._valid = ev.detail.isValid;\n    }\n  }\n\n  private async _resetTapped(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.supervisor.localize(\"confirm.reset_options.title\"),\n      text: this.supervisor.localize(\"confirm.reset_options.text\"),\n      confirmText: this.supervisor.localize(\"common.reset_options\"),\n      dismissText: this.supervisor.localize(\"common.cancel\"),\n    });\n\n    if (!confirmed) {\n      button.progress = false;\n      return;\n    }\n\n    this._error = undefined;\n    const data: HassioAddonSetOptionParams = {\n      options: null,\n    };\n    try {\n      await setHassioAddonOption(this.hass, this.addon.slug, data);\n      this._configHasChanged = false;\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"options\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.common.update_available\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n    button.progress = false;\n  }\n\n  private async _saveTapped(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    const options: Record<string, unknown> = this._yamlMode\n      ? this._editor?.value\n      : this._options;\n    const eventdata = {\n      success: true,\n      response: undefined,\n      path: \"options\",\n    };\n    button.progress = true;\n\n    this._error = undefined;\n\n    try {\n      const validation = await validateHassioAddonOption(\n        this.hass,\n        this.addon.slug,\n        options\n      );\n      if (!validation.valid) {\n        throw Error(validation.message);\n      }\n      await setHassioAddonOption(this.hass, this.addon.slug, {\n        options,\n      });\n\n      this._configHasChanged = false;\n      if (this.addon?.state === \"started\") {\n        await suggestAddonRestart(this, this.hass, this.supervisor, this.addon);\n      }\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.failed_to_save\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n      eventdata.success = false;\n    }\n    button.progress = false;\n    fireEvent(this, \"hass-api-called\", eventdata);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card {\n          display: block;\n        }\n        .card-actions {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        .card-menu {\n          float: right;\n          z-index: 3;\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n        .header {\n          display: flex;\n          justify-content: space-between;\n        }\n        .header h2 {\n          color: var(--ha-card-header-color, --primary-text-color);\n          font-family: var(--ha-card-header-font-family, inherit);\n          font-size: var(--ha-card-header-font-size, 24px);\n          letter-spacing: -0.012em;\n          line-height: 48px;\n          padding: 12px 16px 16px;\n          display: block;\n          margin-block: 0px;\n          font-weight: normal;\n        }\n        .card-actions.right {\n          justify-content: flex-end;\n        }\n\n        .show-additional {\n          padding: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-config\": HassioAddonConfig;\n  }\n}\n","import { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport \"../../../../src/components/buttons/ha-progress-button\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-card\";\nimport {\n  HassioAddonDetails,\n  HassioAddonSetOptionParams,\n  setHassioAddonOption,\n} from \"../../../../src/data/hassio/addon\";\nimport { extractApiErrorMessage } from \"../../../../src/data/hassio/common\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport { suggestAddonRestart } from \"../../dialogs/suggestAddonRestart\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\n\ninterface NetworkItem {\n  description: string;\n  container: string;\n  host: number | null;\n}\n\ninterface NetworkItemInput extends PaperInputElement {\n  container: string;\n}\n\n@customElement(\"hassio-addon-network\")\nclass HassioAddonNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public addon!: HassioAddonDetails;\n\n  @state() private _error?: string;\n\n  @state() private _config?: NetworkItem[];\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._setNetworkConfig();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        .header=${this.supervisor.localize(\n          \"addon.configuration.network.header\"\n        )}\n      >\n        <div class=\"card-content\">\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  ${this.supervisor.localize(\n                    \"addon.configuration.network.container\"\n                  )}\n                </th>\n                <th>\n                  ${this.supervisor.localize(\n                    \"addon.configuration.network.host\"\n                  )}\n                </th>\n                <th>${this.supervisor.localize(\"common.description\")}</th>\n              </tr>\n              ${this._config!.map(\n                (item) => html`\n                  <tr>\n                    <td>${item.container}</td>\n                    <td>\n                      <paper-input\n                        @value-changed=${this._configChanged}\n                        placeholder=${this.supervisor.localize(\n                          \"addon.configuration.network.disabled\"\n                        )}\n                        .value=${item.host ? String(item.host) : \"\"}\n                        .container=${item.container}\n                        no-label-float\n                      ></paper-input>\n                    </td>\n                    <td>${this._computeDescription(item)}</td>\n                  </tr>\n                `\n              )}\n            </tbody>\n          </table>\n        </div>\n        <div class=\"card-actions\">\n          <ha-progress-button class=\"warning\" @click=${this._resetTapped}>\n            ${this.supervisor.localize(\"common.reset_defaults\")}\n          </ha-progress-button>\n          <ha-progress-button @click=${this._saveTapped}>\n            ${this.supervisor.localize(\"common.save\")}\n          </ha-progress-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected update(changedProperties: PropertyValues): void {\n    super.update(changedProperties);\n    if (changedProperties.has(\"addon\")) {\n      this._setNetworkConfig();\n    }\n  }\n\n  private _computeDescription = (item: NetworkItem): string =>\n    this.addon.translations[this.hass.language]?.network?.[item.container]\n      ?.description ||\n    this.addon.translations.en?.network?.[item.container]?.description ||\n    item.description;\n\n  private _setNetworkConfig(): void {\n    const network = this.addon.network || {};\n    const description = this.addon.network_description || {};\n    const items: NetworkItem[] = Object.keys(network).map((key) => ({\n      container: key,\n      host: network[key],\n      description: description[key],\n    }));\n    this._config = items.sort((a, b) => (a.container > b.container ? 1 : -1));\n  }\n\n  private async _configChanged(ev: Event): Promise<void> {\n    const target = ev.target as NetworkItemInput;\n    this._config!.forEach((item) => {\n      if (\n        item.container === target.container &&\n        item.host !== parseInt(String(target.value), 10)\n      ) {\n        item.host = target.value ? parseInt(String(target.value), 10) : null;\n      }\n    });\n  }\n\n  private async _resetTapped(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    const data: HassioAddonSetOptionParams = {\n      network: null,\n    };\n\n    try {\n      await setHassioAddonOption(this.hass, this.addon.slug, data);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"option\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n      if (this.addon?.state === \"started\") {\n        await suggestAddonRestart(this, this.hass, this.supervisor, this.addon);\n      }\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.failed_to_reset\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n\n    button.progress = false;\n  }\n\n  private async _saveTapped(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    this._error = undefined;\n    const networkconfiguration = {};\n    this._config!.forEach((item) => {\n      networkconfiguration[item.container] = parseInt(String(item.host), 10);\n    });\n\n    const data: HassioAddonSetOptionParams = {\n      network: networkconfiguration,\n    };\n\n    try {\n      await setHassioAddonOption(this.hass, this.addon.slug, data);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"option\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n      if (this.addon?.state === \"started\") {\n        await suggestAddonRestart(this, this.hass, this.supervisor, this.addon);\n      }\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.failed_to_save\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n    button.progress = false;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card {\n          display: block;\n        }\n        .card-actions {\n          display: flex;\n          justify-content: space-between;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-network\": HassioAddonNetwork;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../src/components/ha-circular-progress\";\nimport { HassioAddonDetails } from \"../../../../src/data/hassio/addon\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\nimport \"./hassio-addon-audio\";\nimport \"./hassio-addon-config\";\nimport \"./hassio-addon-network\";\n\n@customElement(\"hassio-addon-config-tab\")\nclass HassioAddonConfigDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public addon?: HassioAddonDetails;\n\n  protected render(): TemplateResult {\n    if (!this.addon) {\n      return html`<ha-circular-progress active></ha-circular-progress>`;\n    }\n    const hasConfiguration =\n      (this.addon.options && Object.keys(this.addon.options).length) ||\n      (this.addon.schema && Object.keys(this.addon.schema).length);\n\n    return html`\n      <div class=\"content\">\n        ${hasConfiguration || this.addon.network || this.addon.audio\n          ? html`\n              ${hasConfiguration\n                ? html`\n                    <hassio-addon-config\n                      .hass=${this.hass}\n                      .addon=${this.addon}\n                      .supervisor=${this.supervisor}\n                    ></hassio-addon-config>\n                  `\n                : \"\"}\n              ${this.addon.network\n                ? html`\n                    <hassio-addon-network\n                      .hass=${this.hass}\n                      .addon=${this.addon}\n                      .supervisor=${this.supervisor}\n                    ></hassio-addon-network>\n                  `\n                : \"\"}\n              ${this.addon.audio\n                ? html`\n                    <hassio-addon-audio\n                      .hass=${this.hass}\n                      .addon=${this.addon}\n                      .supervisor=${this.supervisor}\n                    ></hassio-addon-audio>\n                  `\n                : \"\"}\n            `\n          : this.supervisor.localize(\"addon.configuration.no_configuration\")}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        .content {\n          margin: auto;\n          padding: 8px;\n          max-width: 1024px;\n        }\n        hassio-addon-network,\n        hassio-addon-audio,\n        hassio-addon-config {\n          margin-bottom: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-config-tab\": HassioAddonConfigDashboard;\n  }\n}\n","import \"../../../../src/components/ha-card\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-circular-progress\";\nimport \"../../../../src/components/ha-markdown\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  fetchHassioAddonDocumentation,\n  HassioAddonDetails,\n} from \"../../../../src/data/hassio/addon\";\nimport { extractApiErrorMessage } from \"../../../../src/data/hassio/common\";\nimport \"../../../../src/layouts/hass-loading-screen\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\n\n@customElement(\"hassio-addon-documentation-tab\")\nclass HassioAddonDocumentationDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public addon?: HassioAddonDetails;\n\n  @state() private _error?: string;\n\n  @state() private _content?: string;\n\n  public async connectedCallback(): Promise<void> {\n    super.connectedCallback();\n    await this._loadData();\n  }\n\n  protected render(): TemplateResult {\n    if (!this.addon) {\n      return html`<ha-circular-progress active></ha-circular-progress>`;\n    }\n    return html`\n      <div class=\"content\">\n        <ha-card>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"card-content\">\n            ${this._content\n              ? html`<ha-markdown .content=${this._content}></ha-markdown>`\n              : html`<hass-loading-screen no-toolbar></hass-loading-screen>`}\n          </div>\n        </ha-card>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        ha-card {\n          display: block;\n        }\n        .content {\n          margin: auto;\n          padding: 8px;\n          max-width: 1024px;\n        }\n        ha-markdown {\n          padding: 16px;\n        }\n      `,\n    ];\n  }\n\n  private async _loadData(): Promise<void> {\n    this._error = undefined;\n    try {\n      this._content = await fetchHassioAddonDocumentation(\n        this.hass,\n        this.addon!.slug\n      );\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.documentation.get_logs\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-documentation-tab\": HassioAddonDocumentationDashboard;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-progress-button\";\n\nclass HaCallApiButton extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public method: \"POST\" | \"GET\" | \"PUT\" | \"DELETE\" = \"POST\";\n\n  @property() public data = {};\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public progress = false;\n\n  @property() public path?: string;\n\n  @query(\"ha-progress-button\", true) private _progressButton;\n\n  render() {\n    return html`\n      <ha-progress-button\n        .progress=${this.progress}\n        @click=${this._buttonTapped}\n        ?disabled=${this.disabled}\n        ><slot></slot\n      ></ha-progress-button>\n    `;\n  }\n\n  async _buttonTapped() {\n    this.progress = true;\n    const eventData: {\n      method: string;\n      path: string;\n      data: any;\n      success?: boolean;\n      response?: any;\n    } = {\n      method: this.method,\n      path: this.path!,\n      data: this.data,\n    };\n\n    try {\n      const resp = await this.hass.callApi(this.method, this.path!, this.data);\n      this.progress = false;\n      this._progressButton.actionSuccess();\n      eventData.success = true;\n      eventData.response = resp;\n    } catch (err: any) {\n      this.progress = false;\n      this._progressButton.actionError();\n      eventData.success = false;\n      eventData.response = err;\n    }\n\n    fireEvent(this, \"hass-api-called\", eventData as any);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host([disabled]) {\n        pointer-events: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-call-api-button\", HaCallApiButton);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-call-api-button\": HaCallApiButton;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading {\n        --mdc-icon-size: 20px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.no-text\n        .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import \"@material/mwc-button\";\nimport {\n  mdiCheckCircle,\n  mdiChip,\n  mdiCircle,\n  mdiCursorDefaultClickOutline,\n  mdiDocker,\n  mdiExclamationThick,\n  mdiFlask,\n  mdiHomeAssistant,\n  mdiKey,\n  mdiNetwork,\n  mdiNumeric1,\n  mdiNumeric2,\n  mdiNumeric3,\n  mdiNumeric4,\n  mdiNumeric5,\n  mdiNumeric6,\n  mdiPound,\n  mdiShield,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { atLeastVersion } from \"../../../../src/common/config/version\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport { navigate } from \"../../../../src/common/navigate\";\nimport \"../../../../src/components/buttons/ha-call-api-button\";\nimport \"../../../../src/components/buttons/ha-progress-button\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-card\";\nimport \"../../../../src/components/ha-chip\";\nimport \"../../../../src/components/ha-markdown\";\nimport \"../../../../src/components/ha-settings-row\";\nimport \"../../../../src/components/ha-svg-icon\";\nimport \"../../../../src/components/ha-switch\";\nimport {\n  fetchHassioAddonChangelog,\n  fetchHassioAddonInfo,\n  HassioAddonDetails,\n  HassioAddonSetOptionParams,\n  HassioAddonSetSecurityParams,\n  installHassioAddon,\n  restartHassioAddon,\n  setHassioAddonOption,\n  setHassioAddonSecurity,\n  startHassioAddon,\n  stopHassioAddon,\n  uninstallHassioAddon,\n  validateHassioAddonOption,\n} from \"../../../../src/data/hassio/addon\";\nimport {\n  extractApiErrorMessage,\n  fetchHassioStats,\n  HassioStats,\n} from \"../../../../src/data/hassio/common\";\nimport { StoreAddon } from \"../../../../src/data/supervisor/store\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../src/dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport { HomeAssistant, Route } from \"../../../../src/types\";\nimport { bytesToString } from \"../../../../src/util/bytes-to-string\";\nimport \"../../components/hassio-card-content\";\nimport \"../../components/supervisor-metric\";\nimport { showHassioMarkdownDialog } from \"../../dialogs/markdown/show-dialog-hassio-markdown\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\nimport \"../../update-available/update-available-card\";\nimport { addonArchIsSupported, extractChangelog } from \"../../util/addon\";\n\nconst STAGE_ICON = {\n  stable: mdiCheckCircle,\n  experimental: mdiFlask,\n  deprecated: mdiExclamationThick,\n};\n\nconst RATING_ICON = {\n  1: mdiNumeric1,\n  2: mdiNumeric2,\n  3: mdiNumeric3,\n  4: mdiNumeric4,\n  5: mdiNumeric5,\n  6: mdiNumeric6,\n};\n\n@customElement(\"hassio-addon-info\")\nclass HassioAddonInfo extends LitElement {\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public addon!: HassioAddonDetails;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @state() private _metrics?: HassioStats;\n\n  @state() private _error?: string;\n\n  private _addonStoreInfo = memoizeOne(\n    (slug: string, storeAddons: StoreAddon[]) =>\n      storeAddons.find((addon) => addon.slug === slug)\n  );\n\n  protected render(): TemplateResult {\n    const addonStoreInfo =\n      !this.addon.detached && !this.addon.available\n        ? this._addonStoreInfo(this.addon.slug, this.supervisor.store.addons)\n        : undefined;\n    const metrics = [\n      {\n        description: this.supervisor.localize(\"addon.dashboard.cpu_usage\"),\n        value: this._metrics?.cpu_percent,\n      },\n      {\n        description: this.supervisor.localize(\"addon.dashboard.ram_usage\"),\n        value: this._metrics?.memory_percent,\n        tooltip: `${bytesToString(this._metrics?.memory_usage)}/${bytesToString(\n          this._metrics?.memory_limit\n        )}`,\n      },\n    ];\n    return html`\n      ${this.addon.update_available\n        ? html`\n            <update-available-card\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .supervisor=${this.supervisor}\n              .addonSlug=${this.addon.slug}\n              @update-complete=${this._updateComplete}\n            ></update-available-card>\n          `\n        : \"\"}\n      ${!this.addon.protected\n        ? html`\n            <ha-alert\n              alert-type=\"error\"\n              .title=${this.supervisor.localize(\n                \"addon.dashboard.protection_mode.title\"\n              )}\n            >\n              ${this.supervisor.localize(\n                \"addon.dashboard.protection_mode.content\"\n              )}\n              <mwc-button\n                slot=\"action\"\n                .label=${this.supervisor.localize(\n                  \"addon.dashboard.protection_mode.enable\"\n                )}\n                @click=${this._protectionToggled}\n              >\n              </mwc-button>\n            </ha-alert>\n          `\n        : \"\"}\n\n      <ha-card>\n        <div class=\"card-content\">\n          <div class=\"addon-header\">\n            ${!this.narrow ? this.addon.name : \"\"}\n            <div class=\"addon-version light-color\">\n              ${this.addon.version\n                ? html`\n                    ${this._computeIsRunning\n                      ? html`\n                          <ha-svg-icon\n                            .title=${this.supervisor.localize(\n                              \"dashboard.addon_running\"\n                            )}\n                            class=\"running\"\n                            .path=${mdiCircle}\n                          ></ha-svg-icon>\n                        `\n                      : html`\n                          <ha-svg-icon\n                            .title=${this.supervisor.localize(\n                              \"dashboard.addon_stopped\"\n                            )}\n                            class=\"stopped\"\n                            .path=${mdiCircle}\n                          ></ha-svg-icon>\n                        `}\n                  `\n                : html` ${this.addon.version_latest} `}\n            </div>\n          </div>\n          <div class=\"description light-color\">\n            ${this.addon.version\n              ? html`\n                  Current version: ${this.addon.version}\n                  <div class=\"changelog\" @click=${this._openChangelog}>\n                    (<span class=\"changelog-link\"\n                      >${this.supervisor.localize(\n                        \"addon.dashboard.changelog\"\n                      )}</span\n                    >)\n                  </div>\n                `\n              : html`<span class=\"changelog-link\" @click=${this._openChangelog}\n                  >${this.supervisor.localize(\n                    \"addon.dashboard.changelog\"\n                  )}</span\n                >`}\n          </div>\n\n          <div class=\"capabilities\">\n            ${this.addon.stage !== \"stable\"\n              ? html` <ha-chip\n                  hasIcon\n                  class=${classMap({\n                    yellow: this.addon.stage === \"experimental\",\n                    red: this.addon.stage === \"deprecated\",\n                  })}\n                  @click=${this._showMoreInfo}\n                  id=\"stage\"\n                >\n                  <ha-svg-icon\n                    slot=\"icon\"\n                    .path=${STAGE_ICON[this.addon.stage]}\n                  >\n                  </ha-svg-icon>\n                  ${this.supervisor.localize(\n                    `addon.dashboard.capability.stages.${this.addon.stage}`\n                  )}\n                </ha-chip>`\n              : \"\"}\n\n            <ha-chip\n              hasIcon\n              class=${classMap({\n                green: [5, 6].includes(Number(this.addon.rating)),\n                yellow: [3, 4].includes(Number(this.addon.rating)),\n                red: [1, 2].includes(Number(this.addon.rating)),\n              })}\n              @click=${this._showMoreInfo}\n              id=\"rating\"\n            >\n              <ha-svg-icon slot=\"icon\" .path=${RATING_ICON[this.addon.rating]}>\n              </ha-svg-icon>\n\n              ${this.supervisor.localize(\n                \"addon.dashboard.capability.label.rating\"\n              )}\n            </ha-chip>\n            ${this.addon.host_network\n              ? html`\n                  <ha-chip\n                    hasIcon\n                    @click=${this._showMoreInfo}\n                    id=\"host_network\"\n                  >\n                    <ha-svg-icon slot=\"icon\" .path=${mdiNetwork}> </ha-svg-icon>\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.capability.label.host\"\n                    )}\n                  </ha-chip>\n                `\n              : \"\"}\n            ${this.addon.full_access\n              ? html`\n                  <ha-chip\n                    hasIcon\n                    @click=${this._showMoreInfo}\n                    id=\"full_access\"\n                  >\n                    <ha-svg-icon slot=\"icon\" .path=${mdiChip}></ha-svg-icon>\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.capability.label.hardware\"\n                    )}\n                  </ha-chip>\n                `\n              : \"\"}\n            ${this.addon.homeassistant_api\n              ? html`\n                  <ha-chip\n                    hasIcon\n                    @click=${this._showMoreInfo}\n                    id=\"homeassistant_api\"\n                  >\n                    <ha-svg-icon\n                      slot=\"icon\"\n                      .path=${mdiHomeAssistant}\n                    ></ha-svg-icon>\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.capability.label.core\"\n                    )}\n                  </ha-chip>\n                `\n              : \"\"}\n            ${this._computeHassioApi\n              ? html`\n                  <ha-chip hasIcon @click=${this._showMoreInfo} id=\"hassio_api\">\n                    <ha-svg-icon\n                      slot=\"icon\"\n                      .path=${mdiHomeAssistant}\n                    ></ha-svg-icon>\n                    ${this.supervisor.localize(\n                      `addon.dashboard.capability.role.${this.addon.hassio_role}`\n                    ) || this.addon.hassio_role}\n                  </ha-chip>\n                `\n              : \"\"}\n            ${this.addon.docker_api\n              ? html`\n                  <ha-chip hasIcon @click=${this._showMoreInfo} id=\"docker_api\">\n                    <ha-svg-icon slot=\"icon\" .path=${mdiDocker}></ha-svg-icon>\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.capability.label.docker\"\n                    )}\n                  </ha-chip>\n                `\n              : \"\"}\n            ${this.addon.host_pid\n              ? html`\n                  <ha-chip hasIcon @click=${this._showMoreInfo} id=\"host_pid\">\n                    <ha-svg-icon slot=\"icon\" .path=${mdiPound}></ha-svg-icon>\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.capability.label.host_pid\"\n                    )}\n                  </ha-chip>\n                `\n              : \"\"}\n            ${this.addon.apparmor !== \"default\"\n              ? html`\n                  <ha-chip\n                    hasIcon\n                    @click=${this._showMoreInfo}\n                    class=${this._computeApparmorClassName}\n                    id=\"apparmor\"\n                  >\n                    <ha-svg-icon slot=\"icon\" .path=${mdiShield}></ha-svg-icon>\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.capability.label.apparmor\"\n                    )}\n                  </ha-chip>\n                `\n              : \"\"}\n            ${this.addon.auth_api\n              ? html`\n                  <ha-chip hasIcon @click=${this._showMoreInfo} id=\"auth_api\">\n                    <ha-svg-icon slot=\"icon\" .path=${mdiKey}></ha-svg-icon>\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.capability.label.auth\"\n                    )}\n                  </ha-chip>\n                `\n              : \"\"}\n            ${this.addon.ingress\n              ? html`\n                  <ha-chip hasIcon @click=${this._showMoreInfo} id=\"ingress\">\n                    <ha-svg-icon\n                      slot=\"icon\"\n                      .path=${mdiCursorDefaultClickOutline}\n                    ></ha-svg-icon>\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.capability.label.ingress\"\n                    )}\n                  </ha-chip>\n                `\n              : \"\"}\n          </div>\n\n          <div class=\"description light-color\">\n            ${this.addon.description}.<br />\n            ${this.supervisor.localize(\n              \"addon.dashboard.visit_addon_page\",\n              \"name\",\n              html`<a href=${this.addon.url!} target=\"_blank\" rel=\"noreferrer\"\n                >${this.addon.name}</a\n              >`\n            )}\n          </div>\n          <div class=\"addon-container\">\n            <div>\n              ${this.addon.logo\n                ? html`\n                    <img\n                      class=\"logo\"\n                      src=\"/api/hassio/addons/${this.addon.slug}/logo\"\n                    />\n                  `\n                : \"\"}\n              ${this.addon.version\n                ? html`\n                    <div\n                      class=${classMap({\n                        \"addon-options\": true,\n                        started: this.addon.state === \"started\",\n                      })}\n                    >\n                      <ha-settings-row ?three-line=${this.narrow}>\n                        <span slot=\"heading\">\n                          ${this.supervisor.localize(\n                            \"addon.dashboard.option.boot.title\"\n                          )}\n                        </span>\n                        <span slot=\"description\">\n                          ${this.supervisor.localize(\n                            \"addon.dashboard.option.boot.description\"\n                          )}\n                        </span>\n                        <ha-switch\n                          @change=${this._startOnBootToggled}\n                          .checked=${this.addon.boot === \"auto\"}\n                          haptic\n                        ></ha-switch>\n                      </ha-settings-row>\n\n                      ${this.addon.startup !== \"once\"\n                        ? html`\n                            <ha-settings-row ?three-line=${this.narrow}>\n                              <span slot=\"heading\">\n                                ${this.supervisor.localize(\n                                  \"addon.dashboard.option.watchdog.title\"\n                                )}\n                              </span>\n                              <span slot=\"description\">\n                                ${this.supervisor.localize(\n                                  \"addon.dashboard.option.watchdog.description\"\n                                )}\n                              </span>\n                              <ha-switch\n                                @change=${this._watchdogToggled}\n                                .checked=${this.addon.watchdog}\n                                haptic\n                              ></ha-switch>\n                            </ha-settings-row>\n                          `\n                        : \"\"}\n                      ${this.addon.auto_update ||\n                      this.hass.userData?.showAdvanced\n                        ? html`\n                            <ha-settings-row ?three-line=${this.narrow}>\n                              <span slot=\"heading\">\n                                ${this.supervisor.localize(\n                                  \"addon.dashboard.option.auto_update.title\"\n                                )}\n                              </span>\n                              <span slot=\"description\">\n                                ${this.supervisor.localize(\n                                  \"addon.dashboard.option.auto_update.description\"\n                                )}\n                              </span>\n                              <ha-switch\n                                @change=${this._autoUpdateToggled}\n                                .checked=${this.addon.auto_update}\n                                haptic\n                              ></ha-switch>\n                            </ha-settings-row>\n                          `\n                        : \"\"}\n                      ${!this._computeCannotIngressSidebar && this.addon.ingress\n                        ? html`\n                            <ha-settings-row ?three-line=${this.narrow}>\n                              <span slot=\"heading\">\n                                ${this.supervisor.localize(\n                                  \"addon.dashboard.option.ingress_panel.title\"\n                                )}\n                              </span>\n                              <span slot=\"description\">\n                                ${this.supervisor.localize(\n                                  \"addon.dashboard.option.ingress_panel.description\"\n                                )}\n                              </span>\n                              <ha-switch\n                                @change=${this._panelToggled}\n                                .checked=${this.addon.ingress_panel}\n                                haptic\n                              ></ha-switch>\n                            </ha-settings-row>\n                          `\n                        : \"\"}\n                      ${this._computeUsesProtectedOptions\n                        ? html`\n                            <ha-settings-row ?three-line=${this.narrow}>\n                              <span slot=\"heading\">\n                                ${this.supervisor.localize(\n                                  \"addon.dashboard.option.protected.title\"\n                                )}\n                              </span>\n                              <span slot=\"description\">\n                                ${this.supervisor.localize(\n                                  \"addon.dashboard.option.protected.description\"\n                                )}\n                              </span>\n                              <ha-switch\n                                @change=${this._protectionToggled}\n                                .checked=${this.addon.protected}\n                                haptic\n                              ></ha-switch>\n                            </ha-settings-row>\n                          `\n                        : \"\"}\n                    </div>\n                  `\n                : \"\"}\n            </div>\n            <div>\n              ${this.addon.state === \"started\"\n                ? html`<ha-settings-row ?three-line=${this.narrow}>\n                      <span slot=\"heading\">\n                        ${this.supervisor.localize(\"addon.dashboard.hostname\")}\n                      </span>\n                      <code slot=\"description\"> ${this.addon.hostname} </code>\n                    </ha-settings-row>\n                    ${metrics.map(\n                      (metric) =>\n                        html`\n                          <supervisor-metric\n                            .description=${metric.description}\n                            .value=${metric.value ?? 0}\n                            .tooltip=${metric.tooltip}\n                          ></supervisor-metric>\n                        `\n                    )}`\n                : \"\"}\n            </div>\n          </div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          ${!this.addon.version && addonStoreInfo && !this.addon.available\n            ? !addonArchIsSupported(\n                this.supervisor.info.supported_arch,\n                this.addon.arch\n              )\n              ? html`\n                  <ha-alert alert-type=\"warning\">\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.not_available_arch\"\n                    )}\n                  </ha-alert>\n                `\n              : html`\n                  <ha-alert alert-type=\"warning\">\n                    ${this.supervisor.localize(\n                      \"addon.dashboard.not_available_version\",\n                      \"core_version_installed\",\n                      this.supervisor.core.version,\n                      \"core_version_needed\",\n                      addonStoreInfo!.homeassistant\n                    )}\n                  </ha-alert>\n                `\n            : \"\"}\n        </div>\n        <div class=\"card-actions\">\n          <div>\n            ${this.addon.version\n              ? this._computeIsRunning\n                ? html`\n                    <ha-progress-button\n                      class=\"warning\"\n                      @click=${this._stopClicked}\n                    >\n                      ${this.supervisor.localize(\"addon.dashboard.stop\")}\n                    </ha-progress-button>\n                    <ha-progress-button\n                      class=\"warning\"\n                      @click=${this._restartClicked}\n                    >\n                      ${this.supervisor.localize(\"addon.dashboard.restart\")}\n                    </ha-progress-button>\n                  `\n                : html`\n                    <ha-progress-button @click=${this._startClicked}>\n                      ${this.supervisor.localize(\"addon.dashboard.start\")}\n                    </ha-progress-button>\n                  `\n              : html`\n                  <ha-progress-button\n                    .disabled=${!this.addon.available}\n                    @click=${this._installClicked}\n                  >\n                    ${this.supervisor.localize(\"addon.dashboard.install\")}\n                  </ha-progress-button>\n                `}\n          </div>\n          <div>\n            ${this.addon.version\n              ? html` ${this._computeShowWebUI\n                    ? html`\n                        <a\n                          href=${this._pathWebui!}\n                          tabindex=\"-1\"\n                          target=\"_blank\"\n                          rel=\"noopener\"\n                        >\n                          <mwc-button>\n                            ${this.supervisor.localize(\n                              \"addon.dashboard.open_web_ui\"\n                            )}\n                          </mwc-button>\n                        </a>\n                      `\n                    : \"\"}\n                  ${this._computeShowIngressUI\n                    ? html`\n                        <mwc-button @click=${this._openIngress}>\n                          ${this.supervisor.localize(\n                            \"addon.dashboard.open_web_ui\"\n                          )}\n                        </mwc-button>\n                      `\n                    : \"\"}\n                  <ha-progress-button\n                    class=\"warning\"\n                    @click=${this._uninstallClicked}\n                  >\n                    ${this.supervisor.localize(\"addon.dashboard.uninstall\")}\n                  </ha-progress-button>\n                  ${this.addon.build\n                    ? html`\n                        <ha-call-api-button\n                          class=\"warning\"\n                          .hass=${this.hass}\n                          .path=\"hassio/addons/${this.addon.slug}/rebuild\"\n                        >\n                          ${this.supervisor.localize(\"addon.dashboard.rebuild\")}\n                        </ha-call-api-button>\n                      `\n                    : \"\"}`\n              : \"\"}\n          </div>\n        </div>\n      </ha-card>\n\n      ${this.addon.long_description\n        ? html`\n            <ha-card>\n              <div class=\"card-content\">\n                <ha-markdown\n                  .content=${this.addon.long_description}\n                ></ha-markdown>\n              </div>\n            </ha-card>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"addon\")) {\n      this._loadData();\n    }\n  }\n\n  private async _loadData(): Promise<void> {\n    if (this.addon.state === \"started\") {\n      this._metrics = await fetchHassioStats(\n        this.hass,\n        `addons/${this.addon.slug}`\n      );\n    }\n  }\n\n  private get _computeHassioApi(): boolean {\n    return (\n      this.addon.hassio_api &&\n      (this.addon.hassio_role === \"manager\" ||\n        this.addon.hassio_role === \"admin\")\n    );\n  }\n\n  private get _computeApparmorClassName(): string {\n    if (this.addon.apparmor === \"profile\") {\n      return \"green\";\n    }\n    if (this.addon.apparmor === \"disable\") {\n      return \"red\";\n    }\n    return \"\";\n  }\n\n  private _showMoreInfo(ev): void {\n    const id = ev.currentTarget.id;\n    showHassioMarkdownDialog(this, {\n      title: this.supervisor.localize(`addon.dashboard.capability.${id}.title`),\n      content:\n        id === \"stage\"\n          ? this.supervisor.localize(\n              `addon.dashboard.capability.${id}.description`,\n              \"icon_stable\",\n              `<ha-svg-icon path=\"${STAGE_ICON.stable}\"></ha-svg-icon>`,\n              \"icon_experimental\",\n              `<ha-svg-icon path=\"${STAGE_ICON.experimental}\"></ha-svg-icon>`,\n              \"icon_deprecated\",\n              `<ha-svg-icon path=\"${STAGE_ICON.deprecated}\"></ha-svg-icon>`\n            )\n          : this.supervisor.localize(\n              `addon.dashboard.capability.${id}.description`\n            ),\n    });\n  }\n\n  private get _computeIsRunning(): boolean {\n    return this.addon?.state === \"started\";\n  }\n\n  private get _pathWebui(): string | null {\n    return (\n      this.addon.webui &&\n      this.addon.webui.replace(\"[HOST]\", document.location.hostname)\n    );\n  }\n\n  private get _computeShowWebUI(): boolean | \"\" | null {\n    return !this.addon.ingress && this.addon.webui && this._computeIsRunning;\n  }\n\n  private _openIngress(): void {\n    navigate(`/hassio/ingress/${this.addon.slug}`);\n  }\n\n  private get _computeShowIngressUI(): boolean {\n    return this.addon.ingress && this._computeIsRunning;\n  }\n\n  private get _computeCannotIngressSidebar(): boolean {\n    return (\n      !this.addon.ingress || !atLeastVersion(this.hass.config.version, 0, 92)\n    );\n  }\n\n  private get _computeUsesProtectedOptions(): boolean {\n    return (\n      this.addon.docker_api || this.addon.full_access || this.addon.host_pid\n    );\n  }\n\n  private async _startOnBootToggled(): Promise<void> {\n    this._error = undefined;\n    const data: HassioAddonSetOptionParams = {\n      boot: this.addon.boot === \"auto\" ? \"manual\" : \"auto\",\n    };\n    try {\n      await setHassioAddonOption(this.hass, this.addon.slug, data);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"option\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.failed_to_save\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n  }\n\n  private async _watchdogToggled(): Promise<void> {\n    this._error = undefined;\n    const data: HassioAddonSetOptionParams = {\n      watchdog: !this.addon.watchdog,\n    };\n    try {\n      await setHassioAddonOption(this.hass, this.addon.slug, data);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"option\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.failed_to_save\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n  }\n\n  private async _autoUpdateToggled(): Promise<void> {\n    this._error = undefined;\n    const data: HassioAddonSetOptionParams = {\n      auto_update: !this.addon.auto_update,\n    };\n    try {\n      await setHassioAddonOption(this.hass, this.addon.slug, data);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"option\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.failed_to_save\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n  }\n\n  private async _protectionToggled(): Promise<void> {\n    this._error = undefined;\n    const data: HassioAddonSetSecurityParams = {\n      protected: !this.addon.protected,\n    };\n    try {\n      await setHassioAddonSecurity(this.hass, this.addon.slug, data);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"security\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.failed_to_save\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n  }\n\n  private async _panelToggled(): Promise<void> {\n    this._error = undefined;\n    const data: HassioAddonSetOptionParams = {\n      ingress_panel: !this.addon.ingress_panel,\n    };\n    try {\n      await setHassioAddonOption(this.hass, this.addon.slug, data);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"option\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.failed_to_save\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n  }\n\n  private async _openChangelog(): Promise<void> {\n    try {\n      const content = await fetchHassioAddonChangelog(\n        this.hass,\n        this.addon.slug\n      );\n\n      showHassioMarkdownDialog(this, {\n        title: this.supervisor.localize(\"addon.dashboard.changelog\"),\n        content: extractChangelog(this.addon, content),\n      });\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.supervisor.localize(\n          \"addon.dashboard.action_error.get_changelog\"\n        ),\n        text: extractApiErrorMessage(err),\n      });\n    }\n  }\n\n  private _updateComplete() {\n    const eventdata = {\n      success: true,\n      response: undefined,\n      path: \"install\",\n    };\n    fireEvent(this, \"hass-api-called\", eventdata);\n  }\n\n  private async _installClicked(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    try {\n      await installHassioAddon(this.hass, this.addon.slug);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"install\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.supervisor.localize(\"addon.dashboard.action_error.install\"),\n        text: extractApiErrorMessage(err),\n      });\n    }\n    button.progress = false;\n  }\n\n  private async _stopClicked(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    try {\n      await stopHassioAddon(this.hass, this.addon.slug);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"stop\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.supervisor.localize(\"addon.dashboard.action_error.stop\"),\n        text: extractApiErrorMessage(err),\n      });\n    }\n    button.progress = false;\n  }\n\n  private async _restartClicked(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    try {\n      await restartHassioAddon(this.hass, this.addon.slug);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"stop\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.supervisor.localize(\"addon.dashboard.action_error.restart\"),\n        text: extractApiErrorMessage(err),\n      });\n    }\n    button.progress = false;\n  }\n\n  private async _startClicked(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n    try {\n      const validate = await validateHassioAddonOption(\n        this.hass,\n        this.addon.slug\n      );\n      if (!validate.valid) {\n        await showConfirmationDialog(this, {\n          title: this.supervisor.localize(\n            \"addon.dashboard.action_error.start_invalid_config\"\n          ),\n          text: validate.message.split(\" Got \")[0],\n          confirm: () => this._openConfiguration(),\n          confirmText: this.supervisor.localize(\n            \"addon.dashboard.action_error.go_to_config\"\n          ),\n          dismissText: this.supervisor.localize(\"common.cancel\"),\n        });\n        button.progress = false;\n        return;\n      }\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Failed to validate addon configuration\",\n        text: extractApiErrorMessage(err),\n      });\n      button.progress = false;\n      return;\n    }\n\n    try {\n      await startHassioAddon(this.hass, this.addon.slug);\n      this.addon = await fetchHassioAddonInfo(this.hass, this.addon.slug);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"start\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.supervisor.localize(\"addon.dashboard.action_error.start\"),\n        text: extractApiErrorMessage(err),\n      });\n    }\n    button.progress = false;\n  }\n\n  private _openConfiguration(): void {\n    navigate(`/hassio/addon/${this.addon.slug}/config`);\n  }\n\n  private async _uninstallClicked(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.addon.name,\n      text: \"Are you sure you want to uninstall this add-on?\",\n      confirmText: \"uninstall add-on\",\n      dismissText: \"no\",\n    });\n\n    if (!confirmed) {\n      button.progress = false;\n      return;\n    }\n\n    this._error = undefined;\n    try {\n      await uninstallHassioAddon(this.hass, this.addon.slug);\n      const eventdata = {\n        success: true,\n        response: undefined,\n        path: \"uninstall\",\n      };\n      fireEvent(this, \"hass-api-called\", eventdata);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.supervisor.localize(\n          \"addon.dashboard.action_error.uninstall\"\n        ),\n        text: extractApiErrorMessage(err),\n      });\n    }\n    button.progress = false;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card {\n          display: block;\n          margin-bottom: 16px;\n        }\n        ha-card.warning {\n          background-color: var(--error-color);\n          color: white;\n        }\n        ha-card.warning .card-header {\n          color: white;\n        }\n        ha-card.warning .card-content {\n          color: white;\n        }\n        ha-card.warning mwc-button {\n          --mdc-theme-primary: white !important;\n        }\n        .warning {\n          color: var(--error-color);\n          --mdc-theme-primary: var(--error-color);\n        }\n        .light-color {\n          color: var(--secondary-text-color);\n        }\n        .addon-header {\n          padding-left: 8px;\n          font-size: 24px;\n          color: var(--ha-card-header-color, --primary-text-color);\n        }\n        .addon-version {\n          float: right;\n          font-size: 15px;\n          vertical-align: middle;\n        }\n        .errors {\n          color: var(--error-color);\n          margin-bottom: 16px;\n        }\n        .description {\n          margin-bottom: 16px;\n        }\n        img.logo {\n          max-width: 100%;\n          max-height: 60px;\n          margin: 16px 0;\n          display: block;\n        }\n\n        ha-switch {\n          display: flex;\n        }\n        ha-svg-icon.running {\n          color: var(--success-color);\n        }\n        ha-svg-icon.stopped {\n          color: var(--error-color);\n        }\n        ha-call-api-button {\n          font-weight: 500;\n          color: var(--primary-color);\n        }\n        protection-enable mwc-button {\n          --mdc-theme-primary: white;\n        }\n        .description a {\n          color: var(--primary-color);\n        }\n        ha-chip {\n          text-transform: capitalize;\n          --ha-chip-text-color: var(--text-primary-color);\n          --ha-chip-background-color: var(--primary-color);\n        }\n\n        .red {\n          --ha-chip-background-color: var(--label-badge-red, #df4c1e);\n        }\n        .blue {\n          --ha-chip-background-color: var(--label-badge-blue, #039be5);\n        }\n        .green {\n          --ha-chip-background-color: var(--label-badge-green, #0da035);\n        }\n        .yellow {\n          --ha-chip-background-color: var(--label-badge-yellow, #f4b400);\n        }\n        .capabilities {\n          margin-bottom: 16px;\n        }\n        .card-actions {\n          justify-content: space-between;\n          display: flex;\n        }\n        .changelog {\n          display: contents;\n        }\n        .changelog-link {\n          color: var(--primary-color);\n          text-decoration: underline;\n          cursor: pointer;\n        }\n        ha-markdown {\n          padding: 16px;\n        }\n        ha-settings-row {\n          padding: 0;\n          height: 54px;\n          width: 100%;\n        }\n        ha-settings-row > span[slot=\"description\"] {\n          white-space: normal;\n          color: var(--secondary-text-color);\n        }\n        ha-settings-row[three-line] {\n          height: 74px;\n        }\n\n        .addon-options {\n          max-width: 90%;\n        }\n\n        .addon-container {\n          display: grid;\n          grid-auto-flow: column;\n          grid-template-columns: 60% 40%;\n        }\n\n        .addon-container > div:last-of-type {\n          align-self: end;\n        }\n\n        ha-alert mwc-button {\n          --mdc-theme-primary: var(--primary-text-color);\n        }\n        a {\n          text-decoration: none;\n        }\n\n        update-available-card {\n          padding-bottom: 16px;\n        }\n\n        @media (max-width: 720px) {\n          ha-chip {\n            line-height: 36px;\n          }\n          .addon-options {\n            max-width: 100%;\n          }\n          .addon-container {\n            display: block;\n          }\n        }\n      `,\n    ];\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-info\": HassioAddonInfo;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../src/components/ha-circular-progress\";\nimport { HassioAddonDetails } from \"../../../../src/data/hassio/addon\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport { HomeAssistant, Route } from \"../../../../src/types\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\nimport \"./hassio-addon-info\";\n\n@customElement(\"hassio-addon-info-tab\")\nclass HassioAddonInfoDashboard extends LitElement {\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public addon?: HassioAddonDetails;\n\n  protected render(): TemplateResult {\n    if (!this.addon) {\n      return html`<ha-circular-progress active></ha-circular-progress>`;\n    }\n\n    return html`\n      <div class=\"content\">\n        <hassio-addon-info\n          .narrow=${this.narrow}\n          .route=${this.route}\n          .hass=${this.hass}\n          .supervisor=${this.supervisor}\n          .addon=${this.addon}\n        ></hassio-addon-info>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        .content {\n          margin: auto;\n          padding: 8px;\n          max-width: 1024px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-info-tab\": HassioAddonInfoDashboard;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-card\";\nimport {\n  fetchHassioAddonLogs,\n  HassioAddonDetails,\n} from \"../../../../src/data/hassio/addon\";\nimport { extractApiErrorMessage } from \"../../../../src/data/hassio/common\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport \"../../components/hassio-ansi-to-html\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\n\n@customElement(\"hassio-addon-logs\")\nclass HassioAddonLogs extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public addon!: HassioAddonDetails;\n\n  @state() private _error?: string;\n\n  @state() private _content?: string;\n\n  public async connectedCallback(): Promise<void> {\n    super.connectedCallback();\n    await this._loadData();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <h1>${this.addon.name}</h1>\n      <ha-card>\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n          : \"\"}\n        <div class=\"card-content\">\n          ${this._content\n            ? html`<hassio-ansi-to-html\n                .content=${this._content}\n              ></hassio-ansi-to-html>`\n            : \"\"}\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._refresh}>\n            ${this.supervisor.localize(\"common.refresh\")}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        :host,\n        ha-card {\n          display: block;\n        }\n      `,\n    ];\n  }\n\n  private async _loadData(): Promise<void> {\n    this._error = undefined;\n    try {\n      this._content = await fetchHassioAddonLogs(this.hass, this.addon.slug);\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\n        \"addon.logs.get_logs\",\n        \"error\",\n        extractApiErrorMessage(err)\n      );\n    }\n  }\n\n  private async _refresh(): Promise<void> {\n    await this._loadData();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-logs\": HassioAddonLogs;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../src/components/ha-circular-progress\";\nimport { HassioAddonDetails } from \"../../../../src/data/hassio/addon\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport { haStyle } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport { hassioStyle } from \"../../resources/hassio-style\";\nimport \"./hassio-addon-logs\";\n\n@customElement(\"hassio-addon-log-tab\")\nclass HassioAddonLogDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public addon?: HassioAddonDetails;\n\n  protected render(): TemplateResult {\n    if (!this.addon) {\n      return html` <ha-circular-progress active></ha-circular-progress> `;\n    }\n    return html`\n      <div class=\"content\">\n        <hassio-addon-logs\n          .hass=${this.hass}\n          .supervisor=${this.supervisor}\n          .addon=${this.addon}\n        ></hassio-addon-logs>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        .content {\n          margin: auto;\n          padding: 8px;\n          max-width: 1024px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-log-tab\": HassioAddonLogDashboard;\n  }\n}\n","import {\n  mdiCogs,\n  mdiFileDocument,\n  mdiInformationVariant,\n  mdiMathLog,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../src/common/dom/fire_event\";\nimport { navigate } from \"../../../src/common/navigate\";\nimport { extractSearchParam } from \"../../../src/common/url/search-params\";\nimport \"../../../src/components/ha-circular-progress\";\nimport {\n  fetchHassioAddonInfo,\n  fetchHassioAddonsInfo,\n  HassioAddonDetails,\n} from \"../../../src/data/hassio/addon\";\nimport { extractApiErrorMessage } from \"../../../src/data/hassio/common\";\nimport { Supervisor } from \"../../../src/data/supervisor/supervisor\";\nimport \"../../../src/layouts/hass-error-screen\";\nimport \"../../../src/layouts/hass-loading-screen\";\nimport \"../../../src/layouts/hass-tabs-subpage\";\nimport type { PageNavigation } from \"../../../src/layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../src/resources/styles\";\nimport { HomeAssistant, Route } from \"../../../src/types\";\nimport { hassioStyle } from \"../resources/hassio-style\";\nimport \"./config/hassio-addon-audio\";\nimport \"./config/hassio-addon-config\";\nimport \"./config/hassio-addon-network\";\nimport \"./hassio-addon-router\";\nimport \"./info/hassio-addon-info\";\nimport \"./log/hassio-addon-logs\";\n\n@customElement(\"hassio-addon-dashboard\")\nclass HassioAddonDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public addon?: HassioAddonDetails;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() _error?: string;\n\n  private _computeTail = memoizeOne((route: Route) => {\n    const dividerPos = route.path.indexOf(\"/\", 1);\n    return dividerPos === -1\n      ? {\n          prefix: route.prefix + route.path,\n          path: \"\",\n        }\n      : {\n          prefix: route.prefix + route.path.substr(0, dividerPos),\n          path: route.path.substr(dividerPos),\n        };\n  });\n\n  protected render(): TemplateResult {\n    if (this._error) {\n      return html`<hass-error-screen\n        .error=${this._error}\n      ></hass-error-screen>`;\n    }\n\n    if (!this.addon) {\n      return html`<hass-loading-screen></hass-loading-screen>`;\n    }\n\n    const addonTabs: PageNavigation[] = [\n      {\n        translationKey: \"addon.panel.info\",\n        path: `/hassio/addon/${this.addon.slug}/info`,\n        iconPath: mdiInformationVariant,\n      },\n    ];\n\n    if (this.addon.documentation) {\n      addonTabs.push({\n        translationKey: \"addon.panel.documentation\",\n        path: `/hassio/addon/${this.addon.slug}/documentation`,\n        iconPath: mdiFileDocument,\n      });\n    }\n\n    if (this.addon.version) {\n      addonTabs.push(\n        {\n          translationKey: \"addon.panel.configuration\",\n          path: `/hassio/addon/${this.addon.slug}/config`,\n          iconPath: mdiCogs,\n        },\n        {\n          translationKey: \"addon.panel.log\",\n          path: `/hassio/addon/${this.addon.slug}/logs`,\n          iconPath: mdiMathLog,\n        }\n      );\n    }\n\n    const route = this._computeTail(this.route);\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .localizeFunc=${this.supervisor.localize}\n        .narrow=${this.narrow}\n        .route=${route}\n        .tabs=${addonTabs}\n        supervisor\n      >\n        <span slot=\"header\">${this.addon.name}</span>\n        <hassio-addon-router\n          .route=${route}\n          .narrow=${this.narrow}\n          .hass=${this.hass}\n          .supervisor=${this.supervisor}\n          .addon=${this.addon}\n        ></hassio-addon-router>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      hassioStyle,\n      css`\n        :host {\n          color: var(--primary-text-color);\n        }\n        .content {\n          padding: 24px 0 32px;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        hassio-addon-info,\n        hassio-addon-network,\n        hassio-addon-audio,\n        hassio-addon-config {\n          margin-bottom: 24px;\n          width: 600px;\n        }\n        hassio-addon-logs {\n          max-width: calc(100% - 8px);\n          min-width: 600px;\n        }\n        @media only screen and (max-width: 600px) {\n          hassio-addon-info,\n          hassio-addon-network,\n          hassio-addon-audio,\n          hassio-addon-config,\n          hassio-addon-logs {\n            max-width: 100%;\n            min-width: 100%;\n          }\n        }\n      `,\n    ];\n  }\n\n  protected async firstUpdated(): Promise<void> {\n    if (this.route.path === \"\") {\n      const requestedAddon = extractSearchParam(\"addon\");\n      if (requestedAddon) {\n        const addonsInfo = await fetchHassioAddonsInfo(this.hass);\n        const validAddon = addonsInfo.addons.some(\n          (addon) => addon.slug === requestedAddon\n        );\n        if (!validAddon) {\n          this._error = this.supervisor.localize(\"my.error_addon_not_found\");\n        } else {\n          navigate(`/hassio/addon/${requestedAddon}`, { replace: true });\n        }\n      }\n    }\n    this.addEventListener(\"hass-api-called\", (ev) => this._apiCalled(ev));\n  }\n\n  private async _apiCalled(ev): Promise<void> {\n    if (!ev.detail.success) {\n      return;\n    }\n\n    const pathSplit: string[] = ev.detail.path?.split(\"/\");\n\n    if (!pathSplit || pathSplit.length === 0) {\n      return;\n    }\n\n    const path: string = pathSplit[pathSplit.length - 1];\n\n    if ([\"uninstall\", \"install\", \"update\", \"start\", \"stop\"].includes(path)) {\n      fireEvent(this, \"supervisor-collection-refresh\", {\n        collection: \"supervisor\",\n      });\n    }\n\n    if (path === \"uninstall\") {\n      window.history.back();\n    } else {\n      await this._routeDataChanged();\n    }\n  }\n\n  protected updated(changedProperties) {\n    if (changedProperties.has(\"route\") && !this.addon) {\n      this._routeDataChanged();\n    }\n  }\n\n  private async _routeDataChanged(): Promise<void> {\n    const addon = this.route.path.split(\"/\")[1];\n    if (!addon) {\n      return;\n    }\n    try {\n      const addoninfo = await fetchHassioAddonInfo(this.hass, addon);\n      this.addon = addoninfo;\n    } catch (err: any) {\n      this._error = `Error fetching addon info: ${extractApiErrorMessage(err)}`;\n      this.addon = undefined;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-addon-dashboard\": HassioAddonDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}