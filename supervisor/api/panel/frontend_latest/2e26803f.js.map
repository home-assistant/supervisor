{"version":3,"file":"2e26803f.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;;;;AAmBA","sources":["webpack://home-assistant-frontend/./src/components/ha-labeled-slider.js","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-color-temp.ts"],"sourcesContent":["import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"./ha-icon\";\nimport \"./ha-slider\";\n\nclass HaLabeledSlider extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        .title {\n          margin: 5px 0 8px;\n          color: var(--primary-text-color);\n        }\n\n        .slider-container {\n          display: flex;\n        }\n\n        ha-icon {\n          margin-top: 4px;\n          color: var(--secondary-text-color);\n        }\n\n        ha-slider {\n          flex-grow: 1;\n          background-image: var(--ha-slider-background);\n          border-radius: 4px;\n        }\n      </style>\n\n      <div class=\"title\">[[_getTitle()]]</div>\n      <div class=\"extra-container\"><slot name=\"extra\"></slot></div>\n      <div class=\"slider-container\">\n        <ha-icon icon=\"[[icon]]\" hidden$=\"[[!icon]]\"></ha-icon>\n        <ha-slider\n          min=\"[[min]]\"\n          max=\"[[max]]\"\n          step=\"[[step]]\"\n          pin=\"[[pin]]\"\n          disabled=\"[[disabled]]\"\n          value=\"{{value}}\"\n        ></ha-slider>\n      </div>\n      <template is=\"dom-if\" if=\"[[helper]]\">\n        <ha-input-helper-text>[[helper]]</ha-input-helper-text>\n      </template>\n    `;\n  }\n\n  _getTitle() {\n    return `${this.caption}${this.caption && this.required ? \" *\" : \"\"}`;\n  }\n\n  static get properties() {\n    return {\n      caption: String,\n      disabled: Boolean,\n      required: Boolean,\n      min: Number,\n      max: Number,\n      pin: Boolean,\n      step: Number,\n      helper: String,\n\n      extra: {\n        type: Boolean,\n        value: false,\n      },\n      ignoreBarTouch: {\n        type: Boolean,\n        value: true,\n      },\n      icon: {\n        type: String,\n        value: \"\",\n      },\n      value: {\n        type: Number,\n        notify: true,\n      },\n    };\n  }\n}\n\ncustomElements.define(\"ha-labeled-slider\", HaLabeledSlider);\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { ColorTempSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-labeled-slider\";\n\n@customElement(\"ha-selector-color_temp\")\nexport class HaColorTempSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: ColorTempSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-labeled-slider\n        pin\n        icon=\"hass:thermometer\"\n        .caption=${this.label || \"\"}\n        .min=${this.selector.color_temp?.min_mireds ?? 153}\n        .max=${this.selector.color_temp?.max_mireds ?? 500}\n        .value=${this.value}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .required=${this.required}\n        @change=${this._valueChanged}\n      ></ha-labeled-slider>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: Number((ev.target as any).value),\n    });\n  }\n\n  static styles = css`\n    ha-labeled-slider {\n      --ha-slider-background: -webkit-linear-gradient(\n        var(--float-end),\n        rgb(255, 160, 0) 0%,\n        white 50%,\n        rgb(166, 209, 255) 100%\n      );\n      /* The color temp minimum value shouldn't be rendered differently. It's not \"off\". */\n      --paper-slider-knob-start-border-color: var(--primary-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-color_temp\": HaColorTempSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}