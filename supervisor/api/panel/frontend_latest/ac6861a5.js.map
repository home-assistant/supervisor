{"version":3,"file":"ac6861a5.js","mappings":";;;;;AAsFA;AAMA;AAcA;AAGA","sources":["webpack://home-assistant-frontend/./hassio/src/hassio-my-redirect.ts"],"sourcesContent":["import { sanitizeUrl } from \"@braintree/sanitize-url\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { navigate } from \"../../src/common/navigate\";\nimport {\n  createSearchParam,\n  extractSearchParamsObject,\n} from \"../../src/common/url/search-params\";\nimport { Supervisor } from \"../../src/data/supervisor/supervisor\";\nimport \"../../src/layouts/hass-error-screen\";\nimport {\n  ParamType,\n  Redirect,\n  Redirects,\n} from \"../../src/panels/my/ha-panel-my\";\nimport { HomeAssistant, Route } from \"../../src/types\";\n\nexport const REDIRECTS: Redirects = {\n  supervisor: {\n    redirect: \"/hassio/dashboard\",\n  },\n  supervisor_logs: {\n    redirect: \"/hassio/system\",\n  },\n  supervisor_info: {\n    redirect: \"/hassio/system\",\n  },\n  supervisor_snapshots: {\n    redirect: \"/hassio/backups\",\n  },\n  supervisor_backups: {\n    redirect: \"/hassio/backups\",\n  },\n  supervisor_store: {\n    redirect: \"/hassio/store\",\n  },\n  supervisor_addons: {\n    redirect: \"/hassio/dashboard\",\n  },\n  supervisor_addon: {\n    redirect: \"/hassio/addon\",\n    params: {\n      addon: \"string\",\n    },\n    optional_params: {\n      repository_url: \"url\",\n    },\n  },\n  supervisor_ingress: {\n    redirect: \"/hassio/ingress\",\n    params: {\n      addon: \"string\",\n    },\n  },\n  supervisor_add_addon_repository: {\n    redirect: \"/hassio/store\",\n    params: {\n      repository_url: \"url\",\n    },\n  },\n};\n\n@customElement(\"hassio-my-redirect\")\nclass HassioMyRedirect extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public supervisor!: Supervisor;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() public _error?: TemplateResult | string;\n\n  connectedCallback() {\n    super.connectedCallback();\n    const path = this.route.path.substr(1);\n    const redirect = REDIRECTS[path];\n\n    if (!redirect) {\n      this._error = this.supervisor.localize(\n        \"my.not_supported\",\n        \"link\",\n        html`<a\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          href=\"https://my.home-assistant.io/faq.html#supported-pages\"\n        >\n          ${this.supervisor.localize(\"my.faq_link\")}\n        </a>`\n      );\n      return;\n    }\n\n    let url: string;\n    try {\n      url = this._createRedirectUrl(redirect);\n    } catch (err: any) {\n      this._error = this.supervisor.localize(\"my.error\");\n      return;\n    }\n\n    navigate(url, { replace: true });\n  }\n\n  protected render(): TemplateResult {\n    if (this._error) {\n      return html`<hass-error-screen\n        .error=${this._error}\n      ></hass-error-screen>`;\n    }\n    return html``;\n  }\n\n  private _createRedirectUrl(redirect: Redirect): string {\n    const params = this._createRedirectParams(redirect);\n    return `${redirect.redirect}${params}`;\n  }\n\n  private _createRedirectParams(redirect: Redirect): string {\n    const params = extractSearchParamsObject();\n    if (!redirect.params && !Object.keys(params).length) {\n      return \"\";\n    }\n    const resultParams = {};\n    Object.entries(redirect.params || {}).forEach(([key, type]) => {\n      if (!params[key] || !this._checkParamType(type, params[key])) {\n        throw Error();\n      }\n      resultParams[key] = params[key];\n    });\n    Object.entries(redirect.optional_params || {}).forEach(([key, type]) => {\n      if (params[key]) {\n        if (!this._checkParamType(type, params[key])) {\n          throw Error();\n        }\n        resultParams[key] = params[key];\n      }\n    });\n    return `?${createSearchParam(resultParams)}`;\n  }\n\n  private _checkParamType(type: ParamType, value: string) {\n    if (type === \"string\") {\n      return true;\n    }\n    if (type === \"url\") {\n      return value && value === sanitizeUrl(value);\n    }\n    return false;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-my-redirect\": HassioMyRedirect;\n  }\n}\n"],"names":[],"sourceRoot":""}