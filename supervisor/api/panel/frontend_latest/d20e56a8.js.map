{"version":3,"file":"d20e56a8.js","mappings":";;;;;AAmEA;AAGA;AACA;;AAEA;;;AAIA;AAGA;AAGA;;;;AAUA;AAGA;;;AAGA;;;AAKA;;AASA;AACA;;;;AAMA;;AAEA;;AAEA;;;AAhEA;;;;;;;;;;;;;AA5BA","sources":["webpack://home-assistant-frontend/./hassio/src/dialogs/datadisk/dialog-hassio-datadisk.ts"],"sourcesContent":["import \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport \"../../../../src/components/ha-circular-progress\";\nimport \"../../../../src/components/ha-markdown\";\nimport {\n  extractApiErrorMessage,\n  ignoreSupervisorError,\n} from \"../../../../src/data/hassio/common\";\nimport {\n  DatadiskList,\n  listDatadisks,\n  moveDatadisk,\n} from \"../../../../src/data/hassio/host\";\nimport { Supervisor } from \"../../../../src/data/supervisor/supervisor\";\nimport { showAlertDialog } from \"../../../../src/dialogs/generic/show-dialog-box\";\nimport { haStyle, haStyleDialog } from \"../../../../src/resources/styles\";\nimport { HomeAssistant } from \"../../../../src/types\";\nimport { HassioDatatiskDialogParams } from \"./show-dialog-hassio-datadisk\";\n\nconst calculateMoveTime = memoizeOne((supervisor: Supervisor): number => {\n  const speed = supervisor.host.disk_life_time !== \"\" ? 30 : 10;\n  const moveTime = (supervisor.host.disk_used * 1000) / 60 / speed;\n  const rebootTime = (supervisor.host.startup_time * 4) / 60;\n  return Math.ceil((moveTime + rebootTime) / 10) * 10;\n});\n\n@customElement(\"dialog-hassio-datadisk\")\nclass HassioDatadiskDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private dialogParams?: HassioDatatiskDialogParams;\n\n  @state() private selectedDevice?: string;\n\n  @state() private devices?: DatadiskList[\"devices\"];\n\n  @state() private moving = false;\n\n  public showDialog(params: HassioDatatiskDialogParams) {\n    this.dialogParams = params;\n    listDatadisks(this.hass).then((data) => {\n      this.devices = data.devices;\n    });\n  }\n\n  public closeDialog(): void {\n    this.dialogParams = undefined;\n    this.selectedDevice = undefined;\n    this.devices = undefined;\n    this.moving = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this.dialogParams) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        .heading=${this.moving\n          ? this.dialogParams.supervisor.localize(\"dialog.datadisk_move.moving\")\n          : this.dialogParams.supervisor.localize(\"dialog.datadisk_move.title\")}\n        @closed=${this.closeDialog}\n        ?hideActions=${this.moving}\n      >\n        ${this.moving\n          ? html` <ha-circular-progress alt=\"Moving\" size=\"large\" active>\n              </ha-circular-progress>\n              <p class=\"progress-text\">\n                ${this.dialogParams.supervisor.localize(\n                  \"dialog.datadisk_move.moving_desc\"\n                )}\n              </p>`\n          : html` ${this.devices?.length\n                ? html`\n                    ${this.dialogParams.supervisor.localize(\n                      \"dialog.datadisk_move.description\",\n                      {\n                        current_path: this.dialogParams.supervisor.os.data_disk,\n                        time: calculateMoveTime(this.dialogParams.supervisor),\n                      }\n                    )}\n                    <br /><br />\n\n                    <paper-dropdown-menu\n                      .label=${this.dialogParams.supervisor.localize(\n                        \"dialog.datadisk_move.select_device\"\n                      )}\n                      @value-changed=${this._select_device}\n                    >\n                      <paper-listbox slot=\"dropdown-content\">\n                        ${this.devices.map(\n                          (device) => html`<paper-item>${device}</paper-item>`\n                        )}\n                      </paper-listbox>\n                    </paper-dropdown-menu>\n                  `\n                : this.devices === undefined\n                ? this.dialogParams.supervisor.localize(\n                    \"dialog.datadisk_move.loading_devices\"\n                  )\n                : this.dialogParams.supervisor.localize(\n                    \"dialog.datadisk_move.no_devices\"\n                  )}\n\n              <mwc-button slot=\"secondaryAction\" @click=${this.closeDialog}>\n                ${this.dialogParams.supervisor.localize(\n                  \"dialog.datadisk_move.cancel\"\n                )}\n              </mwc-button>\n\n              <mwc-button\n                .disabled=${!this.selectedDevice}\n                slot=\"primaryAction\"\n                @click=${this._moveDatadisk}\n              >\n                ${this.dialogParams.supervisor.localize(\n                  \"dialog.datadisk_move.move\"\n                )}\n              </mwc-button>`}\n      </ha-dialog>\n    `;\n  }\n\n  private _select_device(event) {\n    this.selectedDevice = event.detail.value;\n  }\n\n  private async _moveDatadisk() {\n    this.moving = true;\n    try {\n      await moveDatadisk(this.hass, this.selectedDevice!);\n    } catch (err: any) {\n      if (this.hass.connection.connected && !ignoreSupervisorError(err)) {\n        showAlertDialog(this, {\n          title: this.dialogParams!.supervisor.localize(\n            \"system.host.failed_to_move\"\n          ),\n          text: extractApiErrorMessage(err),\n        });\n        this.closeDialog();\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        paper-dropdown-menu {\n          width: 100%;\n        }\n        ha-circular-progress {\n          display: block;\n          margin: 32px;\n          text-align: center;\n        }\n\n        .progress-text {\n          text-align: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-hassio-datadisk\": HassioDatadiskDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}