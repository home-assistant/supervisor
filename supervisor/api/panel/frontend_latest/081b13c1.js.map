{"version":3,"file":"081b13c1.js","mappings":";;;;AAiBA;AACA;AACA;;AAGA;;;;;AASA;;;AC2CA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAIA;AAEA;AACA;;;;AAOA;AAEA;AACA;;AAGA;;AAGA;AACA;AAGA;AACA;;AAEA;AAEA;;AAGA;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;;AClOA;AACA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/components/ha-help-tooltip.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-action-editor.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-ui-action.ts"],"sourcesContent":["import { mdiHelpCircle } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-help-tooltip\")\nexport class HaHelpTooltip extends LitElement {\n  @property() public label!: string;\n\n  @property() public position = \"top\";\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n      <paper-tooltip\n        offset=\"4\"\n        .position=${this.position}\n        .fitToVisibleBounds=${true}\n        >${this.label}</paper-tooltip\n      >\n    `;\n  }\n\n  static get styles() {\n    return css`\n      ha-svg-icon {\n        --mdc-icon-size: var(--ha-help-tooltip-size, 14px);\n        color: var(--ha-help-tooltip-color, var(--disabled-text-color));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-help-tooltip\": HaHelpTooltip;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport \"../../../components/ha-help-tooltip\";\nimport \"../../../components/ha-service-control\";\nimport {\n  ActionConfig,\n  CallServiceActionConfig,\n  NavigateActionConfig,\n  UrlActionConfig,\n} from \"../../../data/lovelace\";\nimport { ServiceAction } from \"../../../data/script\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EditorTarget } from \"../editor/types\";\nimport \"../../../components/ha-navigation-picker\";\n\nexport type UiAction = Exclude<ActionConfig[\"action\"], \"fire-dom-event\">;\n\nconst DEFAULT_ACTIONS: UiAction[] = [\n  \"more-info\",\n  \"toggle\",\n  \"navigate\",\n  \"url\",\n  \"call-service\",\n  \"none\",\n];\n\n@customElement(\"hui-action-editor\")\nexport class HuiActionEditor extends LitElement {\n  @property() public config?: ActionConfig;\n\n  @property() public label?: string;\n\n  @property() public actions?: UiAction[];\n\n  @property() public tooltipText?: string;\n\n  @property() protected hass?: HomeAssistant;\n\n  get _navigation_path(): string {\n    const config = this.config as NavigateActionConfig | undefined;\n    return config?.navigation_path || \"\";\n  }\n\n  get _url_path(): string {\n    const config = this.config as UrlActionConfig | undefined;\n    return config?.url_path || \"\";\n  }\n\n  get _service(): string {\n    const config = this.config as CallServiceActionConfig;\n    return config?.service || \"\";\n  }\n\n  private _serviceAction = memoizeOne(\n    (config: CallServiceActionConfig): ServiceAction => ({\n      service: this._service,\n      data: config.data ?? config.service_data,\n      target: config.target,\n    })\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const actions = this.actions ?? DEFAULT_ACTIONS;\n\n    return html`\n      <div class=\"dropdown\">\n        <ha-select\n          .label=${this.label}\n          .configValue=${\"action\"}\n          @selected=${this._actionPicked}\n          .value=${this.config?.action ?? \"default\"}\n          @closed=${stopPropagation}\n          fixedMenuPosition\n          naturalMenuWidt\n        >\n          <mwc-list-item value=\"default\">\n            ${this.hass!.localize(\n              \"ui.panel.lovelace.editor.action-editor.actions.default_action\"\n            )}\n          </mwc-list-item>\n          ${actions.map(\n            (action) => html`\n              <mwc-list-item .value=${action}>\n                ${this.hass!.localize(\n                  `ui.panel.lovelace.editor.action-editor.actions.${action}`\n                )}\n              </mwc-list-item>\n            `\n          )}\n        </ha-select>\n        ${this.tooltipText\n          ? html`\n              <ha-help-tooltip .label=${this.tooltipText}></ha-help-tooltip>\n            `\n          : \"\"}\n      </div>\n      ${this.config?.action === \"navigate\"\n        ? html`\n            <ha-navigation-picker\n              .hass=${this.hass}\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.action-editor.navigation_path\"\n              )}\n              .value=${this._navigation_path}\n              @value-changed=${this._navigateValueChanged}\n            ></ha-navigation-picker>\n          `\n        : \"\"}\n      ${this.config?.action === \"url\"\n        ? html`\n            <ha-textfield\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.action-editor.url_path\"\n              )}\n              .value=${this._url_path}\n              .configValue=${\"url_path\"}\n              @input=${this._valueChanged}\n            ></ha-textfield>\n          `\n        : \"\"}\n      ${this.config?.action === \"call-service\"\n        ? html`\n            <ha-service-control\n              .hass=${this.hass}\n              .value=${this._serviceAction(this.config)}\n              .showAdvanced=${this.hass.userData?.showAdvanced}\n              narrow\n              @value-changed=${this._serviceValueChanged}\n            ></ha-service-control>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _actionPicked(ev): void {\n    ev.stopPropagation();\n    if (!this.hass) {\n      return;\n    }\n    const value = ev.target.value;\n    if (this.config?.action === value) {\n      return;\n    }\n    if (value === \"default\") {\n      fireEvent(this, \"value-changed\", { value: undefined });\n      return;\n    }\n\n    let data;\n    switch (value) {\n      case \"url\": {\n        data = { url_path: this._url_path };\n        break;\n      }\n      case \"call-service\": {\n        data = { service: this._service };\n        break;\n      }\n      case \"navigate\": {\n        data = { navigation_path: this._navigation_path };\n        break;\n      }\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: { action: value, ...data },\n    });\n  }\n\n  private _valueChanged(ev): void {\n    ev.stopPropagation();\n    if (!this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = ev.target.value;\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n    if (target.configValue) {\n      fireEvent(this, \"value-changed\", {\n        value: { ...this.config!, [target.configValue!]: value },\n      });\n    }\n  }\n\n  private _serviceValueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = {\n      ...this.config!,\n      service: ev.detail.value.service || \"\",\n      data: ev.detail.value.data || {},\n      target: ev.detail.value.target || {},\n    };\n    // \"service_data\" is allowed for backwards compatibility but replaced with \"data\" on write\n    if (\"service_data\" in value) {\n      delete value.service_data;\n    }\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _navigateValueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = {\n      ...this.config!,\n      navigation_path: ev.detail.value,\n    };\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .dropdown {\n        position: relative;\n      }\n      ha-help-tooltip {\n        position: absolute;\n        right: 40px;\n        top: 16px;\n        inset-inline-start: initial;\n        inset-inline-end: 40px;\n        direction: var(--direction);\n      }\n      ha-select,\n      ha-textfield {\n        width: 100%;\n      }\n      ha-service-control,\n      ha-navigation-picker {\n        display: block;\n      }\n      ha-textfield,\n      ha-service-control,\n      ha-navigation-picker {\n        margin-top: 8px;\n      }\n      ha-service-control {\n        --service-control-padding: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-action-editor\": HuiActionEditor;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { UiActionSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../../panels/lovelace/components/hui-action-editor\";\nimport { ActionConfig } from \"../../data/lovelace\";\n\n@customElement(\"ha-selector-ui-action\")\nexport class HaSelectorUiAction extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: UiActionSelector;\n\n  @property() public value?: ActionConfig;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  protected render() {\n    return html`\n      <hui-action-editor\n        .label=${this.label}\n        .hass=${this.hass}\n        .config=${this.value}\n        .actions=${this.selector[\"ui-action\"]?.actions}\n        .tooltipText=${this.helper}\n        @value-changed=${this._valueChanged}\n      ></hui-action-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-ui-action\": HaSelectorUiAction;\n  }\n}\n"],"names":[],"sourceRoot":""}