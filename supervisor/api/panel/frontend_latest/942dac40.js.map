{"version":3,"file":"942dac40.js","mappings":";;;AA4DA;;;;;;AC4tCA","sources":["webpack://home-assistant-frontend/./src/components/ha-textarea.ts","webpack://home-assistant-frontend/./src/components/media-player/ha-media-player-browse.ts"],"sourcesContent":["import { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textarea\")\nexport class HaTextArea extends TextAreaBase {\n  @property({ type: Boolean, reflect: true }) autogrow = false;\n\n  firstUpdated() {\n    super.firstUpdated();\n\n    this.setAttribute(\"dir\", document.dir);\n  }\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.autogrow && changedProperties.has(\"value\")) {\n      this.mdcRoot.dataset.value = this.value + '=\\u200B\"'; // add a zero-width space to correctly wrap\n    }\n  }\n\n  static override styles = [\n    textfieldStyles,\n    textareaStyles,\n    css`\n      :host([autogrow]) .mdc-text-field {\n        position: relative;\n        min-height: 74px;\n        min-width: 178px;\n        max-height: 200px;\n      }\n      :host([autogrow]) .mdc-text-field:after {\n        content: attr(data-value);\n        margin-top: 23px;\n        margin-bottom: 9px;\n        line-height: 1.5rem;\n        min-height: 42px;\n        padding: 0px 32px 0 16px;\n        letter-spacing: var(\n          --mdc-typography-subtitle1-letter-spacing,\n          0.009375em\n        );\n        visibility: hidden;\n        white-space: pre-wrap;\n      }\n      :host([autogrow]) .mdc-text-field__input {\n        position: absolute;\n        height: calc(100% - 32px);\n      }\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n      :host([dir=\"rtl\"]) .mdc-floating-label {\n        right: 16px;\n        left: initial;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textarea\": HaTextArea;\n  }\n}\n","import \"@lit-labs/virtualizer\";\nimport type { LitVirtualizer } from \"@lit-labs/virtualizer\";\nimport { grid } from \"@lit-labs/virtualizer/layouts/grid\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiArrowUpRight, mdiPlay, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  nothing,\n} from \"lit\";\nimport {\n  customElement,\n  eventOptions,\n  property,\n  query,\n  state,\n} from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { until } from \"lit/directives/until\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../common/util/compute_rtl\";\nimport { debounce } from \"../../common/util/debounce\";\nimport { isUnavailableState } from \"../../data/entity\";\nimport type { MediaPlayerItem } from \"../../data/media-player\";\nimport {\n  browseMediaPlayer,\n  BROWSER_PLAYER,\n  MediaClassBrowserSettings,\n  MediaPickedEvent,\n  MediaPlayerBrowseAction,\n} from \"../../data/media-player\";\nimport { browseLocalMediaPlayer } from \"../../data/media_source\";\nimport { isTTSMediaSource } from \"../../data/tts\";\nimport { showAlertDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { installResizeObserver } from \"../../panels/lovelace/common/install-resize-observer\";\nimport { haStyle } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport {\n  brandsUrl,\n  extractDomainFromBrandUrl,\n  isBrandUrl,\n} from \"../../util/brands-url\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../entity/ha-entity-picker\";\nimport \"../ha-alert\";\nimport \"../ha-button-menu\";\nimport \"../ha-card\";\nimport \"../ha-circular-progress\";\nimport \"../ha-fab\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./ha-browse-media-tts\";\nimport type { TtsMediaPickedEvent } from \"./ha-browse-media-tts\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"media-picked\": MediaPickedEvent;\n    \"media-browsed\": {\n      // Items of the new browse stack\n      ids: MediaPlayerItemId[];\n      // Current fetched item for this browse stack\n      current?: MediaPlayerItem;\n      // If the new stack should replace the old stack\n      replace?: boolean;\n    };\n  }\n}\n\nexport interface MediaPlayerItemId {\n  media_content_id: string | undefined;\n  media_content_type: string | undefined;\n}\n\n@customElement(\"ha-media-player-browse\")\nexport class HaMediaPlayerBrowse extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @property() public action: MediaPlayerBrowseAction = \"play\";\n\n  @property({ type: Boolean }) public dialog = false;\n\n  @property() public navigateIds!: MediaPlayerItemId[];\n\n  @property({ type: Boolean, attribute: \"narrow\", reflect: true })\n  // @ts-ignore\n  private _narrow = false;\n\n  @property({ type: Boolean, attribute: \"scroll\", reflect: true })\n  private _scrolled = false;\n\n  @state() private _error?: { message: string; code: string };\n\n  @state() private _parentItem?: MediaPlayerItem;\n\n  @state() private _currentItem?: MediaPlayerItem;\n\n  @query(\".header\") private _header?: HTMLDivElement;\n\n  @query(\".content\") private _content?: HTMLDivElement;\n\n  @query(\"lit-virtualizer\") private _virtualizer?: LitVirtualizer;\n\n  private _observed = false;\n\n  private _headerOffsetHeight = 0;\n\n  private _resizeObserver?: ResizeObserver;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this.updateComplete.then(() => this._attachResizeObserver());\n  }\n\n  public disconnectedCallback(): void {\n    if (this._resizeObserver) {\n      this._resizeObserver.disconnect();\n    }\n  }\n\n  public async refresh() {\n    const currentId = this.navigateIds[this.navigateIds.length - 1];\n    try {\n      this._currentItem = await this._fetchData(\n        this.entityId,\n        currentId.media_content_id,\n        currentId.media_content_type\n      );\n      // Update the parent with latest item.\n      fireEvent(this, \"media-browsed\", {\n        ids: this.navigateIds,\n        current: this._currentItem,\n      });\n    } catch (err) {\n      this._setError(err);\n    }\n  }\n\n  public play(): void {\n    if (this._currentItem?.can_play) {\n      this._runAction(this._currentItem);\n    }\n  }\n\n  public willUpdate(changedProps: PropertyValues<this>): void {\n    super.willUpdate(changedProps);\n\n    if (changedProps.has(\"entityId\")) {\n      this._setError(undefined);\n    } else if (!changedProps.has(\"navigateIds\")) {\n      // Neither entity ID or navigateIDs changed, nothing to fetch\n      return;\n    }\n\n    this._setError(undefined);\n\n    const oldNavigateIds = changedProps.get(\"navigateIds\") as\n      | this[\"navigateIds\"]\n      | undefined;\n    const navigateIds = this.navigateIds;\n\n    // We're navigating. Reset the shizzle.\n    this._content?.scrollTo(0, 0);\n    this._scrolled = false;\n    const oldCurrentItem = this._currentItem;\n    const oldParentItem = this._parentItem;\n    this._currentItem = undefined;\n    this._parentItem = undefined;\n    const currentId = navigateIds[navigateIds.length - 1];\n    const parentId =\n      navigateIds.length > 1 ? navigateIds[navigateIds.length - 2] : undefined;\n    let currentProm: Promise<MediaPlayerItem> | undefined;\n    let parentProm: Promise<MediaPlayerItem> | undefined;\n\n    // See if we can take loading shortcuts if navigating to parent or child\n    if (!changedProps.has(\"entityId\")) {\n      if (\n        // Check if we navigated to a child\n        oldNavigateIds &&\n        navigateIds.length === oldNavigateIds.length + 1 &&\n        oldNavigateIds.every((oldVal, idx) => {\n          const curVal = navigateIds[idx];\n          return (\n            curVal.media_content_id === oldVal.media_content_id &&\n            curVal.media_content_type === oldVal.media_content_type\n          );\n        })\n      ) {\n        parentProm = Promise.resolve(oldCurrentItem!);\n      } else if (\n        // Check if we navigated to a parent\n        oldNavigateIds &&\n        navigateIds.length === oldNavigateIds.length - 1 &&\n        navigateIds.every((curVal, idx) => {\n          const oldVal = oldNavigateIds[idx];\n          return (\n            curVal.media_content_id === oldVal.media_content_id &&\n            curVal.media_content_type === oldVal.media_content_type\n          );\n        })\n      ) {\n        currentProm = Promise.resolve(oldParentItem!);\n      }\n    }\n    // Fetch current\n    if (!currentProm) {\n      currentProm = this._fetchData(\n        this.entityId,\n        currentId.media_content_id,\n        currentId.media_content_type\n      );\n    }\n    currentProm.then(\n      (item) => {\n        this._currentItem = item;\n        fireEvent(this, \"media-browsed\", {\n          ids: navigateIds,\n          current: item,\n        });\n      },\n      (err) => {\n        // When we change entity ID, we will first try to see if the new entity is\n        // able to resolve the new path. If that results in an error, browse the root.\n        const isNewEntityWithSamePath =\n          oldNavigateIds &&\n          changedProps.has(\"entityId\") &&\n          navigateIds.length === oldNavigateIds.length &&\n          oldNavigateIds.every(\n            (oldItem, idx) =>\n              navigateIds[idx].media_content_id === oldItem.media_content_id &&\n              navigateIds[idx].media_content_type === oldItem.media_content_type\n          );\n        if (isNewEntityWithSamePath) {\n          fireEvent(this, \"media-browsed\", {\n            ids: [\n              { media_content_id: undefined, media_content_type: undefined },\n            ],\n            replace: true,\n          });\n        } else if (\n          err.code === \"entity_not_found\" &&\n          isUnavailableState(this.hass.states[this.entityId]?.state)\n        ) {\n          this._setError({\n            message: this.hass.localize(\n              `ui.components.media-browser.media_player_unavailable`\n            ),\n            code: \"entity_not_found\",\n          });\n        } else {\n          this._setError(err);\n        }\n      }\n    );\n    // Fetch parent\n    if (!parentProm && parentId !== undefined) {\n      parentProm = this._fetchData(\n        this.entityId,\n        parentId.media_content_id,\n        parentId.media_content_type\n      );\n    }\n    if (parentProm) {\n      parentProm.then((parent) => {\n        this._parentItem = parent;\n      });\n    }\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.size > 1 || !changedProps.has(\"hass\")) {\n      return true;\n    }\n    const oldHass = changedProps.get(\"hass\") as this[\"hass\"];\n    return oldHass === undefined || oldHass.localize !== this.hass.localize;\n  }\n\n  protected firstUpdated(): void {\n    this._measureCard();\n    this._attachResizeObserver();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"_scrolled\")) {\n      this._animateHeaderHeight();\n    } else if (changedProps.has(\"_currentItem\")) {\n      this._setHeaderHeight();\n\n      // This fixes a race condition for resizing of the cards using the grid layout\n      if (this._observed) {\n        return;\n      }\n\n      // @ts-ignore\n      const virtualizer = this._virtualizer?._virtualizer;\n\n      if (virtualizer) {\n        this._observed = true;\n        setTimeout(() => virtualizer._observeMutations(), 0);\n      }\n    }\n  }\n\n  protected render() {\n    if (this._error) {\n      return html`\n        <div class=\"container\">\n          <ha-alert alert-type=\"error\">\n            ${this._renderError(this._error)}\n          </ha-alert>\n        </div>\n      `;\n    }\n\n    if (!this._currentItem) {\n      return html`<ha-circular-progress active></ha-circular-progress>`;\n    }\n\n    const currentItem = this._currentItem;\n\n    const subtitle = this.hass.localize(\n      `ui.components.media-browser.class.${currentItem.media_class}`\n    );\n    const children = currentItem.children || [];\n    const mediaClass = MediaClassBrowserSettings[currentItem.media_class];\n    const childrenMediaClass = currentItem.children_media_class\n      ? MediaClassBrowserSettings[currentItem.children_media_class]\n      : MediaClassBrowserSettings.directory;\n\n    const backgroundImage = currentItem.thumbnail\n      ? this._getThumbnailURLorBase64(currentItem.thumbnail).then(\n          (value) => `url(${value})`\n        )\n      : \"none\";\n\n    return html`\n              ${\n                currentItem.can_play\n                  ? html`\n                      <div\n                        class=\"header ${classMap({\n                          \"no-img\": !currentItem.thumbnail,\n                          \"no-dialog\": !this.dialog,\n                        })}\"\n                        @transitionend=${this._setHeaderHeight}\n                      >\n                        <div class=\"header-content\">\n                          ${currentItem.thumbnail\n                            ? html`\n                                <div\n                                  class=\"img\"\n                                  style=\"background-image: ${until(\n                                    backgroundImage,\n                                    \"\"\n                                  )}\"\n                                >\n                                  ${this._narrow && currentItem?.can_play\n                                    ? html`\n                                        <ha-fab\n                                          mini\n                                          .item=${currentItem}\n                                          @click=${this._actionClicked}\n                                        >\n                                          <ha-svg-icon\n                                            slot=\"icon\"\n                                            .label=${this.hass.localize(\n                                              `ui.components.media-browser.${this.action}-media`\n                                            )}\n                                            .path=${this.action === \"play\"\n                                              ? mdiPlay\n                                              : mdiPlus}\n                                          ></ha-svg-icon>\n                                          ${this.hass.localize(\n                                            `ui.components.media-browser.${this.action}`\n                                          )}\n                                        </ha-fab>\n                                      `\n                                    : \"\"}\n                                </div>\n                              `\n                            : nothing}\n                          <div class=\"header-info\">\n                            <div class=\"breadcrumb\">\n                              <h1 class=\"title\">${currentItem.title}</h1>\n                              ${subtitle\n                                ? html` <h2 class=\"subtitle\">${subtitle}</h2> `\n                                : \"\"}\n                            </div>\n                            ${currentItem.can_play &&\n                            (!currentItem.thumbnail || !this._narrow)\n                              ? html`\n                                  <mwc-button\n                                    raised\n                                    .item=${currentItem}\n                                    @click=${this._actionClicked}\n                                  >\n                                    <ha-svg-icon\n                                      .label=${this.hass.localize(\n                                        `ui.components.media-browser.${this.action}-media`\n                                      )}\n                                      .path=${this.action === \"play\"\n                                        ? mdiPlay\n                                        : mdiPlus}\n                                    ></ha-svg-icon>\n                                    ${this.hass.localize(\n                                      `ui.components.media-browser.${this.action}`\n                                    )}\n                                  </mwc-button>\n                                `\n                              : \"\"}\n                          </div>\n                        </div>\n                      </div>\n                    `\n                  : \"\"\n              }\n          <div\n            class=\"content\"\n            @scroll=${this._scroll}\n            @touchmove=${this._scroll}\n          >\n            ${\n              this._error\n                ? html`\n                    <div class=\"container\">\n                      <ha-alert alert-type=\"error\">\n                        ${this._renderError(this._error)}\n                      </ha-alert>\n                    </div>\n                  `\n                : isTTSMediaSource(currentItem.media_content_id)\n                ? html`\n                    <ha-browse-media-tts\n                      .item=${currentItem}\n                      .hass=${this.hass}\n                      .action=${this.action}\n                      @tts-picked=${this._ttsPicked}\n                    ></ha-browse-media-tts>\n                  `\n                : !children.length && !currentItem.not_shown\n                ? html`\n                    <div class=\"container no-items\">\n                      ${currentItem.media_content_id ===\n                      \"media-source://media_source/local/.\"\n                        ? html`\n                            <div class=\"highlight-add-button\">\n                              <span>\n                                <ha-svg-icon\n                                  .path=${mdiArrowUpRight}\n                                ></ha-svg-icon>\n                              </span>\n                              <span>\n                                ${this.hass.localize(\n                                  \"ui.components.media-browser.file_management.highlight_button\"\n                                )}\n                              </span>\n                            </div>\n                          `\n                        : this.hass.localize(\n                            \"ui.components.media-browser.no_items\"\n                          )}\n                    </div>\n                  `\n                : childrenMediaClass.layout === \"grid\"\n                ? html`\n                    <lit-virtualizer\n                      scroller\n                      .layout=${grid({\n                        itemSize: {\n                          width: \"175px\",\n                          height:\n                            childrenMediaClass.thumbnail_ratio === \"portrait\"\n                              ? \"312px\"\n                              : \"225px\",\n                        },\n                        gap: \"16px\",\n                        flex: { preserve: \"aspect-ratio\" },\n                        justify: \"space-evenly\",\n                        direction: \"vertical\",\n                      })}\n                      .items=${children}\n                      .renderItem=${this._renderGridItem}\n                      class=\"children ${classMap({\n                        portrait:\n                          childrenMediaClass.thumbnail_ratio === \"portrait\",\n                        not_shown: !!currentItem.not_shown,\n                      })}\"\n                    ></lit-virtualizer>\n                    ${currentItem.not_shown\n                      ? html`\n                          <div class=\"grid not-shown\">\n                            <div class=\"title\">\n                              ${this.hass.localize(\n                                \"ui.components.media-browser.not_shown\",\n                                { count: currentItem.not_shown }\n                              )}\n                            </div>\n                          </div>\n                        `\n                      : \"\"}\n                  `\n                : html`\n                    <mwc-list>\n                      <lit-virtualizer\n                        scroller\n                        .items=${children}\n                        style=${styleMap({\n                          height: `${children.length * 72 + 26}px`,\n                        })}\n                        .renderItem=${this._renderListItem}\n                      ></lit-virtualizer>\n                      ${currentItem.not_shown\n                        ? html`\n                            <mwc-list-item\n                              noninteractive\n                              class=\"not-shown\"\n                              .graphic=${mediaClass.show_list_images\n                                ? \"medium\"\n                                : \"avatar\"}\n                              dir=${computeRTLDirection(this.hass)}\n                            >\n                              <span class=\"title\">\n                                ${this.hass.localize(\n                                  \"ui.components.media-browser.not_shown\",\n                                  { count: currentItem.not_shown }\n                                )}\n                              </span>\n                            </mwc-list-item>\n                          `\n                        : \"\"}\n                    </mwc-list>\n                  `\n            }\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _renderGridItem = (child: MediaPlayerItem): TemplateResult => {\n    const backgroundImage = child.thumbnail\n      ? this._getThumbnailURLorBase64(child.thumbnail).then(\n          (value) => `url(${value})`\n        )\n      : \"none\";\n\n    return html`\n      <div class=\"child\" .item=${child} @click=${this._childClicked}>\n        <ha-card outlined>\n          <div class=\"thumbnail\">\n            ${child.thumbnail\n              ? html`\n                  <div\n                    class=\"${[\"app\", \"directory\"].includes(child.media_class)\n                      ? \"centered-image\"\n                      : \"\"} ${isBrandUrl(child.thumbnail)\n                      ? \"brand-image\"\n                      : \"\"} image\"\n                    style=\"background-image: ${until(backgroundImage, \"\")}\"\n                  ></div>\n                `\n              : html`\n                  <div class=\"icon-holder image\">\n                    <ha-svg-icon\n                      class=\"folder\"\n                      .path=${MediaClassBrowserSettings[\n                        child.media_class === \"directory\"\n                          ? child.children_media_class || child.media_class\n                          : child.media_class\n                      ].icon}\n                    ></ha-svg-icon>\n                  </div>\n                `}\n            ${child.can_play\n              ? html`\n                  <ha-icon-button\n                    class=\"play ${classMap({\n                      can_expand: child.can_expand,\n                    })}\"\n                    .item=${child}\n                    .label=${this.hass.localize(\n                      `ui.components.media-browser.${this.action}-media`\n                    )}\n                    .path=${this.action === \"play\" ? mdiPlay : mdiPlus}\n                    @click=${this._actionClicked}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </div>\n          <div class=\"title\">\n            ${child.title}\n            <paper-tooltip fitToVisibleBounds position=\"top\" offset=\"4\"\n              >${child.title}</paper-tooltip\n            >\n          </div>\n        </ha-card>\n      </div>\n    `;\n  };\n\n  private _renderListItem = (child: MediaPlayerItem): TemplateResult => {\n    const currentItem = this._currentItem;\n    const mediaClass = MediaClassBrowserSettings[currentItem!.media_class];\n\n    const backgroundImage =\n      mediaClass.show_list_images && child.thumbnail\n        ? this._getThumbnailURLorBase64(child.thumbnail).then(\n            (value) => `url(${value})`\n          )\n        : \"none\";\n\n    return html`\n      <mwc-list-item\n        @click=${this._childClicked}\n        .item=${child}\n        .graphic=${mediaClass.show_list_images ? \"medium\" : \"avatar\"}\n        dir=${computeRTLDirection(this.hass)}\n      >\n        <div\n          class=${classMap({\n            graphic: true,\n            thumbnail: mediaClass.show_list_images === true,\n          })}\n          style=\"background-image: ${until(backgroundImage, \"\")}\"\n          slot=\"graphic\"\n        >\n          <ha-icon-button\n            class=\"play ${classMap({\n              show: !mediaClass.show_list_images || !child.thumbnail,\n            })}\"\n            .item=${child}\n            .label=${this.hass.localize(\n              `ui.components.media-browser.${this.action}-media`\n            )}\n            .path=${this.action === \"play\" ? mdiPlay : mdiPlus}\n            @click=${this._actionClicked}\n          ></ha-icon-button>\n        </div>\n        <span class=\"title\">${child.title}</span>\n      </mwc-list-item>\n    `;\n  };\n\n  private async _getThumbnailURLorBase64(\n    thumbnailUrl: string | undefined\n  ): Promise<string> {\n    if (!thumbnailUrl) {\n      return \"\";\n    }\n\n    if (thumbnailUrl.startsWith(\"/\")) {\n      // Thumbnails served by local API require authentication\n      return new Promise((resolve, reject) => {\n        this.hass\n          .fetchWithAuth(thumbnailUrl!)\n          // Since we are fetching with an authorization header, we cannot just put the\n          // URL directly into the document; we need to embed the image. We could do this\n          // using blob URLs, but then we would need to keep track of them in order to\n          // release them properly. Instead, we embed the thumbnail using base64.\n          .then((response) => response.blob())\n          .then((blob) => {\n            const reader = new FileReader();\n            reader.onload = () => {\n              const result = reader.result;\n              resolve(typeof result === \"string\" ? result : \"\");\n            };\n            reader.onerror = (e) => reject(e);\n            reader.readAsDataURL(blob);\n          });\n      });\n    }\n\n    if (isBrandUrl(thumbnailUrl)) {\n      // The backend is not aware of the theme used by the users,\n      // so we rewrite the URL to show a proper icon\n      thumbnailUrl = brandsUrl({\n        domain: extractDomainFromBrandUrl(thumbnailUrl),\n        type: \"icon\",\n        useFallback: true,\n        darkOptimized: this.hass.themes?.darkMode,\n      });\n    }\n\n    return thumbnailUrl;\n  }\n\n  private _actionClicked = (ev: MouseEvent): void => {\n    ev.stopPropagation();\n    const item = (ev.currentTarget as any).item;\n\n    this._runAction(item);\n  };\n\n  private _runAction(item: MediaPlayerItem): void {\n    fireEvent(this, \"media-picked\", { item, navigateIds: this.navigateIds });\n  }\n\n  private _ttsPicked(ev: CustomEvent<TtsMediaPickedEvent>): void {\n    ev.stopPropagation();\n    const navigateIds = this.navigateIds.slice(0, -1);\n    navigateIds.push(ev.detail.item);\n    fireEvent(this, \"media-picked\", {\n      ...ev.detail,\n      navigateIds,\n    });\n  }\n\n  private _childClicked = async (ev: MouseEvent): Promise<void> => {\n    const target = ev.currentTarget as any;\n    const item: MediaPlayerItem = target.item;\n\n    if (!item) {\n      return;\n    }\n\n    if (!item.can_expand) {\n      this._runAction(item);\n      return;\n    }\n\n    fireEvent(this, \"media-browsed\", {\n      ids: [...this.navigateIds, item],\n    });\n  };\n\n  private async _fetchData(\n    entityId: string,\n    mediaContentId?: string,\n    mediaContentType?: string\n  ): Promise<MediaPlayerItem> {\n    return entityId !== BROWSER_PLAYER\n      ? browseMediaPlayer(this.hass, entityId, mediaContentId, mediaContentType)\n      : browseLocalMediaPlayer(this.hass, mediaContentId);\n  }\n\n  private _measureCard(): void {\n    this._narrow = (this.dialog ? window.innerWidth : this.offsetWidth) < 450;\n  }\n\n  private async _attachResizeObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(\n        debounce(() => this._measureCard(), 250, false)\n      );\n    }\n\n    this._resizeObserver.observe(this);\n  }\n\n  private _closeDialogAction(): void {\n    fireEvent(this, \"close-dialog\");\n  }\n\n  private _setError(error: any) {\n    if (!this.dialog) {\n      this._error = error;\n      return;\n    }\n\n    if (!error) {\n      return;\n    }\n\n    this._closeDialogAction();\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.components.media-browser.media_browsing_error\"\n      ),\n      text: this._renderError(error),\n    });\n  }\n\n  private _renderError(err: { message: string; code: string }) {\n    if (err.message === \"Media directory does not exist.\") {\n      return html`\n        <h2>\n          ${this.hass.localize(\n            \"ui.components.media-browser.no_local_media_found\"\n          )}\n        </h2>\n        <p>\n          ${this.hass.localize(\"ui.components.media-browser.no_media_folder\")}\n          <br />\n          ${this.hass.localize(\n            \"ui.components.media-browser.setup_local_help\",\n            \"documentation\",\n            html`<a\n              href=${documentationUrl(\n                this.hass,\n                \"/more-info/local-media/setup-media\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass.localize(\n                \"ui.components.media-browser.documentation\"\n              )}</a\n            >`\n          )}\n          <br />\n          ${this.hass.localize(\"ui.components.media-browser.local_media_files\")}\n        </p>\n      `;\n    }\n    return html`<span class=\"error\">${err.message}</span>`;\n  }\n\n  private async _setHeaderHeight() {\n    await this.updateComplete;\n    const header = this._header;\n    const content = this._content;\n    if (!header || !content) {\n      return;\n    }\n    this._headerOffsetHeight = header.offsetHeight;\n    content.style.marginTop = `${this._headerOffsetHeight}px`;\n    content.style.maxHeight = `calc(var(--media-browser-max-height, 100%) - ${this._headerOffsetHeight}px)`;\n  }\n\n  private _animateHeaderHeight() {\n    let start;\n    const animate = (time) => {\n      if (start === undefined) {\n        start = time;\n      }\n      const elapsed = time - start;\n      this._setHeaderHeight();\n      if (elapsed < 400) {\n        requestAnimationFrame(animate);\n      }\n    };\n    requestAnimationFrame(animate);\n  }\n\n  @eventOptions({ passive: true })\n  private _scroll(ev: Event): void {\n    const content = ev.currentTarget as HTMLDivElement;\n    if (!this._scrolled && content.scrollTop > this._headerOffsetHeight) {\n      this._scrolled = true;\n    } else if (this._scrolled && content.scrollTop < this._headerOffsetHeight) {\n      this._scrolled = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: flex;\n          flex-direction: column;\n          position: relative;\n        }\n\n        ha-circular-progress {\n          --mdc-theme-primary: var(--primary-color);\n          display: flex;\n          justify-content: center;\n          margin: 40px;\n        }\n\n        .container {\n          padding: 16px;\n        }\n\n        .no-items {\n          padding-left: 32px;\n        }\n\n        .highlight-add-button {\n          display: flex;\n          flex-direction: row-reverse;\n          margin-right: 48px;\n        }\n\n        .highlight-add-button ha-svg-icon {\n          position: relative;\n          top: -0.5em;\n          margin-left: 8px;\n        }\n\n        .content {\n          overflow-y: auto;\n          box-sizing: border-box;\n          height: 100%;\n        }\n\n        /* HEADER */\n\n        .header {\n          display: flex;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--divider-color);\n          background-color: var(--card-background-color);\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n          z-index: 5;\n          padding: 16px;\n        }\n        .header_button {\n          position: relative;\n          right: -8px;\n        }\n        .header-content {\n          display: flex;\n          flex-wrap: wrap;\n          flex-grow: 1;\n          align-items: flex-start;\n        }\n        .header-content .img {\n          height: 175px;\n          width: 175px;\n          margin-right: 16px;\n          background-size: cover;\n          border-radius: 2px;\n          transition: width 0.4s, height 0.4s;\n        }\n        .header-info {\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          align-self: stretch;\n          min-width: 0;\n          flex: 1;\n        }\n        .header-info mwc-button {\n          display: block;\n          --mdc-theme-primary: var(--primary-color);\n          padding-bottom: 16px;\n        }\n        .breadcrumb {\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          flex-grow: 1;\n          padding-top: 16px;\n        }\n        .breadcrumb .title {\n          font-size: 32px;\n          line-height: 1.2;\n          font-weight: bold;\n          margin: 0;\n          overflow: hidden;\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: 2;\n          padding-right: 8px;\n        }\n        .breadcrumb .previous-title {\n          font-size: 14px;\n          padding-bottom: 8px;\n          color: var(--secondary-text-color);\n          overflow: hidden;\n          text-overflow: ellipsis;\n          cursor: pointer;\n          --mdc-icon-size: 14px;\n        }\n        .breadcrumb .subtitle {\n          font-size: 16px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          margin-bottom: 0;\n          transition: height 0.5s, margin 0.5s;\n        }\n\n        .not-shown {\n          font-style: italic;\n          color: var(--secondary-text-color);\n          padding: 8px 16px 8px;\n        }\n\n        .grid.not-shown {\n          display: flex;\n          align-items: center;\n          text-align: center;\n        }\n\n        /* ============= CHILDREN ============= */\n\n        mwc-list {\n          --mdc-list-vertical-padding: 0;\n          --mdc-list-item-graphic-margin: 0;\n          --mdc-theme-text-icon-on-background: var(--secondary-text-color);\n          margin-top: 10px;\n        }\n\n        mwc-list li:last-child {\n          display: none;\n        }\n\n        mwc-list li[divider] {\n          border-bottom-color: var(--divider-color);\n        }\n\n        mwc-list-item {\n          width: 100%;\n        }\n\n        div.children {\n          display: grid;\n          grid-template-columns: repeat(\n            auto-fit,\n            minmax(var(--media-browse-item-size, 175px), 0.1fr)\n          );\n          grid-gap: 16px;\n          padding: 16px;\n        }\n\n        :host([dialog]) .children {\n          grid-template-columns: repeat(\n            auto-fit,\n            minmax(var(--media-browse-item-size, 175px), 0.33fr)\n          );\n        }\n\n        .child {\n          display: flex;\n          flex-direction: column;\n          cursor: pointer;\n        }\n\n        ha-card {\n          position: relative;\n          width: 100%;\n          box-sizing: border-box;\n        }\n\n        .children ha-card .thumbnail {\n          width: 100%;\n          position: relative;\n          box-sizing: border-box;\n          transition: padding-bottom 0.1s ease-out;\n          padding-bottom: 100%;\n        }\n\n        .portrait ha-card .thumbnail {\n          padding-bottom: 150%;\n        }\n\n        ha-card .image {\n          border-radius: 3px 3px 0 0;\n        }\n\n        .image {\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n          bottom: 0;\n          background-size: cover;\n          background-repeat: no-repeat;\n          background-position: center;\n        }\n\n        .centered-image {\n          margin: 0 8px;\n          background-size: contain;\n        }\n\n        .brand-image {\n          background-size: 40%;\n        }\n\n        .children ha-card .icon-holder {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n\n        .child .folder {\n          color: var(--secondary-text-color);\n          --mdc-icon-size: calc(var(--media-browse-item-size, 175px) * 0.4);\n        }\n\n        .child .play {\n          position: absolute;\n          transition: color 0.5s;\n          border-radius: 50%;\n          top: calc(50% - 50px);\n          right: calc(50% - 35px);\n          opacity: 0;\n          transition: opacity 0.1s ease-out;\n        }\n\n        .child .play:not(.can_expand) {\n          --mdc-icon-button-size: 70px;\n          --mdc-icon-size: 48px;\n        }\n\n        ha-card:hover .play {\n          opacity: 1;\n        }\n\n        ha-card:hover .play:not(.can_expand) {\n          color: var(--primary-color);\n        }\n\n        ha-card:hover .play.can_expand {\n          bottom: 8px;\n        }\n\n        .child .play.can_expand {\n          background-color: rgba(var(--rgb-card-background-color), 0.5);\n          top: auto;\n          bottom: 0px;\n          right: 8px;\n          transition: bottom 0.1s ease-out, opacity 0.1s ease-out;\n        }\n\n        .child .play:hover {\n          color: var(--primary-color);\n        }\n\n        .child .title {\n          font-size: 16px;\n          padding-top: 16px;\n          padding-left: 2px;\n          overflow: hidden;\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: 1;\n          text-overflow: ellipsis;\n        }\n\n        .child ha-card .title {\n          margin-bottom: 16px;\n          padding-left: 16px;\n        }\n\n        mwc-list-item .graphic {\n          background-size: contain;\n          border-radius: 2px;\n          display: flex;\n          align-content: center;\n          align-items: center;\n          line-height: initial;\n        }\n\n        mwc-list-item .graphic .play {\n          opacity: 0;\n          transition: all 0.5s;\n          background-color: rgba(var(--rgb-card-background-color), 0.5);\n          border-radius: 50%;\n          --mdc-icon-button-size: 40px;\n        }\n\n        mwc-list-item:hover .graphic .play {\n          opacity: 1;\n          color: var(--primary-text-color);\n        }\n\n        mwc-list-item .graphic .play.show {\n          opacity: 1;\n          background-color: transparent;\n        }\n\n        mwc-list-item .title {\n          margin-left: 16px;\n        }\n        mwc-list-item[dir=\"rtl\"] .title {\n          margin-right: 16px;\n          margin-left: 0;\n        }\n\n        /* ============= Narrow ============= */\n\n        :host([narrow]) {\n          padding: 0;\n        }\n\n        :host([narrow]) .media-source {\n          padding: 0 24px;\n        }\n\n        :host([narrow]) div.children {\n          grid-template-columns: minmax(0, 1fr) minmax(0, 1fr) !important;\n        }\n\n        :host([narrow]) .breadcrumb .title {\n          font-size: 24px;\n        }\n        :host([narrow]) .header {\n          padding: 0;\n        }\n        :host([narrow]) .header.no-dialog {\n          display: block;\n        }\n        :host([narrow]) .header_button {\n          position: absolute;\n          top: 14px;\n          right: 8px;\n        }\n        :host([narrow]) .header-content {\n          flex-direction: column;\n          flex-wrap: nowrap;\n        }\n        :host([narrow]) .header-content .img {\n          height: auto;\n          width: 100%;\n          margin-right: 0;\n          padding-bottom: 50%;\n          margin-bottom: 8px;\n          position: relative;\n          background-position: center;\n          border-radius: 0;\n          transition: width 0.4s, height 0.4s, padding-bottom 0.4s;\n        }\n        ha-fab {\n          position: absolute;\n          --mdc-theme-secondary: var(--primary-color);\n          bottom: -20px;\n          right: 20px;\n        }\n        :host([narrow]) .header-info mwc-button {\n          margin-top: 16px;\n          margin-bottom: 8px;\n        }\n        :host([narrow]) .header-info {\n          padding: 0 16px 8px;\n        }\n\n        /* ============= Scroll ============= */\n        :host([scroll]) .breadcrumb .subtitle {\n          height: 0;\n          margin: 0;\n        }\n        :host([scroll]) .breadcrumb .title {\n          -webkit-line-clamp: 1;\n        }\n        :host(:not([narrow])[scroll]) .header:not(.no-img) ha-icon-button {\n          align-self: center;\n        }\n        :host([scroll]) .header-info mwc-button,\n        .no-img .header-info mwc-button {\n          padding-right: 4px;\n        }\n        :host([scroll][narrow]) .no-img .header-info mwc-button {\n          padding-right: 16px;\n        }\n        :host([scroll]) .header-info {\n          flex-direction: row;\n        }\n        :host([scroll]) .header-info mwc-button {\n          align-self: center;\n          margin-top: 0;\n          margin-bottom: 0;\n          padding-bottom: 0;\n        }\n        :host([scroll][narrow]) .no-img .header-info {\n          flex-direction: row-reverse;\n        }\n        :host([scroll][narrow]) .header-info {\n          padding: 20px 24px 10px 24px;\n          align-items: center;\n        }\n        :host([scroll]) .header-content {\n          align-items: flex-end;\n          flex-direction: row;\n        }\n        :host([scroll]) .header-content .img {\n          height: 75px;\n          width: 75px;\n        }\n        :host([scroll]) .breadcrumb {\n          padding-top: 0;\n          align-self: center;\n        }\n        :host([scroll][narrow]) .header-content .img {\n          height: 100px;\n          width: 100px;\n          padding-bottom: initial;\n          margin-bottom: 0;\n        }\n        :host([scroll]) ha-fab {\n          bottom: 0px;\n          right: -24px;\n          --mdc-fab-box-shadow: none;\n          --mdc-theme-secondary: rgba(var(--rgb-primary-color), 0.5);\n        }\n\n        lit-virtualizer {\n          height: 100%;\n          overflow: overlay !important;\n          contain: size layout !important;\n        }\n\n        lit-virtualizer.not_shown {\n          height: calc(100% - 36px);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-media-player-browse\": HaMediaPlayerBrowse;\n  }\n}\n"],"names":[],"sourceRoot":""}