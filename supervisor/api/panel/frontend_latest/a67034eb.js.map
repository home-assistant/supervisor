{"version":3,"file":"a67034eb.js","mappings":";;AA8FA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;;;;AAMA;;;;AA2DA;;AC3JA;AACA;AACA;;AAGA;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;ACOA;;AAIA;AAEA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;;;;AChFA;;ACIA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AAEA;AAEA;;AAEA;AACA;;;AAGA;;;;AAMA;;;;;;;AAgCA;ACpDA;;;AAKA;AACA;AAGA;AACA;AACA;AACA;AAKA;;;AAGA;AACA;;AAIA;;;;;;;AASA;AAEA;AACA;AACA;AACA;;AAGA;;;;;;;;AA6EA;ACpFA;AAEA;;ACiEA;AAEA;AAGA;;;;;AAMA;;AAEA;;;;AAIA;;;;;AAOA;AACA;;;;AAIA;AA7KA;;;AAiLA;AAjLA;;;AAuLA;AACA;;;AAxLA;;;AAgMA;AACA;AAjMA;;AAsMA;AACA;;;AAvMA;;;;;;;AAmNA;;;AAGA;AAGA;;;AAIA;;;;;AAMA;;;AAGA;AAGA;;;AAIA;AACA;;;;;AAMA;AACA;;;AASA;;;;;;AAQA;;AAEA;;;;AAxQA;;;;;;;AAqRA;;AAKA;;AAGA;;AAIA;AAGA;AAGA;AAEA;AAGA;AAEA;AAEA;AAEA;AAKA;;AAGA;AACA;AACA;AACA;;AAEA;AAEA;AACA;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoNA;ACteA;;;AAIA;;AAIA;AAGA;AACA;;;AAKA;;AAGA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AAvGA;AA2GA;AACA;;;AAGA;;AAEA;AAjHA;AAqHA;AACA;;;AAtHA;;AA2HA;;;;;;AAQA;AACA;;;;;AAKA;AACA;;AA1IA;;AAgJA;AAEA;AACA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAmLA;;ACpSA;AACA;AAGA;AACA;AACA;AACA;;;AAIA;ACnBA;;AAGA;AACA;AACA;AACA;;;;;AAOA;;;AAOA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AAGA;AACA;;;;AAIA;;AAGA;;;;AAMA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;AACA;;AAEA;;;AAMA;;;;;;;;;;;;;;;;;;;AAwFA;;;AClLA;AAGA;AACA;;AAEA;;AAEA;AAEA;AACA;;;;;AAMA;AACA;AACA;AACA;;AAGA;;;;AAuDA;AChEA;AAGA;AACA;;AAEA;AAEA;;ACEA;AACA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAGA;;;;;;;;;;;;;AA2EA;;ACrHA;AAGA;AACA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;AACA;;AAGA;;;;AAwBA;;ACpDA;;;;AAMA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAMA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;;AAMA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;AACA;;AAEA;;;AAMA;;;;AAiDA;;;AC1GA;AACA;AACA;AACA;AACA;;AAGA;;ACEA;AACA;AACA;AACA;;AAGA;;ACLA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;;;;;AAQA;;AAGA;;AAIA;AACA;AACA;;AAEA;AAGA;;;;AAMA;AACA;AACA;AACA;AACA;AAGA;;;;AAMA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAMA;AACA;AACA;AACA;AACA;;AAGA;;;;AAwEA;;AChIA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;AAeA;;ACxDA;AAGA;AACA;AACA;;;AAGA;AACA;;;AAKA;AACA;AACA;;;AAIA;;;;;AAuBA;;AChCA;AAGA;AACA;;AAEA;;;AAGA;AACA;;;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;;AAkCA;;ACzDA;AACA;AACA;AACA;AACA;;AAGA;ACLA;AAEA;AAEA;;;AAQA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAYA;;ACgBA;AAEA;AAGA;;;;;;AAOA;;AAEA;;;;AAMA;;;;;AAOA;AACA;;;;AAIA;AA5HA;;;;;AAkIA;AAlIA;;AAuIA;AACA;;;AAxIA;;;;AAiJA;AACA;AAlJA;;;AAwJA;AACA;;;AAzJA;;;;;;;AAqKA;AAGA;;;AAIA;;;;;AAMA;AAGA;;;AAIA;AACA;;;;;AAMA;AACA;;;AASA;;;;;;AAQA;;AAEA;;;;AApNA;;;;;;;AAiOA;;AAKA;;AAGA;;AAIA;AAGA;AAGA;AAEA;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAMA;;;AApLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsbA;ACraA;;;AAIA;;AAIA;AAGA;AACA;;;AAKA;;AAGA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AApJA;AAwJA;AACA;;;AAGA;;AAEA;AA9JA;AAkKA;AACA;;;AAnKA;;AAwKA;;;;;;AAQA;AACA;;;;;AAKA;AACA;;AAvLA;;AA6LA;AAEA;AACA;;;;AAzFA;;;;;;;;;;;;;;;;;;;;;;;AAkQA;;ACnTA;AACA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAGA;;;;;;;;;AA8EA;;;ACzIA;AACA;AACA;AACA;AACA;;AAGA;;ACkGA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACxCA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACpCA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AC1DA;;;;AAMA;;AAEA;AACA;AACA;;AAEA;;;AAIA;;;;AAYA;;ACkFA;AACA;AACA;AACA;AACA;AACA;;AAGA;ACtFA;AAGA;AACA;AACA;;AAEA;AAGA;;AAfA;;ACfA;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAKA;;;;;AAqBA;;ACkCA;;AAGA;;AAIA;;;;;;AAOA;;AAEA;;;;AAIA;;;;;AAOA;AACA;;;;AAIA;AApJA;;;AAwJA;AACA;;;AAzJA;;;;AAkKA;AACA;AAnKA;;;AAyKA;AACA;;;AA1KA;;;;AAmLA;AACA;;;AApLA;;;;;;AA+LA;AACA;AAGA;;;AAIA;;;;AAKA;AACA;AAGA;;;AAIA;AACA;;;;;AAMA;AACA;;;AASA;;;;;;AAQA;;AAEA;;;;AA/OA;;;;;;AA2PA;;AAKA;;AAGA;;AAIA;AAEA;AAGA;AAEA;AAGA;AAEA;AAEA;AAEA;;;AAQA;AACA;AACA;AACA;;AAEA;AAEA;;AAGA;AAGA;AACA;AACA;;;AAGA;AAEA;AACA;;;;;;;AAcA;AAIA;;AAEA;;;AAMA;;;AA0LA;AACA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;AC5kBA;;;AAKA;;AAIA;AAGA;AACA;;;AAKA;;AAIA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AApGA;AAwGA;AACA;;;AAGA;;AAEA;AA9GA;AAkHA;AACA;;;AAnHA;;AAwHA;;;;AAMA;;;;AAIA;AAGA;;AArIA;;AAyIA;AAEA;AACA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AA4LA;;AC7OA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACpDA;AACA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAGA;;;;;;;;;AAiFA;;AC3IA;;AAIA;AACA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;AACA;;;AAGA;;AAIA;AAGA;AAGA;AACA;AACA;AACA;;AAGA;;;;AA+CA;;ACvDA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACZA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;AAoBA;;ACnDA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACoHA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACPA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AC1GA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AC5BA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;;;;AAdA;;;;AAkDA;;AC3DA;;;;AAMA;;AAEA;AACA;AACA;;AAEA;;;AAIA;;;;AAYA;;ACuCA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACpEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;ACgDA;AAGA;AAGA;;AAEA;AACA;;;AAGA;;AAEA;AAnGA;;;AA0GA;;;;;;;;;AAyBA;;AC9FA;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;AAGA;AACA;AACA;AACA;;AAEA;;;;AAIA;;AAIA;AACA;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;;;;;AAOA;AACA;AACA;;;;AAKA;;;;;;;;;AAmCA","sources":["webpack://home-assistant-frontend/./src/components/device/ha-device-automation-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-action.ts","webpack://home-assistant-frontend/./src/components/ha-textarea.ts","webpack://home-assistant-frontend/./src/components/user/ha-user-badge.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/components/user/ha-user-picker.ts","webpack://home-assistant-frontend/./src/components/user/ha-users-picker.ts","webpack://home-assistant-frontend/./src/data/entity_attributes.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/ha-automation-action-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/ha-automation-action.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-activate_scene.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-choose.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-condition.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-delay.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-device_id.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-event.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-if.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-parallel.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-play_media.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-repeat.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-service.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-stop.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-wait_for_trigger.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-wait_template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition-editor.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-device.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-logical.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-numeric_state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-sun.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-time.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-trigger.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-zone.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/ha-automation-trigger-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/ha-automation-trigger.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-calendar.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-device.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-event.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-geo_location.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-homeassistant.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-mqtt.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-numeric_state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-sun.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-tag.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-time.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-time_pattern.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-webhook.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-zone.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport {\n  DeviceAutomation,\n  deviceAutomationsEqual,\n  sortDeviceAutomations,\n} from \"../../data/device_automation\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-select\";\n\nconst NO_AUTOMATION_KEY = \"NO_AUTOMATION\";\nconst UNKNOWN_AUTOMATION_KEY = \"UNKNOWN_AUTOMATION\";\n\nexport abstract class HaDeviceAutomationPicker<\n  T extends DeviceAutomation\n> extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public deviceId?: string;\n\n  @property() public value?: T;\n\n  @state() private _automations: T[] = [];\n\n  // Trigger an empty render so we start with a clean DOM.\n  // paper-listbox does not like changing things around.\n  @state() private _renderEmpty = false;\n\n  protected get NO_AUTOMATION_TEXT() {\n    return this.hass.localize(\n      \"ui.panel.config.devices.automation.actions.no_actions\"\n    );\n  }\n\n  protected get UNKNOWN_AUTOMATION_TEXT() {\n    return this.hass.localize(\n      \"ui.panel.config.devices.automation.actions.unknown_action\"\n    );\n  }\n\n  private _localizeDeviceAutomation: (\n    hass: HomeAssistant,\n    automation: T\n  ) => string;\n\n  private _fetchDeviceAutomations: (\n    hass: HomeAssistant,\n    deviceId: string\n  ) => Promise<T[]>;\n\n  private _createNoAutomation: (deviceId?: string) => T;\n\n  constructor(\n    localizeDeviceAutomation: HaDeviceAutomationPicker<T>[\"_localizeDeviceAutomation\"],\n    fetchDeviceAutomations: HaDeviceAutomationPicker<T>[\"_fetchDeviceAutomations\"],\n    createNoAutomation: HaDeviceAutomationPicker<T>[\"_createNoAutomation\"]\n  ) {\n    super();\n    this._localizeDeviceAutomation = localizeDeviceAutomation;\n    this._fetchDeviceAutomations = fetchDeviceAutomations;\n    this._createNoAutomation = createNoAutomation;\n  }\n\n  private get _value() {\n    if (!this.value) {\n      return \"\";\n    }\n\n    if (!this._automations.length) {\n      return NO_AUTOMATION_KEY;\n    }\n\n    const idx = this._automations.findIndex((automation) =>\n      deviceAutomationsEqual(automation, this.value!)\n    );\n\n    if (idx === -1) {\n      return UNKNOWN_AUTOMATION_KEY;\n    }\n\n    return `${this._automations[idx].device_id}_${idx}`;\n  }\n\n  protected render(): TemplateResult {\n    if (this._renderEmpty) {\n      return html``;\n    }\n    const value = this._value;\n    return html`\n      <ha-select\n        .label=${this.label}\n        .value=${value}\n        @selected=${this._automationChanged}\n        .disabled=${this._automations.length === 0}\n      >\n        ${value === NO_AUTOMATION_KEY\n          ? html`<mwc-list-item .value=${NO_AUTOMATION_KEY}>\n              ${this.NO_AUTOMATION_TEXT}\n            </mwc-list-item>`\n          : \"\"}\n        ${value === UNKNOWN_AUTOMATION_KEY\n          ? html`<mwc-list-item .value=${UNKNOWN_AUTOMATION_KEY}>\n              ${this.UNKNOWN_AUTOMATION_TEXT}\n            </mwc-list-item>`\n          : \"\"}\n        ${this._automations.map(\n          (automation, idx) => html`\n            <mwc-list-item .value=${`${automation.device_id}_${idx}`}>\n              ${this._localizeDeviceAutomation(this.hass, automation)}\n            </mwc-list-item>\n          `\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"deviceId\")) {\n      this._updateDeviceInfo();\n    }\n  }\n\n  private async _updateDeviceInfo() {\n    this._automations = this.deviceId\n      ? (await this._fetchDeviceAutomations(this.hass, this.deviceId)).sort(\n          sortDeviceAutomations\n        )\n      : // No device, clear the list of automations\n        [];\n\n    // If there is no value, or if we have changed the device ID, reset the value.\n    if (!this.value || this.value.device_id !== this.deviceId) {\n      this._setValue(\n        this._automations.length\n          ? this._automations[0]\n          : this._createNoAutomation(this.deviceId)\n      );\n    }\n    this._renderEmpty = true;\n    await this.updateComplete;\n    this._renderEmpty = false;\n  }\n\n  private _automationChanged(ev) {\n    const value = ev.target.value;\n    if (!value || [UNKNOWN_AUTOMATION_KEY, NO_AUTOMATION_KEY].includes(value)) {\n      return;\n    }\n    const [deviceId, idx] = value.split(\"_\");\n    const automation = this._automations[idx];\n    if (automation.device_id !== deviceId) {\n      return;\n    }\n    this._setValue(automation);\n  }\n\n  private _setValue(automation: T) {\n    if (this.value && deviceAutomationsEqual(automation, this.value)) {\n      return;\n    }\n    const value = { ...automation };\n    delete value.metadata;\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-select {\n        display: block;\n      }\n    `;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { Action } from \"../../data/script\";\nimport { ActionSelector } from \"../../data/selector\";\nimport \"../../panels/config/automation/action/ha-automation-action\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-selector-action\")\nexport class HaActionSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: ActionSelector;\n\n  @property() public value?: Action;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  protected render() {\n    return html`\n      <ha-automation-action\n        .disabled=${this.disabled}\n        .actions=${this.value || []}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-action {\n        display: block;\n        margin-bottom: 16px;\n      }\n      :host([disabled]) ha-automation-action {\n        opacity: var(--light-disabled-opacity);\n        pointer-events: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-action\": HaActionSelector;\n  }\n}\n","import { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textarea\")\nexport class HaTextArea extends TextAreaBase {\n  @property({ type: Boolean, reflect: true }) autogrow = false;\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.autogrow && changedProperties.has(\"value\")) {\n      this.mdcRoot.dataset.value = this.value + '=\\u200B\"'; // add a zero-width space to correctly wrap\n    }\n  }\n\n  static override styles = [\n    textfieldStyles,\n    textareaStyles,\n    css`\n      :host([autogrow]) .mdc-text-field {\n        position: relative;\n        min-height: 74px;\n        min-width: 178px;\n        max-height: 200px;\n      }\n      :host([autogrow]) .mdc-text-field:after {\n        content: attr(data-value);\n        margin-top: 23px;\n        margin-bottom: 9px;\n        line-height: 1.5rem;\n        min-height: 42px;\n        padding: 0px 32px 0 16px;\n        letter-spacing: var(\n          --mdc-typography-subtitle1-letter-spacing,\n          0.009375em\n        );\n        visibility: hidden;\n        white-space: pre-wrap;\n      }\n      :host([autogrow]) .mdc-text-field__input {\n        position: absolute;\n        height: calc(100% - 32px);\n      }\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textarea\": HaTextArea;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeUserInitials, User } from \"../../data/user\";\nimport { CurrentUser, HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-user-badge\")\nclass UserBadge extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public user?: User | CurrentUser;\n\n  @state() private _personPicture?: string;\n\n  private _personEntityId?: string;\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"user\")) {\n      this._getPersonPicture();\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (\n      this._personEntityId &&\n      oldHass &&\n      this.hass.states[this._personEntityId] !==\n        oldHass.states[this._personEntityId]\n    ) {\n      const entityState = this.hass.states[this._personEntityId];\n      if (entityState) {\n        this._personPicture = entityState.attributes.entity_picture;\n      } else {\n        this._getPersonPicture();\n      }\n    } else if (!this._personEntityId && oldHass) {\n      this._getPersonPicture();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.user) {\n      return html``;\n    }\n    const picture = this._personPicture;\n\n    if (picture) {\n      return html`<div\n        style=${styleMap({ backgroundImage: `url(${picture})` })}\n        class=\"picture\"\n      ></div>`;\n    }\n    const initials = computeUserInitials(this.user.name);\n    return html`<div\n      class=\"initials ${classMap({ long: initials!.length > 2 })}\"\n    >\n      ${initials}\n    </div>`;\n  }\n\n  private _getPersonPicture() {\n    this._personEntityId = undefined;\n    this._personPicture = undefined;\n    if (!this.hass || !this.user) {\n      return;\n    }\n    for (const entity of Object.values(this.hass.states)) {\n      if (\n        entity.attributes.user_id === this.user.id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._personEntityId = entity.entity_id;\n        this._personPicture = entity.attributes.entity_picture;\n        break;\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: contents;\n      }\n      .picture {\n        width: 40px;\n        height: 40px;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-badge\": UserBadge;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport { fetchUsers, User } from \"../../data/user\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-select\";\nimport \"./ha-user-badge\";\nimport \"../ha-list-item\";\n\nclass HaUserPicker extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public noUserLabel?: string;\n\n  @property() public value = \"\";\n\n  @property() public users?: User[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  private _sortedUsers = memoizeOne((users?: User[]) => {\n    if (!users) {\n      return [];\n    }\n\n    return users\n      .filter((user) => !user.system_generated)\n      .sort((a, b) => stringCompare(a.name, b.name));\n  });\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-select\n        .label=${this.label}\n        .disabled=${this.disabled}\n        .value=${this.value}\n        @selected=${this._userChanged}\n      >\n        ${this.users?.length === 0\n          ? html`<mwc-list-item value=\"\">\n              ${this.noUserLabel ||\n              this.hass?.localize(\"ui.components.user-picker.no_user\")}\n            </mwc-list-item>`\n          : \"\"}\n        ${this._sortedUsers(this.users).map(\n          (user) => html`\n            <ha-list-item graphic=\"avatar\" .value=${user.id}>\n              <ha-user-badge\n                .hass=${this.hass}\n                .user=${user}\n                slot=\"graphic\"\n              ></ha-user-badge>\n              ${user.name}\n            </ha-list-item>\n          `\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (this.users === undefined) {\n      fetchUsers(this.hass!).then((users) => {\n        this.users = users;\n      });\n    }\n  }\n\n  private _userChanged(ev) {\n    const newValue = ev.target.value;\n\n    if (newValue !== this.value) {\n      this.value = newValue;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: newValue });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n      }\n      mwc-list {\n        display: block;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-user-picker\", HaUserPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-picker\": HaUserPicker;\n  }\n}\n","import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { guard } from \"lit/directives/guard\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { fetchUsers, User } from \"../../data/user\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"./ha-user-picker\";\n\n@customElement(\"ha-users-picker\")\nclass HaUsersPickerLight extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string[];\n\n  @property({ attribute: \"picked-user-label\" })\n  public pickedUserLabel?: string;\n\n  @property({ attribute: \"pick-user-label\" })\n  public pickUserLabel?: string;\n\n  @property({ attribute: false })\n  public users?: User[];\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (this.users === undefined) {\n      fetchUsers(this.hass!).then((users) => {\n        this.users = users;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.users) {\n      return html``;\n    }\n\n    const notSelectedUsers = this._notSelectedUsers(this.users, this.value);\n    return html`\n      ${guard([notSelectedUsers], () =>\n        this.value?.map(\n          (user_id, idx) => html`\n            <div>\n              <ha-user-picker\n                .label=${this.pickedUserLabel}\n                .noUserLabel=${this.hass!.localize(\n                  \"ui.components.user-picker.remove_user\"\n                )}\n                .index=${idx}\n                .hass=${this.hass}\n                .value=${user_id}\n                .users=${this._notSelectedUsersAndSelected(\n                  user_id,\n                  this.users,\n                  notSelectedUsers\n                )}\n                @value-changed=${this._userChanged}\n              ></ha-user-picker>\n              <ha-icon-button\n                .userId=${user_id}\n                .label=${this.hass!.localize(\n                  \"ui.components.user-picker.remove_user\"\n                )}\n                .path=${mdiClose}\n                @click=${this._removeUser}\n              >\n                ></ha-icon-button\n              >\n            </div>\n          `\n        )\n      )}\n      <ha-user-picker\n        .label=${this.pickUserLabel ||\n        this.hass!.localize(\"ui.components.user-picker.add_user\")}\n        .hass=${this.hass}\n        .users=${notSelectedUsers}\n        .disabled=${!notSelectedUsers?.length}\n        @value-changed=${this._addUser}\n      ></ha-user-picker>\n    `;\n  }\n\n  private _notSelectedUsers = memoizeOne(\n    (users?: User[], currentUsers?: string[]) =>\n      currentUsers\n        ? users?.filter(\n            (user) => !user.system_generated && !currentUsers.includes(user.id)\n          )\n        : users?.filter((user) => !user.system_generated)\n  );\n\n  private _notSelectedUsersAndSelected = (\n    userId: string,\n    users?: User[],\n    notSelected?: User[]\n  ) => {\n    const selectedUser = users?.find((user) => user.id === userId);\n    if (selectedUser) {\n      return notSelected ? [...notSelected, selectedUser] : [selectedUser];\n    }\n    return notSelected;\n  };\n\n  private get _currentUsers() {\n    return this.value || [];\n  }\n\n  private async _updateUsers(users) {\n    this.value = users;\n    fireEvent(this, \"value-changed\", {\n      value: users,\n    });\n  }\n\n  private _userChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const index = (event.currentTarget as any).index;\n    const newValue = event.detail.value;\n    const newUsers = [...this._currentUsers];\n    if (newValue === \"\") {\n      newUsers.splice(index, 1);\n    } else {\n      newUsers.splice(index, 1, newValue);\n    }\n    this._updateUsers(newUsers);\n  }\n\n  private async _addUser(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentUsers = this._currentUsers;\n    if (currentUsers.includes(toAdd)) {\n      return;\n    }\n\n    this._updateUsers([...currentUsers, toAdd]);\n  }\n\n  private _removeUser(event) {\n    const userId = (event.currentTarget as any).userId;\n    this._updateUsers(this._currentUsers.filter((user) => user !== userId));\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      div {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-users-picker\": HaUsersPickerLight;\n  }\n}\n","import { html, TemplateResult } from \"lit\";\nimport { until } from \"lit/directives/until\";\nimport checkValidDate from \"../common/datetime/check_valid_date\";\nimport { formatDate } from \"../common/datetime/format_date\";\nimport { formatDateTimeWithSeconds } from \"../common/datetime/format_date_time\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { capitalizeFirstLetter } from \"../common/string/capitalize-first-letter\";\nimport { isDate } from \"../common/string/is_date\";\nimport { isTimestamp } from \"../common/string/is_timestamp\";\nimport { HomeAssistant } from \"../types\";\n\nlet jsYamlPromise: Promise<typeof import(\"../resources/js-yaml-dump\")>;\n\nexport const STATE_ATTRIBUTES = [\n  \"assumed_state\",\n  \"attribution\",\n  \"custom_ui_more_info\",\n  \"custom_ui_state_card\",\n  \"device_class\",\n  \"editable\",\n  \"emulated_hue_name\",\n  \"emulated_hue\",\n  \"entity_picture\",\n  \"friendly_name\",\n  \"haaska_hidden\",\n  \"haaska_name\",\n  \"icon\",\n  \"initial_state\",\n  \"last_reset\",\n  \"restored\",\n  \"state_class\",\n  \"supported_features\",\n  \"unit_of_measurement\",\n];\n\n// Convert from internal snake_case format to user-friendly format\nexport function formatAttributeName(value: string): string {\n  value = value\n    .replace(/_/g, \" \")\n    .replace(/\\bid\\b/g, \"ID\")\n    .replace(/\\bip\\b/g, \"IP\")\n    .replace(/\\bmac\\b/g, \"MAC\")\n    .replace(/\\bgps\\b/g, \"GPS\");\n  return capitalizeFirstLetter(value);\n}\n\nexport function formatAttributeValue(\n  hass: HomeAssistant,\n  value: any\n): string | TemplateResult {\n  if (value === null) {\n    return \"—\";\n  }\n\n  // YAML handling\n  if (\n    (Array.isArray(value) && value.some((val) => val instanceof Object)) ||\n    (!Array.isArray(value) && value instanceof Object)\n  ) {\n    if (!jsYamlPromise) {\n      jsYamlPromise = import(\"../resources/js-yaml-dump\");\n    }\n    const yaml = jsYamlPromise.then((jsYaml) => jsYaml.dump(value));\n    return html`<pre>${until(yaml, \"\")}</pre>`;\n  }\n\n  if (typeof value === \"number\") {\n    return formatNumber(value, hass.locale);\n  }\n\n  if (typeof value === \"string\") {\n    // URL handling\n    if (value.startsWith(\"http\")) {\n      try {\n        // If invalid URL, exception will be raised\n        const url = new URL(value);\n        if (url.protocol === \"http:\" || url.protocol === \"https:\")\n          return html`<a target=\"_blank\" rel=\"noreferrer\" href=${value}\n            >${value}</a\n          >`;\n      } catch (_) {\n        // Nothing to do here\n      }\n    }\n\n    // Date handling\n    if (isDate(value, true)) {\n      // Timestamp handling\n      if (isTimestamp(value)) {\n        const date = new Date(value);\n        if (checkValidDate(date)) {\n          return formatDateTimeWithSeconds(date, hass.locale);\n        }\n      }\n\n      // Value was not a timestamp, so only do date formatting\n      const date = new Date(value);\n      if (checkValidDate(date)) {\n        return formatDate(date, hass.locale);\n      }\n    }\n  }\n\n  return Array.isArray(value) ? value.join(\", \") : value;\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheck,\n  mdiContentDuplicate,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiPlay,\n  mdiPlayCircleOutline,\n  mdiRenameBox,\n  mdiStopCircleOutline,\n  mdiSort,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { capitalizeFirstLetter } from \"../../../../common/string/capitalize-first-letter\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-expansion-panel\";\nimport \"../../../../components/ha-icon-button\";\nimport type { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\nimport { ACTION_TYPES } from \"../../../../data/action\";\nimport { validateConfig } from \"../../../../data/config\";\nimport { Action, getActionType } from \"../../../../data/script\";\nimport { describeAction } from \"../../../../data/script_i18n\";\nimport { callExecuteScript } from \"../../../../data/service\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n  showPromptDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { showToast } from \"../../../../util/toast\";\nimport \"./types/ha-automation-action-activate_scene\";\nimport \"./types/ha-automation-action-choose\";\nimport \"./types/ha-automation-action-condition\";\nimport \"./types/ha-automation-action-delay\";\nimport \"./types/ha-automation-action-device_id\";\nimport \"./types/ha-automation-action-event\";\nimport \"./types/ha-automation-action-if\";\nimport \"./types/ha-automation-action-parallel\";\nimport \"./types/ha-automation-action-play_media\";\nimport \"./types/ha-automation-action-repeat\";\nimport \"./types/ha-automation-action-service\";\nimport \"./types/ha-automation-action-stop\";\nimport \"./types/ha-automation-action-wait_for_trigger\";\nimport \"./types/ha-automation-action-wait_template\";\n\nconst getType = (action: Action | undefined) => {\n  if (!action) {\n    return undefined;\n  }\n  if (\"service\" in action || \"scene\" in action) {\n    return getActionType(action);\n  }\n  if ([\"and\", \"or\", \"not\"].some((key) => key in action)) {\n    return \"condition\";\n  }\n  return Object.keys(ACTION_TYPES).find((option) => option in action);\n};\n\nexport interface ActionElement extends LitElement {\n  action: Action;\n}\n\nexport const handleChangeEvent = (element: ActionElement, ev: CustomEvent) => {\n  ev.stopPropagation();\n  const name = (ev.target as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = ev.detail?.value || (ev.target as any).value;\n\n  if ((element.action[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newAction: Action;\n  if (!newVal) {\n    newAction = { ...element.action };\n    delete newAction[name];\n  } else {\n    newAction = { ...element.action, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newAction });\n};\n\nconst preventDefault = (ev) => ev.preventDefault();\n\n@customElement(\"ha-automation-action-row\")\nexport default class HaAutomationActionRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: Action;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public hideMenu = false;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  @state() private _warnings?: string[];\n\n  @state() private _uiModeAvailable = true;\n\n  @state() private _yamlMode = false;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  protected willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    this._uiModeAvailable = getType(this.action) !== undefined;\n    if (!this._uiModeAvailable && !this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    if (this._yamlMode) {\n      const yamlEditor = this._yamlEditor;\n      if (yamlEditor && yamlEditor.value !== this.action) {\n        yamlEditor.setValue(this.action);\n      }\n    }\n  }\n\n  protected render() {\n    const type = getType(this.action);\n    const yamlMode = this._yamlMode;\n\n    return html`\n      <ha-card outlined>\n        ${this.action.enabled === false\n          ? html`<div class=\"disabled-bar\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.disabled\"\n              )}\n            </div>`\n          : \"\"}\n        <ha-expansion-panel leftChevron>\n          <h3 slot=\"header\">\n            <ha-svg-icon\n              class=\"action-icon\"\n              .path=${ACTION_TYPES[type!]}\n            ></ha-svg-icon>\n            ${capitalizeFirstLetter(describeAction(this.hass, this.action))}\n          </h3>\n\n          <slot name=\"icons\" slot=\"icons\"></slot>\n          ${this.hideMenu\n            ? \"\"\n            : html`\n                <ha-button-menu\n                  slot=\"icons\"\n                  fixed\n                  corner=\"BOTTOM_START\"\n                  @action=${this._handleAction}\n                  @click=${preventDefault}\n                >\n                  <ha-icon-button\n                    slot=\"trigger\"\n                    .label=${this.hass.localize(\"ui.common.menu\")}\n                    .path=${mdiDotsVertical}\n                  ></ha-icon-button>\n                  <mwc-list-item graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.actions.run\"\n                    )}\n                    <ha-svg-icon slot=\"graphic\" .path=${mdiPlay}></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.actions.rename\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiRenameBox}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.actions.re_order\"\n                    )}\n                    <ha-svg-icon slot=\"graphic\" .path=${mdiSort}></ha-svg-icon>\n                  </mwc-list-item>\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.actions.duplicate\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiContentDuplicate}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <li divider role=\"separator\"></li>\n\n                  <mwc-list-item\n                    .disabled=${!this._uiModeAvailable}\n                    graphic=\"icon\"\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_ui\"\n                    )}\n                    ${!yamlMode\n                      ? html`<ha-svg-icon\n                          class=\"selected_menu_item\"\n                          slot=\"graphic\"\n                          .path=${mdiCheck}\n                        ></ha-svg-icon>`\n                      : ``}\n                  </mwc-list-item>\n\n                  <mwc-list-item\n                    .disabled=${!this._uiModeAvailable}\n                    graphic=\"icon\"\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_yaml\"\n                    )}\n                    ${yamlMode\n                      ? html`<ha-svg-icon\n                          class=\"selected_menu_item\"\n                          slot=\"graphic\"\n                          .path=${mdiCheck}\n                        ></ha-svg-icon>`\n                      : ``}\n                  </mwc-list-item>\n\n                  <li divider role=\"separator\"></li>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.action.enabled === false\n                      ? this.hass.localize(\n                          \"ui.panel.config.automation.editor.actions.enable\"\n                        )\n                      : this.hass.localize(\n                          \"ui.panel.config.automation.editor.actions.disable\"\n                        )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${this.action.enabled === false\n                        ? mdiPlayCircleOutline\n                        : mdiStopCircleOutline}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                  <mwc-list-item\n                    class=\"warning\"\n                    graphic=\"icon\"\n                    .disabled=${this.disabled}\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.actions.delete\"\n                    )}\n                    <ha-svg-icon\n                      class=\"warning\"\n                      slot=\"graphic\"\n                      .path=${mdiDelete}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                </ha-button-menu>\n              `}\n\n          <div\n            class=${classMap({\n              \"card-content\": true,\n              disabled: this.action.enabled === false,\n            })}\n          >\n            ${this._warnings\n              ? html`<ha-alert\n                  alert-type=\"warning\"\n                  .title=${this.hass.localize(\n                    \"ui.errors.config.editor_not_supported\"\n                  )}\n                >\n                  ${this._warnings!.length > 0 &&\n                  this._warnings![0] !== undefined\n                    ? html` <ul>\n                        ${this._warnings!.map(\n                          (warning) => html`<li>${warning}</li>`\n                        )}\n                      </ul>`\n                    : \"\"}\n                  ${this.hass.localize(\n                    \"ui.errors.config.edit_in_yaml_supported\"\n                  )}\n                </ha-alert>`\n              : \"\"}\n            ${yamlMode\n              ? html`\n                  ${type === undefined\n                    ? html`\n                        ${this.hass.localize(\n                          \"ui.panel.config.automation.editor.actions.unsupported_action\",\n                          \"action\",\n                          type\n                        )}\n                      `\n                    : \"\"}\n                  <ha-yaml-editor\n                    .hass=${this.hass}\n                    .defaultValue=${this.action}\n                    .readOnly=${this.disabled}\n                    @value-changed=${this._onYamlChange}\n                  ></ha-yaml-editor>\n                `\n              : html`\n                  <div @ui-mode-not-available=${this._handleUiModeNotAvailable}>\n                    ${dynamicElement(`ha-automation-action-${type}`, {\n                      hass: this.hass,\n                      action: this.action,\n                      narrow: this.narrow,\n                      reOrderMode: this.reOrderMode,\n                      disabled: this.disabled,\n                    })}\n                  </div>\n                `}\n          </div>\n        </ha-expansion-panel>\n      </ha-card>\n    `;\n  }\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    // Prevent possible parent action-row from switching to yamlMode\n    ev.stopPropagation();\n\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private async _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._runAction();\n        break;\n      case 1:\n        await this._renameAction();\n        break;\n      case 2:\n        fireEvent(this, \"re-order\");\n        break;\n      case 3:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 4:\n        this._switchUiMode();\n        this.expand();\n        break;\n      case 5:\n        this._switchYamlMode();\n        this.expand();\n        break;\n      case 6:\n        this._onDisable();\n        break;\n      case 7:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDisable() {\n    const enabled = !(this.action.enabled ?? true);\n    const value = { ...this.action, enabled };\n    fireEvent(this, \"value-changed\", { value });\n    if (this._yamlMode) {\n      this._yamlEditor?.setValue(value);\n    }\n  }\n\n  private async _runAction() {\n    const validated = await validateConfig(this.hass, {\n      action: this.action,\n    });\n\n    if (!validated.action.valid) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.invalid_action\"\n        ),\n        text: validated.action.error,\n      });\n      return;\n    }\n\n    try {\n      await callExecuteScript(this.hass, this.action);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.run_action_error\"\n        ),\n        text: err.message || err,\n      });\n      return;\n    }\n\n    showToast(this, {\n      message: this.hass.localize(\n        \"ui.panel.config.automation.editor.actions.run_action_success\"\n      ),\n    });\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.automation.editor.actions.delete_confirm_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.actions.delete_confirm_text\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      destructive: true,\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n\n  private _switchUiMode() {\n    this._warnings = undefined;\n    this._yamlMode = false;\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = true;\n  }\n\n  private async _renameAction(): Promise<void> {\n    const alias = await showPromptDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.automation.editor.actions.change_alias\"\n      ),\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.automation.editor.actions.alias\"\n      ),\n      inputType: \"string\",\n      placeholder: capitalizeFirstLetter(\n        describeAction(this.hass, this.action, undefined, true)\n      ),\n      defaultValue: this.action.alias,\n      confirmText: this.hass.localize(\"ui.common.submit\"),\n    });\n    const value = { ...this.action };\n    if (!alias) {\n      delete value.alias;\n    } else {\n      value.alias = alias;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n    if (this._yamlMode) {\n      this._yamlEditor?.setValue(value);\n    }\n  }\n\n  public expand() {\n    this.updateComplete.then(() => {\n      this.shadowRoot!.querySelector(\"ha-expansion-panel\")!.expanded = true;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-button-menu,\n        ha-icon-button {\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        }\n        .disabled {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n        ha-expansion-panel {\n          --expansion-panel-summary-padding: 0 0 0 8px;\n          --expansion-panel-content-padding: 0;\n        }\n        h3 {\n          margin: 0;\n          font-size: inherit;\n          font-weight: inherit;\n        }\n        .action-icon {\n          display: none;\n        }\n        @media (min-width: 870px) {\n          .action-icon {\n            display: inline-block;\n            color: var(--secondary-text-color);\n            opacity: 0.9;\n            margin-right: 8px;\n          }\n        }\n        .card-content {\n          padding: 16px;\n        }\n        .disabled-bar {\n          background: var(--divider-color, #e0e0e0);\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius);\n          border-top-left-radius: var(--ha-card-border-radius);\n        }\n\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n        .warning ul {\n          margin: 4px 0;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-row\": HaAutomationActionRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport type { ActionDetail } from \"@material/mwc-list\";\nimport { mdiArrowDown, mdiArrowUp, mdiDrag, mdiPlus } from \"@mdi/js\";\nimport deepClone from \"deep-clone-simple\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport memoizeOne from \"memoize-one\";\nimport type { SortableEvent } from \"sortablejs\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-button-menu\";\nimport type { HaSelect } from \"../../../../components/ha-select\";\nimport \"../../../../components/ha-svg-icon\";\nimport { ACTION_TYPES } from \"../../../../data/action\";\nimport { Action } from \"../../../../data/script\";\nimport { sortableStyles } from \"../../../../resources/ha-sortable-style\";\nimport {\n  loadSortable,\n  SortableInstance,\n} from \"../../../../resources/sortable.ondemand\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-action-row\";\nimport type HaAutomationActionRow from \"./ha-automation-action-row\";\nimport \"./types/ha-automation-action-activate_scene\";\nimport \"./types/ha-automation-action-choose\";\nimport \"./types/ha-automation-action-condition\";\nimport \"./types/ha-automation-action-delay\";\nimport \"./types/ha-automation-action-device_id\";\nimport \"./types/ha-automation-action-event\";\nimport \"./types/ha-automation-action-if\";\nimport \"./types/ha-automation-action-parallel\";\nimport \"./types/ha-automation-action-play_media\";\nimport \"./types/ha-automation-action-repeat\";\nimport \"./types/ha-automation-action-service\";\nimport \"./types/ha-automation-action-stop\";\nimport \"./types/ha-automation-action-wait_for_trigger\";\nimport \"./types/ha-automation-action-wait_template\";\n\n@customElement(\"ha-automation-action\")\nexport default class HaAutomationAction extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public nested = false;\n\n  @property() public actions!: Action[];\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  private _focusLastActionOnChange = false;\n\n  private _actionKeys = new WeakMap<Action, string>();\n\n  private _sortable?: SortableInstance;\n\n  protected render() {\n    return html`\n      ${this.reOrderMode && !this.nested\n        ? html`\n            <ha-alert\n              alert-type=\"info\"\n              .title=${this.hass.localize(\n                \"ui.panel.config.automation.editor.re_order_mode.title\"\n              )}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.re_order_mode.description_actions\"\n              )}\n              <mwc-button slot=\"action\" @click=${this._exitReOrderMode}>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.re_order_mode.exit\"\n                )}\n              </mwc-button>\n            </ha-alert>\n          `\n        : null}\n      <div class=\"actions\">\n        ${repeat(\n          this.actions,\n          (action) => this._getKey(action),\n          (action, idx) => html`\n            <ha-automation-action-row\n              .index=${idx}\n              .action=${action}\n              .narrow=${this.narrow}\n              .disabled=${this.disabled}\n              .hideMenu=${this.reOrderMode}\n              .reOrderMode=${this.reOrderMode}\n              @duplicate=${this._duplicateAction}\n              @value-changed=${this._actionChanged}\n              @re-order=${this._enterReOrderMode}\n              .hass=${this.hass}\n            >\n              ${this.reOrderMode\n                ? html`\n                    <ha-icon-button\n                      .index=${idx}\n                      slot=\"icons\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.automation.editor.move_up\"\n                      )}\n                      .path=${mdiArrowUp}\n                      @click=${this._moveUp}\n                      .disabled=${idx === 0}\n                    ></ha-icon-button>\n                    <ha-icon-button\n                      .index=${idx}\n                      slot=\"icons\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.automation.editor.move_down\"\n                      )}\n                      .path=${mdiArrowDown}\n                      @click=${this._moveDown}\n                      .disabled=${idx === this.actions.length - 1}\n                    ></ha-icon-button>\n                    <div class=\"handle\" slot=\"icons\">\n                      <ha-svg-icon .path=${mdiDrag}></ha-svg-icon>\n                    </div>\n                  `\n                : \"\"}\n            </ha-automation-action-row>\n          `\n        )}\n      </div>\n      <ha-button-menu\n        fixed\n        @action=${this._addAction}\n        .disabled=${this.disabled}\n      >\n        <mwc-button\n          slot=\"trigger\"\n          outlined\n          .disabled=${this.disabled}\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.actions.add\"\n          )}\n        >\n          <ha-svg-icon .path=${mdiPlus} slot=\"icon\"></ha-svg-icon>\n        </mwc-button>\n        ${this._processedTypes(this.hass.localize).map(\n          ([opt, label, icon]) => html`\n            <mwc-list-item .value=${opt} aria-label=${label} graphic=\"icon\">\n              ${label}<ha-svg-icon slot=\"graphic\" .path=${icon}></ha-svg-icon\n            ></mwc-list-item>\n          `\n        )}\n      </ha-button-menu>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"reOrderMode\")) {\n      if (this.reOrderMode) {\n        this._createSortable();\n      } else {\n        this._destroySortable();\n      }\n    }\n    if (changedProps.has(\"actions\") && this._focusLastActionOnChange) {\n      this._focusLastActionOnChange = false;\n\n      const row = this.shadowRoot!.querySelector<HaAutomationActionRow>(\n        \"ha-automation-action-row:last-of-type\"\n      )!;\n      row.updateComplete.then(() => {\n        row.expand();\n        row.scrollIntoView();\n        row.focus();\n      });\n    }\n  }\n\n  private async _enterReOrderMode(ev: CustomEvent) {\n    if (this.nested) return;\n    ev.stopPropagation();\n    this.reOrderMode = true;\n  }\n\n  private async _exitReOrderMode() {\n    this.reOrderMode = false;\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n    this._sortable = new Sortable(this.shadowRoot!.querySelector(\".actions\")!, {\n      animation: 150,\n      fallbackClass: \"sortable-fallback\",\n      handle: \".handle\",\n      onChoose: (evt: SortableEvent) => {\n        (evt.item as any).placeholder =\n          document.createComment(\"sort-placeholder\");\n        evt.item.after((evt.item as any).placeholder);\n      },\n      onEnd: (evt: SortableEvent) => {\n        // put back in original location\n        if ((evt.item as any).placeholder) {\n          (evt.item as any).placeholder.replaceWith(evt.item);\n          delete (evt.item as any).placeholder;\n        }\n        this._dragged(evt);\n      },\n    });\n  }\n\n  private _destroySortable() {\n    this._sortable?.destroy();\n    this._sortable = undefined;\n  }\n\n  private _getKey(action: Action) {\n    if (!this._actionKeys.has(action)) {\n      this._actionKeys.set(action, Math.random().toString());\n    }\n\n    return this._actionKeys.get(action)!;\n  }\n\n  private _addAction(ev: CustomEvent<ActionDetail>) {\n    const action = (ev.currentTarget as HaSelect).items[ev.detail.index].value;\n    const elClass = customElements.get(\n      `ha-automation-action-${action}`\n    ) as CustomElementConstructor & { defaultConfig: Action };\n\n    const actions = this.actions.concat({\n      ...elClass.defaultConfig,\n    });\n    this._focusLastActionOnChange = true;\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _moveUp(ev) {\n    const index = (ev.target as any).index;\n    const newIndex = index - 1;\n    this._move(index, newIndex);\n  }\n\n  private _moveDown(ev) {\n    const index = (ev.target as any).index;\n    const newIndex = index + 1;\n    this._move(index, newIndex);\n  }\n\n  private _dragged(ev: SortableEvent): void {\n    if (ev.oldIndex === ev.newIndex) return;\n    this._move(ev.oldIndex!, ev.newIndex!);\n  }\n\n  private _move(index: number, newIndex: number) {\n    const actions = this.actions.concat();\n    const action = actions.splice(index, 1)[0];\n    actions.splice(newIndex, 0, action);\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const actions = [...this.actions];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      actions.splice(index, 1);\n    } else {\n      // Store key on new value.\n      const key = this._getKey(actions[index]);\n      this._actionKeys.set(newValue, key);\n\n      actions[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _duplicateAction(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.actions.concat(deepClone(this.actions[index])),\n    });\n  }\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string, string][] =>\n      Object.entries(ACTION_TYPES)\n        .map(\n          ([action, icon]) =>\n            [\n              action,\n              localize(\n                `ui.panel.config.automation.editor.actions.type.${action}.label`\n              ),\n              icon,\n            ] as [string, string, string]\n        )\n        .sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  static get styles(): CSSResultGroup {\n    return [\n      sortableStyles,\n      css`\n        ha-automation-action-row {\n          display: block;\n          margin-bottom: 16px;\n          scroll-margin-top: 48px;\n        }\n        ha-svg-icon {\n          height: 20px;\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n          border-radius: var(--ha-card-border-radius, 12px);\n          overflow: hidden;\n        }\n        .handle {\n          cursor: move;\n          padding: 12px;\n        }\n        .handle ha-svg-icon {\n          pointer-events: none;\n          height: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action\": HaAutomationAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport { SceneAction } from \"../../../../../data/script\";\nimport { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\nconst includeDomains = [\"scene\"];\n\n@customElement(\"ha-automation-action-activate_scene\")\nexport class HaSceneAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public action!: SceneAction;\n\n  public static get defaultConfig(): SceneAction {\n    return {\n      service: \"scene.turn_on\",\n      target: {\n        entity_id: \"\",\n      },\n      metadata: {},\n    };\n  }\n\n  protected render() {\n    let scene;\n\n    if (\"scene\" in this.action) {\n      scene = this.action.scene;\n    } else {\n      scene = this.action.target?.entity_id;\n    }\n\n    return html`\n      <ha-entity-picker\n        .hass=${this.hass}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.activate_scene.scene\"\n        )}\n        .value=${scene}\n        .disabled=${this.disabled}\n        @value-changed=${this._entityPicked}\n        .includeDomains=${includeDomains}\n        allow-custom-entity\n      ></ha-entity-picker>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        service: \"scene.turn_on\",\n        target: {\n          entity_id: ev.detail.value,\n        },\n        metadata: {},\n      },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-activate_scene\": HaSceneAction;\n  }\n}\n","import { mdiDelete, mdiPlus } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { ensureArray } from \"../../../../../common/array/ensure-array\";\nimport \"../../../../../components/ha-icon-button\";\nimport { Condition } from \"../../../../../data/automation\";\nimport { Action, ChooseAction } from \"../../../../../data/script\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-choose\")\nexport class HaChooseAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public action!: ChooseAction;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  @state() private _showDefault = false;\n\n  public static get defaultConfig() {\n    return { choose: [{ conditions: [], sequence: [] }] };\n  }\n\n  protected render() {\n    const action = this.action;\n\n    return html`\n      ${(action.choose ? ensureArray(action.choose) : []).map(\n        (option, idx) => html`<ha-card>\n          <ha-icon-button\n            .idx=${idx}\n            .disabled=${this.disabled}\n            @click=${this._removeOption}\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.type.choose.remove_option\"\n            )}\n            .path=${mdiDelete}\n          ></ha-icon-button>\n          <div class=\"card-content\">\n            <h2>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.option\",\n                \"number\",\n                idx + 1\n              )}:\n            </h2>\n            <h3>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.conditions\"\n              )}:\n            </h3>\n            <ha-automation-condition\n              nested\n              .conditions=${ensureArray<string | Condition>(option.conditions)}\n              .reOrderMode=${this.reOrderMode}\n              .disabled=${this.disabled}\n              .hass=${this.hass}\n              .idx=${idx}\n              @value-changed=${this._conditionChanged}\n            ></ha-automation-condition>\n            <h3>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.sequence\"\n              )}:\n            </h3>\n            <ha-automation-action\n              nested\n              .actions=${ensureArray(option.sequence) || []}\n              .reOrderMode=${this.reOrderMode}\n              .disabled=${this.disabled}\n              .hass=${this.hass}\n              .idx=${idx}\n              @value-changed=${this._actionChanged}\n            ></ha-automation-action>\n          </div>\n        </ha-card>`\n      )}\n      <mwc-button\n        outlined\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.choose.add_option\"\n        )}\n        .disabled=${this.disabled}\n        @click=${this._addOption}\n      >\n        <ha-svg-icon .path=${mdiPlus} slot=\"icon\"></ha-svg-icon>\n      </mwc-button>\n      ${this._showDefault || action.default\n        ? html`\n            <h2>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.default\"\n              )}:\n            </h2>\n            <ha-automation-action\n              nested\n              .actions=${ensureArray(action.default) || []}\n              .reOrderMode=${this.reOrderMode}\n              .disabled=${this.disabled}\n              @value-changed=${this._defaultChanged}\n              .hass=${this.hass}\n            ></ha-automation-action>\n          `\n        : html`<div class=\"link-button-row\">\n            <button\n              class=\"link\"\n              @click=${this._addDefault}\n              .disabled=${this.disabled}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.add_default\"\n              )}\n            </button>\n          </div>`}\n    `;\n  }\n\n  private _addDefault() {\n    this._showDefault = true;\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Condition[];\n    const index = (ev.target as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose[index].conditions = value;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    const index = (ev.target as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose[index].sequence = value;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _addOption() {\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose.push({ conditions: [], sequence: [] });\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _removeOption(ev: CustomEvent) {\n    const index = (ev.currentTarget as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose.splice(index, 1);\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _defaultChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        default: value,\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          margin: 16px 0;\n        }\n        .add-card mwc-button {\n          display: block;\n          text-align: center;\n        }\n        ha-icon-button {\n          position: absolute;\n          right: 0;\n          padding: 4px;\n        }\n        ha-svg-icon {\n          height: 20px;\n        }\n        .link-button-row {\n          padding: 14px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-choose\": HaChooseAction;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport \"../../../../../components/ha-select\";\nimport type { HaSelect } from \"../../../../../components/ha-select\";\nimport type { Condition } from \"../../../../../data/automation\";\nimport { CONDITION_TYPES } from \"../../../../../data/condition\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../condition/ha-automation-condition-editor\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-condition\")\nexport class HaConditionAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public action!: Condition;\n\n  public static get defaultConfig() {\n    return { condition: \"state\" };\n  }\n\n  protected render() {\n    return html`\n      <ha-select\n        fixedMenuPosition\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type_select\"\n        )}\n        .disabled=${this.disabled}\n        .value=${this.action.condition}\n        naturalMenuWidth\n        @selected=${this._typeChanged}\n      >\n        ${this._processedTypes(this.hass.localize).map(\n          ([opt, label, icon]) => html`\n            <mwc-list-item .value=${opt} aria-label=${label} graphic=\"icon\">\n              ${label}<ha-svg-icon slot=\"graphic\" .path=${icon}></ha-svg-icon\n            ></mwc-list-item>\n          `\n        )}\n      </ha-select>\n      <ha-automation-condition-editor\n        .condition=${this.action}\n        .disabled=${this.disabled}\n        .hass=${this.hass}\n        @value-changed=${this._conditionChanged}\n      ></ha-automation-condition-editor>\n    `;\n  }\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string, string][] =>\n      Object.entries(CONDITION_TYPES)\n        .map(\n          ([condition, icon]) =>\n            [\n              condition,\n              localize(\n                `ui.panel.config.automation.editor.conditions.type.${condition}.label`\n              ),\n              icon,\n            ] as [string, string, string]\n        )\n        .sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    fireEvent(this, \"value-changed\", {\n      value: ev.detail.value,\n    });\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = (ev.target as HaSelect).value;\n\n    if (!type) {\n      return;\n    }\n\n    const elClass = customElements.get(\n      `ha-automation-condition-${type}`\n    ) as CustomElementConstructor & {\n      defaultConfig: Omit<Condition, \"condition\">;\n    };\n\n    if (type !== this.action.condition) {\n      fireEvent(this, \"value-changed\", {\n        value: {\n          condition: type,\n          ...elClass.defaultConfig,\n        },\n      });\n    }\n  }\n\n  static get styles() {\n    return css`\n      ha-select {\n        margin-bottom: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-condition\": HaConditionAction;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport type { HaDurationData } from \"../../../../../components/ha-duration-input\";\nimport \"../../../../../components/ha-duration-input\";\nimport { DelayAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\n\n@customElement(\"ha-automation-action-delay\")\nexport class HaDelayAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public action!: DelayAction;\n\n  @state() private _timeData?: HaDurationData;\n\n  public static get defaultConfig() {\n    return { delay: \"\" };\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    // Check for templates in action. If found, revert to YAML mode.\n    if (this.action && hasTemplate(this.action)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return;\n    }\n\n    this._timeData = createDurationData(this.action.delay);\n  }\n\n  protected render() {\n    return html`<ha-duration-input\n      .label=${this.hass.localize(\n        `ui.panel.config.automation.editor.actions.type.delay.delay`\n      )}\n      .disabled=${this.disabled}\n      .data=${this._timeData}\n      enableMillisecond\n      @value-changed=${this._valueChanged}\n    ></ha-duration-input>`;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n    if (!value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, delay: value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-delay\": HaDelayAction;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-action-picker\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  DeviceAction,\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  fetchDeviceActionCapabilities,\n} from \"../../../../../data/device_automation\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-action-device_id\")\nexport class HaDeviceAction extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Object }) public action!: DeviceAction;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origAction?: DeviceAction;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (action: DeviceAction, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (action[item.name] !== undefined) {\n          extraFieldsData![item.name] = action[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.action.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        .disabled=${this.disabled}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.device_id.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-action-picker\n        .value=${this.action}\n        .deviceId=${deviceId}\n        .disabled=${this.disabled}\n        @value-changed=${this._deviceActionPicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.device_id.action\"\n        )}\n      ></ha-device-action-picker>\n      ${this._capabilities?.extra_fields?.length\n        ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this._extraFieldsData(this.action, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .disabled=${this.disabled}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.action) {\n      this._origAction = this.action;\n    }\n  }\n\n  protected updated(changedPros) {\n    const prevAction = changedPros.get(\"action\");\n    if (prevAction && !deviceAutomationsEqual(prevAction, this.action)) {\n      this._deviceId = undefined;\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    this._capabilities = this.action.domain\n      ? await fetchDeviceActionCapabilities(this.hass, this.action)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n    if (this._deviceId === undefined) {\n      fireEvent(this, \"value-changed\", {\n        value: HaDeviceAction.defaultConfig,\n      });\n    }\n  }\n\n  private _deviceActionPicked(ev) {\n    ev.stopPropagation();\n    let action = ev.detail.value;\n    if (this._origAction && deviceAutomationsEqual(this._origAction, action)) {\n      action = this._origAction;\n    }\n    fireEvent(this, \"value-changed\", { value: action });\n  }\n\n  private _extraFieldsChanged(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.actions.type.device_id.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n\n  static styles = css`\n    ha-device-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n\n    ha-device-action-picker {\n      display: block;\n    }\n\n    ha-form {\n      margin-top: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-device_id\": HaDeviceAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport \"../../../../../components/ha-service-picker\";\nimport \"../../../../../components/ha-textfield\";\nimport \"../../../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../../../components/ha-yaml-editor\";\nimport type { EventAction } from \"../../../../../data/script\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement, handleChangeEvent } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-event\")\nexport class HaEventAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public action!: EventAction;\n\n  @query(\"ha-yaml-editor\", true) private _yamlEditor?: HaYamlEditor;\n\n  private _actionData?: EventAction[\"event_data\"];\n\n  public static get defaultConfig(): EventAction {\n    return { event: \"\", event_data: {} };\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    if (this._actionData && this._actionData !== this.action.event_data) {\n      if (this._yamlEditor) {\n        this._yamlEditor.setValue(this.action.event_data);\n      }\n    }\n    this._actionData = this.action.event_data;\n  }\n\n  protected render() {\n    const { event, event_data } = this.action;\n\n    return html`\n      <ha-textfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.event.event\"\n        )}\n        .value=${event}\n        .disabled=${this.disabled}\n        @change=${this._eventChanged}\n      ></ha-textfield>\n      <ha-yaml-editor\n        .hass=${this.hass}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.event.event_data\"\n        )}\n        .name=${\"event_data\"}\n        .readOnly=${this.disabled}\n        .defaultValue=${event_data}\n        @value-changed=${this._dataChanged}\n      ></ha-yaml-editor>\n    `;\n  }\n\n  private _dataChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._actionData = ev.detail.value;\n    handleChangeEvent(this, ev);\n  }\n\n  private _eventChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, event: (ev.target as any).value },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-textfield {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-event\": HaEventAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { Action, IfAction } from \"../../../../../data/script\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { Condition } from \"../../../../lovelace/common/validate-condition\";\nimport \"../ha-automation-action\";\nimport \"../../../../../components/ha-textfield\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-if\")\nexport class HaIfAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public action!: IfAction;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  @state() private _showElse = false;\n\n  public static get defaultConfig() {\n    return {\n      if: [],\n      then: [],\n    };\n  }\n\n  protected render() {\n    const action = this.action;\n\n    return html`\n      <h3>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.if.if\"\n        )}*:\n      </h3>\n      <ha-automation-condition\n        nested\n        .conditions=${action.if}\n        .reOrderMode=${this.reOrderMode}\n        .disabled=${this.disabled}\n        @value-changed=${this._ifChanged}\n        .hass=${this.hass}\n      ></ha-automation-condition>\n\n      <h3>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.if.then\"\n        )}*:\n      </h3>\n      <ha-automation-action\n        nested\n        .actions=${action.then}\n        .reOrderMode=${this.reOrderMode}\n        .disabled=${this.disabled}\n        @value-changed=${this._thenChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n      ${this._showElse || action.else\n        ? html`\n            <h3>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.if.else\"\n              )}:\n            </h3>\n            <ha-automation-action\n              nested\n              .actions=${action.else || []}\n              .reOrderMode=${this.reOrderMode}\n              .disabled=${this.disabled}\n              @value-changed=${this._elseChanged}\n              .hass=${this.hass}\n            ></ha-automation-action>\n          `\n        : html` <div class=\"link-button-row\">\n            <button\n              class=\"link\"\n              @click=${this._addElse}\n              .disabled=${this.disabled}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.if.add_else\"\n              )}\n            </button>\n          </div>`}\n    `;\n  }\n\n  private _addElse() {\n    this._showElse = true;\n  }\n\n  private _ifChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Condition[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        if: value,\n      },\n    });\n  }\n\n  private _thenChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        then: value,\n      },\n    });\n  }\n\n  private _elseChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        else: value,\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .link-button-row {\n          padding: 14px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-if\": HaIfAction;\n  }\n}\n","import { CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { Action, ParallelAction } from \"../../../../../data/script\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport \"../ha-automation-action\";\nimport \"../../../../../components/ha-textfield\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-parallel\")\nexport class HaParallelAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public action!: ParallelAction;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  public static get defaultConfig() {\n    return {\n      parallel: [],\n    };\n  }\n\n  protected render() {\n    const action = this.action;\n\n    return html`\n      <ha-automation-action\n        nested\n        .actions=${action.parallel}\n        .reOrderMode=${this.reOrderMode}\n        .disabled=${this.disabled}\n        @value-changed=${this._actionsChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _actionsChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        parallel: value,\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-parallel\": HaParallelAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-selector/ha-selector-media\";\nimport { PlayMediaAction } from \"../../../../../data/script\";\nimport type { MediaSelectorValue } from \"../../../../../data/selector\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-play_media\")\nexport class HaPlayMediaAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public action!: PlayMediaAction;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  public static get defaultConfig(): PlayMediaAction {\n    return {\n      service: \"media_player.play_media\",\n      target: { entity_id: \"\" },\n      data: { media_content_id: \"\", media_content_type: \"\" },\n      metadata: {},\n    };\n  }\n\n  private _getSelectorValue = memoizeOne(\n    (action: PlayMediaAction): MediaSelectorValue => ({\n      entity_id: action.target?.entity_id || action.entity_id,\n      media_content_id: action.data?.media_content_id,\n      media_content_type: action.data?.media_content_type,\n      metadata: action.metadata,\n    })\n  );\n\n  protected render() {\n    return html`\n      <ha-selector-media\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .value=${this._getSelectorValue(this.action)}\n        @value-changed=${this._valueChanged}\n      ></ha-selector-media>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent<{ value: MediaSelectorValue }>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        service: \"media_player.play_media\",\n        target: { entity_id: ev.detail.value.entity_id },\n        data: {\n          media_content_id: ev.detail.value.media_content_id,\n          media_content_type: ev.detail.value.media_content_type,\n        },\n        metadata: ev.detail.value.metadata || {},\n      } as PlayMediaAction,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-play_media\": HaPlayMediaAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport {\n  Action,\n  CountRepeat,\n  RepeatAction,\n  UntilRepeat,\n  WhileRepeat,\n} from \"../../../../../data/script\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { Condition } from \"../../../../lovelace/common/validate-condition\";\nimport \"../ha-automation-action\";\nimport \"../../../../../components/ha-textfield\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\n\nconst OPTIONS = [\"count\", \"while\", \"until\"] as const;\n\nconst getType = (action) => OPTIONS.find((option) => option in action);\n\n@customElement(\"ha-automation-action-repeat\")\nexport class HaRepeatAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public action!: RepeatAction;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  public static get defaultConfig() {\n    return { repeat: { count: 2, sequence: [] } };\n  }\n\n  protected render() {\n    const action = this.action.repeat;\n\n    const type = getType(action);\n\n    return html`\n      <ha-select\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.repeat.type_select\"\n        )}\n        .value=${type}\n        .disabled=${this.disabled}\n        @selected=${this._typeChanged}\n      >\n        ${OPTIONS.map(\n          (opt) => html`\n            <mwc-list-item .value=${opt}>\n              ${this.hass.localize(\n                `ui.panel.config.automation.editor.actions.type.repeat.type.${opt}.label`\n              )}\n            </mwc-list-item>\n          `\n        )}\n      </ha-select>\n      <div>\n        ${type === \"count\"\n          ? html`\n              <ha-textfield\n                .label=${this.hass.localize(\n                  \"ui.panel.config.automation.editor.actions.type.repeat.type.count.label\"\n                )}\n                name=\"count\"\n                .value=${(action as CountRepeat).count || \"0\"}\n                .disabled=${this.disabled}\n                @change=${this._countChanged}\n              ></ha-textfield>\n            `\n          : type === \"while\"\n          ? html` <h3>\n                ${this.hass.localize(\n                  `ui.panel.config.automation.editor.actions.type.repeat.type.while.conditions`\n                )}:\n              </h3>\n              <ha-automation-condition\n                nested\n                .conditions=${(action as WhileRepeat).while || []}\n                .hass=${this.hass}\n                .disabled=${this.disabled}\n                @value-changed=${this._conditionChanged}\n              ></ha-automation-condition>`\n          : type === \"until\"\n          ? html` <h3>\n                ${this.hass.localize(\n                  `ui.panel.config.automation.editor.actions.type.repeat.type.until.conditions`\n                )}:\n              </h3>\n              <ha-automation-condition\n                nested\n                .conditions=${(action as UntilRepeat).until || []}\n                .hass=${this.hass}\n                .disabled=${this.disabled}\n                @value-changed=${this._conditionChanged}\n              ></ha-automation-condition>`\n          : \"\"}\n      </div>\n      <h3>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.repeat.sequence\"\n        )}:\n      </h3>\n      <ha-automation-action\n        nested\n        .actions=${action.sequence}\n        .reOrderMode=${this.reOrderMode}\n        .disabled=${this.disabled}\n        @value-changed=${this._actionChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _typeChanged(ev) {\n    const type = ev.target.value;\n\n    if (!type || type === getType(this.action.repeat)) {\n      return;\n    }\n\n    const value = type === \"count\" ? 2 : [];\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        repeat: { [type]: value, sequence: this.action.repeat.sequence },\n      },\n    });\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Condition[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        repeat: {\n          ...this.action.repeat,\n          [getType(this.action.repeat)!]: value,\n        },\n      },\n    });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        repeat: {\n          ...this.action.repeat,\n          sequence: value,\n        },\n      },\n    });\n  }\n\n  private _countChanged(ev: CustomEvent): void {\n    const newVal = (ev.target as any).value;\n    if ((this.action.repeat as CountRepeat).count === newVal) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        repeat: {\n          ...this.action.repeat,\n          count: newVal,\n        },\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-textfield {\n          margin-top: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-repeat\": HaRepeatAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert } from \"superstruct\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport \"../../../../../components/ha-service-control\";\nimport { ServiceAction, serviceActionStruct } from \"../../../../../data/script\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-service\")\nexport class HaServiceAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: ServiceAction;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _action!: ServiceAction;\n\n  public static get defaultConfig() {\n    return { service: \"\", data: {} };\n  }\n\n  protected willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    try {\n      assert(this.action, serviceActionStruct);\n    } catch (err: any) {\n      fireEvent(this, \"ui-mode-not-available\", err);\n      return;\n    }\n    if (this.action && hasTemplate(this.action)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return;\n    }\n    if (this.action.entity_id) {\n      this._action = {\n        ...this.action,\n        data: { ...this.action.data, entity_id: this.action.entity_id },\n      };\n      delete this._action.entity_id;\n    } else {\n      this._action = this.action;\n    }\n  }\n\n  protected render() {\n    return html`\n      <ha-service-control\n        .narrow=${this.narrow}\n        .hass=${this.hass}\n        .value=${this._action}\n        .disabled=${this.disabled}\n        .showAdvanced=${this.hass.userData?.showAdvanced}\n        @value-changed=${this._actionChanged}\n      ></ha-service-control>\n    `;\n  }\n\n  private _actionChanged(ev) {\n    if (ev.detail.value === this._action) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-service-control {\n        display: block;\n        margin: 0 -16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-service\": HaServiceAction;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-textfield\";\nimport { StopAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-stop\")\nexport class HaStopAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: StopAction;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { stop: \"\" };\n  }\n\n  protected render() {\n    const { error, stop } = this.action;\n\n    return html`\n      <ha-textfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.stop.stop\"\n        )}\n        .value=${stop}\n        .disabled=${this.disabled}\n        @change=${this._stopChanged}\n      ></ha-textfield>\n      <ha-formfield\n        .disabled=${this.disabled}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.stop.error\"\n        )}\n      >\n        <ha-switch\n          .disabled=${this.disabled}\n          .checked=${error ?? false}\n          @change=${this._errorChanged}\n        ></ha-switch>\n      </ha-formfield>\n    `;\n  }\n\n  private _stopChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, stop: (ev.target as any).value },\n    });\n  }\n\n  private _errorChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, error: (ev.target as any).checked },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-textfield {\n        display: block;\n        margin-bottom: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-stop\": HaStopAction;\n  }\n}\n","import \"../../../../../components/ha-textfield\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-formfield\";\nimport { WaitForTriggerAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../trigger/ha-automation-trigger\";\nimport { ActionElement, handleChangeEvent } from \"../ha-automation-action-row\";\nimport \"../../../../../components/ha-duration-input\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { TimeChangedEvent } from \"../../../../../components/ha-base-time-input\";\nimport { ensureArray } from \"../../../../../common/array/ensure-array\";\n\n@customElement(\"ha-automation-action-wait_for_trigger\")\nexport class HaWaitForTriggerAction\n  extends LitElement\n  implements ActionElement\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: WaitForTriggerAction;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  public static get defaultConfig() {\n    return { wait_for_trigger: [] };\n  }\n\n  protected render() {\n    const timeData = createDurationData(this.action.timeout);\n\n    return html`\n      <ha-duration-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_for_trigger.timeout\"\n        )}\n        .data=${timeData}\n        .disabled=${this.disabled}\n        enableMillisecond\n        @value-changed=${this._timeoutChanged}\n      ></ha-duration-input>\n      <ha-formfield\n        .disabled=${this.disabled}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_for_trigger.continue_timeout\"\n        )}\n      >\n        <ha-switch\n          .checked=${this.action.continue_on_timeout ?? true}\n          .disabled=${this.disabled}\n          @change=${this._continueChanged}\n        ></ha-switch>\n      </ha-formfield>\n      <ha-automation-trigger\n        nested\n        .triggers=${ensureArray(this.action.wait_for_trigger)}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .name=${\"wait_for_trigger\"}\n        .reOrderMode=${this.reOrderMode}\n        @value-changed=${this._valueChanged}\n      ></ha-automation-trigger>\n    `;\n  }\n\n  private _timeoutChanged(ev: CustomEvent<{ value: TimeChangedEvent }>): void {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n    if (!value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, timeout: value },\n    });\n  }\n\n  private _continueChanged(ev) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, continue_on_timeout: ev.target.checked },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-duration-input {\n        display: block;\n        margin-bottom: 24px;\n      }\n      ha-automation-trigger {\n        display: block;\n        margin-top: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-wait_for_trigger\": HaWaitForTriggerAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { WaitAction } from \"../../../../../data/script\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\n\nconst SCHEMA = [\n  {\n    name: \"wait_template\",\n    selector: {\n      template: {},\n    },\n  },\n  {\n    name: \"timeout\",\n    required: false,\n    selector: {\n      text: {},\n    },\n  },\n  {\n    name: \"continue_on_timeout\",\n    selector: { boolean: {} },\n  },\n] as const;\n\n@customElement(\"ha-automation-action-wait_template\")\nexport class HaWaitAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: WaitAction;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { wait_template: \"\", continue_on_timeout: true };\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this.action}\n        .schema=${SCHEMA}\n        .disabled=${this.disabled}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<typeof SCHEMA>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.actions.type.wait_template.${\n        schema.name === \"continue_on_timeout\" ? \"continue_timeout\" : schema.name\n      }`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-wait_template\": HaWaitAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-yaml-editor\";\nimport type { Condition } from \"../../../../data/automation\";\nimport { expandConditionWithShorthand } from \"../../../../data/automation\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./types/ha-automation-condition-and\";\nimport \"./types/ha-automation-condition-device\";\nimport \"./types/ha-automation-condition-not\";\nimport \"./types/ha-automation-condition-numeric_state\";\nimport \"./types/ha-automation-condition-or\";\nimport \"./types/ha-automation-condition-state\";\nimport \"./types/ha-automation-condition-sun\";\nimport \"./types/ha-automation-condition-template\";\nimport \"./types/ha-automation-condition-time\";\nimport \"./types/ha-automation-condition-trigger\";\nimport \"./types/ha-automation-condition-zone\";\n\n@customElement(\"ha-automation-condition-editor\")\nexport default class HaAutomationConditionEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) condition!: Condition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public yamlMode = false;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  private _processedCondition = memoizeOne((condition) =>\n    expandConditionWithShorthand(condition)\n  );\n\n  protected render() {\n    const condition = this._processedCondition(this.condition);\n    const supported =\n      customElements.get(`ha-automation-condition-${condition.condition}`) !==\n      undefined;\n    const yamlMode = this.yamlMode || !supported;\n    return html`\n      ${yamlMode\n        ? html`\n            ${!supported\n              ? html`\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.conditions.unsupported_condition\",\n                    \"condition\",\n                    condition.condition\n                  )}\n                `\n              : \"\"}\n            <ha-yaml-editor\n              .hass=${this.hass}\n              .defaultValue=${this.condition}\n              @value-changed=${this._onYamlChange}\n              .readOnly=${this.disabled}\n            ></ha-yaml-editor>\n          `\n        : html`\n            <div>\n              ${dynamicElement(\n                `ha-automation-condition-${condition.condition}`,\n                {\n                  hass: this.hass,\n                  condition: condition,\n                  reOrderMode: this.reOrderMode,\n                  disabled: this.disabled,\n                }\n              )}\n            </div>\n          `}\n    `;\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    // @ts-ignore\n    fireEvent(this, \"value-changed\", { value: ev.detail.value, yaml: true });\n  }\n\n  static styles = haStyle;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-editor\": HaAutomationConditionEditor;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheck,\n  mdiContentDuplicate,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiFlask,\n  mdiPlayCircleOutline,\n  mdiRenameBox,\n  mdiSort,\n  mdiStopCircleOutline,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { capitalizeFirstLetter } from \"../../../../common/string/capitalize-first-letter\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-expansion-panel\";\nimport \"../../../../components/ha-icon-button\";\nimport { Condition, testCondition } from \"../../../../data/automation\";\nimport { describeCondition } from \"../../../../data/automation_i18n\";\nimport { CONDITION_TYPES } from \"../../../../data/condition\";\nimport { validateConfig } from \"../../../../data/config\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n  showPromptDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-condition-editor\";\n\nexport interface ConditionElement extends LitElement {\n  condition: Condition;\n}\n\nconst preventDefault = (ev) => ev.preventDefault();\n\nexport const handleChangeEvent = (\n  element: ConditionElement,\n  ev: CustomEvent\n) => {\n  ev.stopPropagation();\n  const name = (ev.currentTarget as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = ev.detail?.value || (ev.currentTarget as any)?.value;\n\n  if ((element.condition[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newCondition: Condition;\n  if (!newVal) {\n    newCondition = { ...element.condition };\n    delete newCondition[name];\n  } else {\n    newCondition = { ...element.condition, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newCondition });\n};\n\n@customElement(\"ha-automation-condition-row\")\nexport default class HaAutomationConditionRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: Condition;\n\n  @property({ type: Boolean }) public hideMenu = false;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _yamlMode = false;\n\n  @state() private _warnings?: string[];\n\n  @state() private _testing = false;\n\n  @state() private _testingResult?: boolean;\n\n  protected render() {\n    if (!this.condition) {\n      return html``;\n    }\n    return html`\n      <ha-card outlined>\n        ${this.condition.enabled === false\n          ? html`<div class=\"disabled-bar\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.disabled\"\n              )}\n            </div>`\n          : \"\"}\n\n        <ha-expansion-panel leftChevron>\n          <h3 slot=\"header\">\n            <ha-svg-icon\n              class=\"condition-icon\"\n              .path=${CONDITION_TYPES[this.condition.condition]}\n            ></ha-svg-icon>\n            ${capitalizeFirstLetter(\n              describeCondition(this.condition, this.hass)\n            )}\n          </h3>\n\n          <slot name=\"icons\" slot=\"icons\"></slot>\n          ${this.hideMenu\n            ? \"\"\n            : html`\n                <ha-button-menu\n                  slot=\"icons\"\n                  fixed\n                  corner=\"BOTTOM_START\"\n                  @action=${this._handleAction}\n                  @click=${preventDefault}\n                >\n                  <ha-icon-button\n                    slot=\"trigger\"\n                    .label=${this.hass.localize(\"ui.common.menu\")}\n                    .path=${mdiDotsVertical}\n                  >\n                  </ha-icon-button>\n\n                  <mwc-list-item graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.conditions.test\"\n                    )}\n                    <ha-svg-icon slot=\"graphic\" .path=${mdiFlask}></ha-svg-icon>\n                  </mwc-list-item>\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.conditions.rename\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiRenameBox}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.conditions.re_order\"\n                    )}\n                    <ha-svg-icon slot=\"graphic\" .path=${mdiSort}></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.actions.duplicate\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiContentDuplicate}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <li divider role=\"separator\"></li>\n\n                  <mwc-list-item graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_ui\"\n                    )}\n                    ${!this._yamlMode\n                      ? html`<ha-svg-icon\n                          class=\"selected_menu_item\"\n                          slot=\"graphic\"\n                          .path=${mdiCheck}\n                        ></ha-svg-icon>`\n                      : ``}\n                  </mwc-list-item>\n\n                  <mwc-list-item graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_yaml\"\n                    )}\n                    ${this._yamlMode\n                      ? html`<ha-svg-icon\n                          class=\"selected_menu_item\"\n                          slot=\"graphic\"\n                          .path=${mdiCheck}\n                        ></ha-svg-icon>`\n                      : ``}\n                  </mwc-list-item>\n\n                  <li divider role=\"separator\"></li>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.condition.enabled === false\n                      ? this.hass.localize(\n                          \"ui.panel.config.automation.editor.actions.enable\"\n                        )\n                      : this.hass.localize(\n                          \"ui.panel.config.automation.editor.actions.disable\"\n                        )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${this.condition.enabled === false\n                        ? mdiPlayCircleOutline\n                        : mdiStopCircleOutline}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                  <mwc-list-item\n                    class=\"warning\"\n                    graphic=\"icon\"\n                    .disabled=${this.disabled}\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.actions.delete\"\n                    )}\n                    <ha-svg-icon\n                      class=\"warning\"\n                      slot=\"graphic\"\n                      .path=${mdiDelete}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                </ha-button-menu>\n              `}\n\n          <div\n            class=${classMap({\n              \"card-content\": true,\n              disabled: this.condition.enabled === false,\n            })}\n          >\n            ${this._warnings\n              ? html`<ha-alert\n                  alert-type=\"warning\"\n                  .title=${this.hass.localize(\n                    \"ui.errors.config.editor_not_supported\"\n                  )}\n                >\n                  ${this._warnings!.length > 0 &&\n                  this._warnings![0] !== undefined\n                    ? html` <ul>\n                        ${this._warnings!.map(\n                          (warning) => html`<li>${warning}</li>`\n                        )}\n                      </ul>`\n                    : \"\"}\n                  ${this.hass.localize(\n                    \"ui.errors.config.edit_in_yaml_supported\"\n                  )}\n                </ha-alert>`\n              : \"\"}\n            <ha-automation-condition-editor\n              @ui-mode-not-available=${this._handleUiModeNotAvailable}\n              @value-changed=${this._handleChangeEvent}\n              .yamlMode=${this._yamlMode}\n              .disabled=${this.disabled}\n              .hass=${this.hass}\n              .condition=${this.condition}\n              .reOrderMode=${this.reOrderMode}\n            ></ha-automation-condition-editor>\n          </div>\n        </ha-expansion-panel>\n        <div\n          class=\"testing ${classMap({\n            active: this._testing,\n            pass: this._testingResult === true,\n            error: this._testingResult === false,\n          })}\"\n        >\n          ${this._testingResult\n            ? this.hass.localize(\n                \"ui.panel.config.automation.editor.conditions.testing_pass\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.automation.editor.conditions.testing_error\"\n              )}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    // Prevent possible parent action-row from switching to yamlMode\n    ev.stopPropagation();\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private _handleChangeEvent(ev: CustomEvent) {\n    if (ev.detail.yaml) {\n      this._warnings = undefined;\n    }\n  }\n\n  private async _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        await this._testCondition();\n        break;\n      case 1:\n        await this._renameCondition();\n        break;\n      case 2:\n        fireEvent(this, \"re-order\");\n        break;\n      case 3:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 4:\n        this._switchUiMode();\n        this.expand();\n        break;\n      case 5:\n        this._switchYamlMode();\n        this.expand();\n        break;\n      case 6:\n        this._onDisable();\n        break;\n      case 7:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDisable() {\n    const enabled = !(this.condition.enabled ?? true);\n    const value = { ...this.condition, enabled };\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.delete_confirm_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.delete_confirm_text\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      destructive: true,\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _switchUiMode() {\n    this._warnings = undefined;\n    this._yamlMode = false;\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = true;\n  }\n\n  private async _testCondition() {\n    if (this._testing) {\n      return;\n    }\n    this._testingResult = undefined;\n    this._testing = true;\n    const condition = this.condition;\n\n    try {\n      const validateResult = await validateConfig(this.hass, {\n        condition,\n      });\n\n      // Abort if condition changed.\n      if (this.condition !== condition) {\n        this._testing = false;\n        return;\n      }\n\n      if (!validateResult.condition.valid) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.invalid_condition\"\n          ),\n          text: validateResult.condition.error,\n        });\n        this._testing = false;\n        return;\n      }\n\n      let result: { result: boolean };\n      try {\n        result = await testCondition(this.hass, condition);\n      } catch (err: any) {\n        if (this.condition !== condition) {\n          this._testing = false;\n          return;\n        }\n\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.test_failed\"\n          ),\n          text: err.message,\n        });\n        this._testing = false;\n        return;\n      }\n\n      this._testingResult = result.result;\n    } finally {\n      setTimeout(() => {\n        this._testing = false;\n      }, 2500);\n    }\n  }\n\n  private async _renameCondition(): Promise<void> {\n    const alias = await showPromptDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.change_alias\"\n      ),\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.alias\"\n      ),\n      inputType: \"string\",\n      placeholder: capitalizeFirstLetter(\n        describeCondition(this.condition, this.hass, true)\n      ),\n      defaultValue: this.condition.alias,\n      confirmText: this.hass.localize(\"ui.common.submit\"),\n    });\n\n    const value = { ...this.condition };\n    if (!alias) {\n      delete value.alias;\n    } else {\n      value.alias = alias;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  public expand() {\n    this.updateComplete.then(() => {\n      this.shadowRoot!.querySelector(\"ha-expansion-panel\")!.expanded = true;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-button-menu {\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        }\n        .disabled {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n        ha-expansion-panel {\n          --expansion-panel-summary-padding: 0 0 0 8px;\n          --expansion-panel-content-padding: 0;\n        }\n        h3 {\n          margin: 0;\n          font-size: inherit;\n          font-weight: inherit;\n        }\n        .condition-icon {\n          display: none;\n        }\n        @media (min-width: 870px) {\n          .condition-icon {\n            display: inline-block;\n            color: var(--secondary-text-color);\n            opacity: 0.9;\n            margin-right: 8px;\n          }\n        }\n        .card-content {\n          padding: 16px;\n        }\n        .disabled-bar {\n          background: var(--divider-color, #e0e0e0);\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius);\n          border-top-left-radius: var(--ha-card-border-radius);\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n        .testing {\n          position: absolute;\n          top: 0px;\n          right: 0px;\n          left: 0px;\n          text-transform: uppercase;\n          font-weight: bold;\n          font-size: 14px;\n          background-color: var(--divider-color, #e0e0e0);\n          color: var(--text-primary-color);\n          max-height: 0px;\n          overflow: hidden;\n          transition: max-height 0.3s;\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius, 12px);\n          border-top-left-radius: var(--ha-card-border-radius, 12px);\n        }\n        .testing.active {\n          max-height: 100px;\n        }\n        .testing.error {\n          background-color: var(--accent-color);\n        }\n        .testing.pass {\n          background-color: var(--success-color);\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-row\": HaAutomationConditionRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport type { ActionDetail } from \"@material/mwc-list\";\nimport { mdiArrowDown, mdiArrowUp, mdiDrag, mdiPlus } from \"@mdi/js\";\nimport deepClone from \"deep-clone-simple\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport memoizeOne from \"memoize-one\";\nimport type { SortableEvent } from \"sortablejs\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-svg-icon\";\nimport type { Condition } from \"../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-condition-row\";\nimport type HaAutomationConditionRow from \"./ha-automation-condition-row\";\n// Uncommenting these and this element doesn't load\n// import \"./types/ha-automation-condition-not\";\n// import \"./types/ha-automation-condition-or\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport type { HaSelect } from \"../../../../components/ha-select\";\nimport { CONDITION_TYPES } from \"../../../../data/condition\";\nimport {\n  loadSortable,\n  SortableInstance,\n} from \"../../../../resources/sortable.ondemand\";\nimport \"./types/ha-automation-condition-and\";\nimport \"./types/ha-automation-condition-device\";\nimport \"./types/ha-automation-condition-numeric_state\";\nimport \"./types/ha-automation-condition-state\";\nimport \"./types/ha-automation-condition-sun\";\nimport \"./types/ha-automation-condition-template\";\nimport \"./types/ha-automation-condition-time\";\nimport \"./types/ha-automation-condition-trigger\";\nimport \"./types/ha-automation-condition-zone\";\nimport { sortableStyles } from \"../../../../resources/ha-sortable-style\";\n\n@customElement(\"ha-automation-condition\")\nexport default class HaAutomationCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public conditions!: Condition[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public nested = false;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  private _focusLastConditionOnChange = false;\n\n  private _conditionKeys = new WeakMap<Condition, string>();\n\n  private _sortable?: SortableInstance;\n\n  protected updated(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"reOrderMode\")) {\n      if (this.reOrderMode) {\n        this._createSortable();\n      } else {\n        this._destroySortable();\n      }\n    }\n\n    if (!changedProperties.has(\"conditions\")) {\n      return;\n    }\n\n    let updatedConditions: Condition[] | undefined;\n    if (!Array.isArray(this.conditions)) {\n      updatedConditions = [this.conditions];\n    }\n\n    (updatedConditions || this.conditions).forEach((condition, index) => {\n      if (typeof condition === \"string\") {\n        updatedConditions = updatedConditions || [...this.conditions];\n        updatedConditions[index] = {\n          condition: \"template\",\n          value_template: condition,\n        };\n      }\n    });\n\n    if (updatedConditions) {\n      fireEvent(this, \"value-changed\", {\n        value: updatedConditions,\n      });\n    } else if (this._focusLastConditionOnChange) {\n      this._focusLastConditionOnChange = false;\n      const row = this.shadowRoot!.querySelector<HaAutomationConditionRow>(\n        \"ha-automation-condition-row:last-of-type\"\n      )!;\n      row.updateComplete.then(() => {\n        row.expand();\n        row.scrollIntoView();\n        row.focus();\n      });\n    }\n  }\n\n  protected render() {\n    if (!Array.isArray(this.conditions)) {\n      return html``;\n    }\n    return html`\n      ${this.reOrderMode && !this.nested\n        ? html`\n            <ha-alert\n              alert-type=\"info\"\n              .title=${this.hass.localize(\n                \"ui.panel.config.automation.editor.re_order_mode.title\"\n              )}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.re_order_mode.description_conditions\"\n              )}\n              <mwc-button slot=\"action\" @click=${this._exitReOrderMode}>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.re_order_mode.exit\"\n                )}\n              </mwc-button>\n            </ha-alert>\n          `\n        : null}\n      <div class=\"conditions\">\n        ${repeat(\n          this.conditions,\n          (condition) => this._getKey(condition),\n          (cond, idx) => html`\n            <ha-automation-condition-row\n              .index=${idx}\n              .totalConditions=${this.conditions.length}\n              .condition=${cond}\n              .hideMenu=${this.reOrderMode}\n              .reOrderMode=${this.reOrderMode}\n              .disabled=${this.disabled}\n              @duplicate=${this._duplicateCondition}\n              @move-condition=${this._move}\n              @value-changed=${this._conditionChanged}\n              @re-order=${this._enterReOrderMode}\n              .hass=${this.hass}\n            >\n              ${this.reOrderMode\n                ? html`\n                    <ha-icon-button\n                      .index=${idx}\n                      slot=\"icons\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.automation.editor.move_up\"\n                      )}\n                      .path=${mdiArrowUp}\n                      @click=${this._moveUp}\n                      .disabled=${idx === 0}\n                    ></ha-icon-button>\n                    <ha-icon-button\n                      .index=${idx}\n                      slot=\"icons\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.automation.editor.move_down\"\n                      )}\n                      .path=${mdiArrowDown}\n                      @click=${this._moveDown}\n                      .disabled=${idx === this.conditions.length - 1}\n                    ></ha-icon-button>\n                    <div class=\"handle\" slot=\"icons\">\n                      <ha-svg-icon .path=${mdiDrag}></ha-svg-icon>\n                    </div>\n                  `\n                : \"\"}\n            </ha-automation-condition-row>\n          `\n        )}\n      </div>\n      <ha-button-menu\n        fixed\n        @action=${this._addCondition}\n        .disabled=${this.disabled}\n      >\n        <mwc-button\n          slot=\"trigger\"\n          outlined\n          .disabled=${this.disabled}\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.add\"\n          )}\n        >\n          <ha-svg-icon .path=${mdiPlus} slot=\"icon\"></ha-svg-icon>\n        </mwc-button>\n        ${this._processedTypes(this.hass.localize).map(\n          ([opt, label, icon]) => html`\n            <mwc-list-item .value=${opt} aria-label=${label} graphic=\"icon\">\n              ${label}<ha-svg-icon slot=\"graphic\" .path=${icon}></ha-svg-icon\n            ></mwc-list-item>\n          `\n        )}\n      </ha-button-menu>\n    `;\n  }\n\n  private async _enterReOrderMode(ev: CustomEvent) {\n    if (this.nested) return;\n    ev.stopPropagation();\n    this.reOrderMode = true;\n  }\n\n  private async _exitReOrderMode() {\n    this.reOrderMode = false;\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n    this._sortable = new Sortable(\n      this.shadowRoot!.querySelector(\".conditions\")!,\n      {\n        animation: 150,\n        fallbackClass: \"sortable-fallback\",\n        handle: \".handle\",\n        onChoose: (evt: SortableEvent) => {\n          (evt.item as any).placeholder =\n            document.createComment(\"sort-placeholder\");\n          evt.item.after((evt.item as any).placeholder);\n        },\n        onEnd: (evt: SortableEvent) => {\n          // put back in original location\n          if ((evt.item as any).placeholder) {\n            (evt.item as any).placeholder.replaceWith(evt.item);\n            delete (evt.item as any).placeholder;\n          }\n          this._dragged(evt);\n        },\n      }\n    );\n  }\n\n  private _destroySortable() {\n    this._sortable?.destroy();\n    this._sortable = undefined;\n  }\n\n  private _getKey(condition: Condition) {\n    if (!this._conditionKeys.has(condition)) {\n      this._conditionKeys.set(condition, Math.random().toString());\n    }\n\n    return this._conditionKeys.get(condition)!;\n  }\n\n  private _addCondition(ev: CustomEvent<ActionDetail>) {\n    const condition = (ev.currentTarget as HaSelect).items[ev.detail.index]\n      .value as Condition[\"condition\"];\n\n    const elClass = customElements.get(\n      `ha-automation-condition-${condition}`\n    ) as CustomElementConstructor & {\n      defaultConfig: Omit<Condition, \"condition\">;\n    };\n\n    const conditions = this.conditions.concat({\n      condition: condition as any,\n      ...elClass.defaultConfig,\n    });\n    this._focusLastConditionOnChange = true;\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  private _moveUp(ev) {\n    const index = (ev.target as any).index;\n    const newIndex = index - 1;\n    this._move(index, newIndex);\n  }\n\n  private _moveDown(ev) {\n    const index = (ev.target as any).index;\n    const newIndex = index + 1;\n    this._move(index, newIndex);\n  }\n\n  private _dragged(ev: SortableEvent): void {\n    if (ev.oldIndex === ev.newIndex) return;\n    this._move(ev.oldIndex!, ev.newIndex!);\n  }\n\n  private _move(index: number, newIndex: number) {\n    const conditions = this.conditions.concat();\n    const condition = conditions.splice(index, 1)[0];\n    conditions.splice(newIndex, 0, condition);\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const conditions = [...this.conditions];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      conditions.splice(index, 1);\n    } else {\n      // Store key on new value.\n      const key = this._getKey(conditions[index]);\n      this._conditionKeys.set(newValue, key);\n\n      conditions[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  private _duplicateCondition(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.conditions.concat(deepClone(this.conditions[index])),\n    });\n  }\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string, string][] =>\n      Object.entries(CONDITION_TYPES)\n        .map(\n          ([condition, icon]) =>\n            [\n              condition,\n              localize(\n                `ui.panel.config.automation.editor.conditions.type.${condition}.label`\n              ),\n              icon,\n            ] as [string, string, string]\n        )\n        .sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  static get styles(): CSSResultGroup {\n    return [\n      sortableStyles,\n      css`\n        ha-automation-condition-row {\n          display: block;\n          margin-bottom: 16px;\n          scroll-margin-top: 48px;\n        }\n        ha-svg-icon {\n          height: 20px;\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n          border-radius: var(--ha-card-border-radius, 12px);\n          overflow: hidden;\n        }\n        .handle {\n          cursor: move;\n          padding: 12px;\n        }\n        .handle ha-svg-icon {\n          pointer-events: none;\n          height: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition\": HaAutomationCondition;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-condition-picker\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  DeviceCondition,\n  fetchDeviceConditionCapabilities,\n} from \"../../../../../data/device_automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-device\")\nexport class HaDeviceCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public condition!: DeviceCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origCondition?: DeviceCondition;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (condition: DeviceCondition, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (condition[item.name] !== undefined) {\n          extraFieldsData![item.name] = condition[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.condition.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.device.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-condition-picker\n        .value=${this.condition}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceConditionPicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.device.condition\"\n        )}\n      ></ha-device-condition-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this._extraFieldsData(this.condition, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .disabled=${this.disabled}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.condition) {\n      this._origCondition = this.condition;\n    }\n  }\n\n  protected updated(changedPros) {\n    const prevCondition = changedPros.get(\"condition\");\n    if (\n      prevCondition &&\n      !deviceAutomationsEqual(prevCondition, this.condition)\n    ) {\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    const condition = this.condition;\n\n    this._capabilities = condition.domain\n      ? await fetchDeviceConditionCapabilities(this.hass, condition)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n    if (this._deviceId === undefined) {\n      fireEvent(this, \"value-changed\", {\n        value: { ...HaDeviceCondition.defaultConfig, condition: \"device\" },\n      });\n    }\n  }\n\n  private _deviceConditionPicked(ev) {\n    ev.stopPropagation();\n    let condition = ev.detail.value;\n    if (\n      this._origCondition &&\n      deviceAutomationsEqual(this._origCondition, condition)\n    ) {\n      condition = this._origCondition;\n    }\n    fireEvent(this, \"value-changed\", { value: condition });\n  }\n\n  private _extraFieldsChanged(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.condition,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.conditions.type.device.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n\n  static styles = css`\n    ha-device-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n\n    ha-form {\n      margin-top: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-device\": HaDeviceCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { LogicalCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport \"../ha-automation-condition\";\nimport type { ConditionElement } from \"../ha-automation-condition-row\";\n\n@customElement(\"ha-automation-condition-logical\")\nexport class HaLogicalCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: LogicalCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  public static get defaultConfig() {\n    return {\n      conditions: [],\n    };\n  }\n\n  protected render() {\n    return html`\n      <ha-automation-condition\n        nested\n        .conditions=${this.condition.conditions || []}\n        @value-changed=${this._valueChanged}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .reOrderMode=${this.reOrderMode}\n      ></ha-automation-condition>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, conditions: ev.detail.value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-logical\": HaLogicalCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\nimport { NumericStateCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-numeric_state\")\nexport default class HaNumericStateCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: NumericStateCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n    };\n  }\n\n  private _schema = memoizeOne(\n    (entityId) =>\n      [\n        { name: \"entity_id\", required: true, selector: { entity: {} } },\n        {\n          name: \"attribute\",\n          selector: {\n            attribute: {\n              entity_id: entityId,\n              hide_attributes: [\n                \"access_token\",\n                \"auto_update\",\n                \"available_modes\",\n                \"away_mode\",\n                \"changed_by\",\n                \"code_format\",\n                \"color_modes\",\n                \"current_activity\",\n                \"device_class\",\n                \"editable\",\n                \"effect_list\",\n                \"effect\",\n                \"entity_picture\",\n                \"fan_mode\",\n                \"fan_modes\",\n                \"fan_speed_list\",\n                \"forecast\",\n                \"friendly_name\",\n                \"frontend_stream_type\",\n                \"has_date\",\n                \"has_time\",\n                \"hs_color\",\n                \"hvac_mode\",\n                \"hvac_modes\",\n                \"icon\",\n                \"media_album_name\",\n                \"media_artist\",\n                \"media_content_type\",\n                \"media_position_updated_at\",\n                \"media_title\",\n                \"next_dawn\",\n                \"next_dusk\",\n                \"next_midnight\",\n                \"next_noon\",\n                \"next_rising\",\n                \"next_setting\",\n                \"operation_list\",\n                \"operation_mode\",\n                \"options\",\n                \"preset_mode\",\n                \"preset_modes\",\n                \"release_notes\",\n                \"release_summary\",\n                \"release_url\",\n                \"restored\",\n                \"rgb_color\",\n                \"rgbw_color\",\n                \"shuffle\",\n                \"sound_mode_list\",\n                \"sound_mode\",\n                \"source_list\",\n                \"source_type\",\n                \"source\",\n                \"state_class\",\n                \"supported_features\",\n                \"swing_mode\",\n                \"swing_mode\",\n                \"swing_modes\",\n                \"title\",\n                \"token\",\n                \"unit_of_measurement\",\n                \"xy_color\",\n              ],\n            },\n          },\n        },\n        {\n          name: \"above\",\n          selector: {\n            number: {\n              mode: \"box\",\n              min: Number.MIN_SAFE_INTEGER,\n              max: Number.MAX_SAFE_INTEGER,\n              step: 0.1,\n            },\n          },\n        },\n        {\n          name: \"below\",\n          selector: {\n            number: {\n              mode: \"box\",\n              min: Number.MIN_SAFE_INTEGER,\n              max: Number.MAX_SAFE_INTEGER,\n              step: 0.1,\n            },\n          },\n        },\n        {\n          name: \"value_template\",\n          selector: { template: {} },\n        },\n      ] as const\n  );\n\n  public render() {\n    const schema = this._schema(this.condition.entity_id);\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this.condition}\n        .schema=${schema}\n        .disabled=${this.disabled}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string => {\n    switch (schema.name) {\n      case \"entity_id\":\n        return this.hass.localize(\"ui.components.entity.entity-picker.entity\");\n      case \"attribute\":\n        return this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        );\n      default:\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.triggers.type.numeric_state.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-numeric_state\": HaNumericStateCondition;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { assert, literal, object, optional, string, union } from \"superstruct\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\nimport type { StateCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { forDictStruct } from \"../../structs\";\nimport type { ConditionElement } from \"../ha-automation-condition-row\";\n\nconst stateConditionStruct = object({\n  alias: optional(string()),\n  condition: literal(\"state\"),\n  entity_id: optional(string()),\n  attribute: optional(string()),\n  state: optional(string()),\n  for: optional(union([string(), forDictStruct])),\n});\n\n@customElement(\"ha-automation-condition-state\")\nexport class HaStateCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: StateCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { entity_id: \"\", state: \"\" };\n  }\n\n  private _schema = memoizeOne(\n    (entityId, attribute) =>\n      [\n        { name: \"entity_id\", required: true, selector: { entity: {} } },\n        {\n          name: \"attribute\",\n          selector: {\n            attribute: {\n              entity_id: entityId,\n              hide_attributes: [\n                \"access_token\",\n                \"available_modes\",\n                \"color_modes\",\n                \"editable\",\n                \"effect_list\",\n                \"entity_picture\",\n                \"fan_modes\",\n                \"fan_speed_list\",\n                \"forecast\",\n                \"friendly_name\",\n                \"hvac_modes\",\n                \"icon\",\n                \"operation_list\",\n                \"options\",\n                \"preset_modes\",\n                \"sound_mode_list\",\n                \"source_list\",\n                \"state_class\",\n                \"swing_modes\",\n                \"token\",\n              ],\n            },\n          },\n        },\n        {\n          name: \"state\",\n          required: true,\n          selector: {\n            state: { entity_id: entityId, attribute: attribute },\n          },\n        },\n        { name: \"for\", selector: { duration: {} } },\n      ] as const\n  );\n\n  public shouldUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"condition\")) {\n      try {\n        assert(this.condition, stateConditionStruct);\n      } catch (e: any) {\n        fireEvent(this, \"ui-mode-not-available\", e);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected render() {\n    const trgFor = createDurationData(this.condition.for);\n    const data = { ...this.condition, for: trgFor };\n    const schema = this._schema(\n      this.condition.entity_id,\n      this.condition.attribute\n    );\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .disabled=${this.disabled}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newCondition = ev.detail.value;\n\n    Object.keys(newCondition).forEach((key) =>\n      newCondition[key] === undefined || newCondition[key] === \"\"\n        ? delete newCondition[key]\n        : {}\n    );\n\n    // We should not cleanup state in the above, as it is required.\n    // Set it to empty string if it is undefined.\n    if (!newCondition.state) {\n      newCondition.state = \"\";\n    }\n\n    fireEvent(this, \"value-changed\", { value: newCondition });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string => {\n    switch (schema.name) {\n      case \"entity_id\":\n        return this.hass.localize(\"ui.components.entity.entity-picker.entity\");\n      case \"attribute\":\n        return this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        );\n      case \"for\":\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.triggers.type.state.for`\n        );\n      default:\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.conditions.type.state.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-state\": HaStateCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { SunCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { ConditionElement } from \"../ha-automation-condition-row\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\n\n@customElement(\"ha-automation-condition-sun\")\nexport class HaSunCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: SunCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        {\n          name: \"before\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"sunrise\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.sun.sunrise\"\n              ),\n            ],\n            [\n              \"sunset\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.sun.sunset\"\n              ),\n            ],\n          ],\n        },\n        { name: \"before_offset\", selector: { text: {} } },\n        {\n          name: \"after\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"sunrise\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.sun.sunrise\"\n              ),\n            ],\n            [\n              \"sunset\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.sun.sunset\"\n              ),\n            ],\n          ],\n        },\n        { name: \"after_offset\", selector: { text: {} } },\n      ] as const\n  );\n\n  protected render() {\n    const schema = this._schema(this.hass.localize);\n    return html`\n      <ha-form\n        .schema=${schema}\n        .data=${this.condition}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.conditions.type.sun.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-sun\": HaSunCondition;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../../components/ha-textarea\";\nimport type { TemplateCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-condition-row\";\n\n@customElement(\"ha-automation-condition-template\")\nexport class HaTemplateCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TemplateCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { value_template: \"\" };\n  }\n\n  protected render() {\n    const { value_template } = this.condition;\n    return html`\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.template.value_template\"\n        )}\n        *\n      </p>\n      <ha-code-editor\n        .name=${\"value_template\"}\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${value_template}\n        .readOnly=${this.disabled}\n        autocomplete-entities\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  static get styles() {\n    return css`\n      p {\n        margin-top: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-template\": HaTemplateCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { firstWeekdayIndex } from \"../../../../../common/datetime/first_weekday\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\nimport type { TimeCondition } from \"../../../../../data/automation\";\nimport { FrontendLocaleData } from \"../../../../../data/translation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { ConditionElement } from \"../ha-automation-condition-row\";\n\nconst DAYS = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"] as const;\n\n@customElement(\"ha-automation-condition-time\")\nexport class HaTimeCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TimeCondition;\n\n  @state() private _inputModeBefore?: boolean;\n\n  @state() private _inputModeAfter?: boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  private _schema = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      locale: FrontendLocaleData,\n      inputModeAfter?: boolean,\n      inputModeBefore?: boolean\n    ) => {\n      const dayIndex = firstWeekdayIndex(locale);\n      const sortedDays = DAYS.slice(dayIndex, DAYS.length).concat(\n        DAYS.slice(0, dayIndex)\n      );\n      return [\n        {\n          name: \"mode_after\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"value\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.time.type_value\"\n              ),\n            ],\n            [\n              \"input\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.time.type_input\"\n              ),\n            ],\n          ],\n        },\n        {\n          name: \"after\",\n          selector: inputModeAfter\n            ? { entity: { domain: \"input_datetime\" } }\n            : { time: {} },\n        },\n        {\n          name: \"mode_before\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"value\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.time.type_value\"\n              ),\n            ],\n            [\n              \"input\",\n              localize(\n                \"ui.panel.config.automation.editor.conditions.type.time.type_input\"\n              ),\n            ],\n          ],\n        },\n        {\n          name: \"before\",\n          selector: inputModeBefore\n            ? { entity: { domain: \"input_datetime\" } }\n            : { time: {} },\n        },\n        {\n          type: \"multi_select\",\n          name: \"weekday\",\n          options: sortedDays.map(\n            (day) =>\n              [\n                day,\n                localize(\n                  `ui.panel.config.automation.editor.conditions.type.time.weekdays.${day}`\n                ),\n              ] as const\n          ),\n        },\n      ] as const;\n    }\n  );\n\n  protected render() {\n    const inputModeBefore =\n      this._inputModeBefore ??\n      this.condition.before?.startsWith(\"input_datetime.\");\n    const inputModeAfter =\n      this._inputModeAfter ??\n      this.condition.after?.startsWith(\"input_datetime.\");\n\n    const schema = this._schema(\n      this.hass.localize,\n      this.hass.locale,\n      inputModeAfter,\n      inputModeBefore\n    );\n\n    const data = {\n      mode_before: inputModeBefore ? \"input\" : \"value\",\n      mode_after: inputModeAfter ? \"input\" : \"value\",\n      ...this.condition,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .disabled=${this.disabled}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    this._inputModeAfter = newValue.mode_after === \"input\";\n    this._inputModeBefore = newValue.mode_before === \"input\";\n\n    delete newValue.mode_after;\n    delete newValue.mode_before;\n\n    Object.keys(newValue).forEach((key) =>\n      newValue[key] === undefined || newValue[key] === \"\"\n        ? delete newValue[key]\n        : {}\n    );\n\n    fireEvent(this, \"value-changed\", { value: newValue });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.conditions.type.time.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-time\": HaTimeCondition;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { ensureArray } from \"../../../../../common/array/ensure-array\";\nimport \"../../../../../components/ha-select\";\nimport type {\n  AutomationConfig,\n  Trigger,\n  TriggerCondition,\n} from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-trigger\")\nexport class HaTriggerCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TriggerCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _triggers: Trigger[] = [];\n\n  private _unsub?: UnsubscribeFunc;\n\n  public static get defaultConfig() {\n    return {\n      id: \"\",\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const details = { callback: (config) => this._automationUpdated(config) };\n    fireEvent(this, \"subscribe-automation-config\", details);\n    this._unsub = (details as any).unsub;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsub) {\n      this._unsub();\n    }\n  }\n\n  protected render() {\n    const { id } = this.condition;\n\n    if (!this._triggers.length) {\n      return this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.type.trigger.no_triggers\"\n      );\n    }\n    return html`<ha-select\n      .label=${this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.type.trigger.id\"\n      )}\n      .value=${id}\n      .disabled=${this.disabled}\n      @selected=${this._triggerPicked}\n    >\n      ${this._triggers.map(\n        (trigger) =>\n          html`\n            <mwc-list-item .value=${trigger.id}> ${trigger.id} </mwc-list-item>\n          `\n      )}\n    </ha-select>`;\n  }\n\n  private _automationUpdated(config?: AutomationConfig) {\n    const seenIds = new Set();\n    this._triggers = config?.trigger\n      ? ensureArray(config.trigger).filter(\n          (t) => t.id && (seenIds.has(t.id) ? false : seenIds.add(t.id))\n        )\n      : [];\n  }\n\n  private _triggerPicked(ev) {\n    ev.stopPropagation();\n    if (!ev.target.value) {\n      return;\n    }\n    const newTrigger = ev.target.value;\n    if (this.condition.id === newTrigger) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, id: newTrigger },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-trigger\": HaTriggerCondition;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../../../common/entity/compute_state_domain\";\nimport { hasLocation } from \"../../../../../common/entity/has_location\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport { ZoneCondition } from \"../../../../../data/automation\";\nimport { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport { HomeAssistant } from \"../../../../../types\";\n\nfunction zoneAndLocationFilter(stateObj) {\n  return hasLocation(stateObj) && computeStateDomain(stateObj) !== \"zone\";\n}\n\nconst includeDomains = [\"zone\"];\n\n@customElement(\"ha-automation-condition-zone\")\nexport class HaZoneCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: ZoneCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n      zone: \"\",\n    };\n  }\n\n  protected render() {\n    const { entity_id, zone } = this.condition;\n    return html`\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.entity\"\n        )}\n        .value=${entity_id}\n        @value-changed=${this._entityPicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        allow-custom-entity\n        .entityFilter=${zoneAndLocationFilter}\n      ></ha-entity-picker>\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.zone\"\n        )}\n        .value=${zone}\n        @value-changed=${this._zonePicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        allow-custom-entity\n        .includeDomains=${includeDomains}\n      ></ha-entity-picker>\n      <label id=\"eventlabel\">\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.event\"\n        )}\n      </label>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, entity_id: ev.detail.value },\n    });\n  }\n\n  private _zonePicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, zone: ev.detail.value },\n    });\n  }\n\n  static styles = css`\n    ha-entity-picker:first-child {\n      display: block;\n      margin-bottom: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-zone\": HaZoneCondition;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheck,\n  mdiContentDuplicate,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiIdentifier,\n  mdiPlayCircleOutline,\n  mdiRenameBox,\n  mdiSort,\n  mdiStopCircleOutline,\n} from \"@mdi/js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { capitalizeFirstLetter } from \"../../../../common/string/capitalize-first-letter\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport { debounce } from \"../../../../common/util/debounce\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-expansion-panel\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-textfield\";\nimport { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\nimport { subscribeTrigger, Trigger } from \"../../../../data/automation\";\nimport { describeTrigger } from \"../../../../data/automation_i18n\";\nimport { validateConfig } from \"../../../../data/config\";\nimport { TRIGGER_TYPES } from \"../../../../data/trigger\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n  showPromptDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./types/ha-automation-trigger-calendar\";\nimport \"./types/ha-automation-trigger-device\";\nimport \"./types/ha-automation-trigger-event\";\nimport \"./types/ha-automation-trigger-geo_location\";\nimport \"./types/ha-automation-trigger-homeassistant\";\nimport \"./types/ha-automation-trigger-mqtt\";\nimport \"./types/ha-automation-trigger-numeric_state\";\nimport \"./types/ha-automation-trigger-state\";\nimport \"./types/ha-automation-trigger-sun\";\nimport \"./types/ha-automation-trigger-tag\";\nimport \"./types/ha-automation-trigger-template\";\nimport \"./types/ha-automation-trigger-time\";\nimport \"./types/ha-automation-trigger-time_pattern\";\nimport \"./types/ha-automation-trigger-webhook\";\nimport \"./types/ha-automation-trigger-zone\";\n\nexport interface TriggerElement extends LitElement {\n  trigger: Trigger;\n}\n\nexport const handleChangeEvent = (element: TriggerElement, ev: CustomEvent) => {\n  ev.stopPropagation();\n  const name = (ev.currentTarget as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = (ev.target as any)?.value;\n\n  if ((element.trigger[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newTrigger: Trigger;\n  if (newVal === undefined || newVal === \"\") {\n    newTrigger = { ...element.trigger };\n    delete newTrigger[name];\n  } else {\n    newTrigger = { ...element.trigger, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newTrigger });\n};\n\nconst preventDefault = (ev) => ev.preventDefault();\n\n@customElement(\"ha-automation-trigger-row\")\nexport default class HaAutomationTriggerRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: Trigger;\n\n  @property({ type: Boolean }) public hideMenu = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _warnings?: string[];\n\n  @state() private _yamlMode = false;\n\n  @state() private _requestShowId = false;\n\n  @state() private _triggered?: Record<string, unknown>;\n\n  @state() private _triggerColor = false;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  private _triggerUnsub?: Promise<UnsubscribeFunc>;\n\n  protected render() {\n    const supported =\n      customElements.get(`ha-automation-trigger-${this.trigger.platform}`) !==\n      undefined;\n    const yamlMode = this._yamlMode || !supported;\n    const showId = \"id\" in this.trigger || this._requestShowId;\n\n    return html`\n      <ha-card outlined>\n        ${this.trigger.enabled === false\n          ? html`\n              <div class=\"disabled-bar\">\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.actions.disabled\"\n                )}\n              </div>\n            `\n          : \"\"}\n\n        <ha-expansion-panel leftChevron>\n          <h3 slot=\"header\">\n            <ha-svg-icon\n              class=\"trigger-icon\"\n              .path=${TRIGGER_TYPES[this.trigger.platform]}\n            ></ha-svg-icon>\n            ${capitalizeFirstLetter(describeTrigger(this.trigger, this.hass))}\n          </h3>\n\n          <slot name=\"icons\" slot=\"icons\"></slot>\n          ${this.hideMenu\n            ? \"\"\n            : html`\n                <ha-button-menu\n                  slot=\"icons\"\n                  fixed\n                  corner=\"BOTTOM_START\"\n                  @action=${this._handleAction}\n                  @click=${preventDefault}\n                >\n                  <ha-icon-button\n                    slot=\"trigger\"\n                    .label=${this.hass.localize(\"ui.common.menu\")}\n                    .path=${mdiDotsVertical}\n                  ></ha-icon-button>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.triggers.rename\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiRenameBox}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.triggers.re_order\"\n                    )}\n                    <ha-svg-icon slot=\"graphic\" .path=${mdiSort}></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.triggers.duplicate\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiContentDuplicate}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.triggers.edit_id\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiIdentifier}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n\n                  <li divider role=\"separator\"></li>\n\n                  <mwc-list-item .disabled=${!supported} graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_ui\"\n                    )}\n                    ${!yamlMode\n                      ? html`<ha-svg-icon\n                          class=\"selected_menu_item\"\n                          slot=\"graphic\"\n                          .path=${mdiCheck}\n                        ></ha-svg-icon>`\n                      : ``}\n                  </mwc-list-item>\n\n                  <mwc-list-item .disabled=${!supported} graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_yaml\"\n                    )}\n                    ${yamlMode\n                      ? html`<ha-svg-icon\n                          class=\"selected_menu_item\"\n                          slot=\"graphic\"\n                          .path=${mdiCheck}\n                        ></ha-svg-icon>`\n                      : ``}\n                  </mwc-list-item>\n\n                  <li divider role=\"separator\"></li>\n\n                  <mwc-list-item graphic=\"icon\" .disabled=${this.disabled}>\n                    ${this.trigger.enabled === false\n                      ? this.hass.localize(\n                          \"ui.panel.config.automation.editor.actions.enable\"\n                        )\n                      : this.hass.localize(\n                          \"ui.panel.config.automation.editor.actions.disable\"\n                        )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${this.trigger.enabled === false\n                        ? mdiPlayCircleOutline\n                        : mdiStopCircleOutline}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                  <mwc-list-item\n                    class=\"warning\"\n                    graphic=\"icon\"\n                    .disabled=${this.disabled}\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.actions.delete\"\n                    )}\n                    <ha-svg-icon\n                      class=\"warning\"\n                      slot=\"graphic\"\n                      .path=${mdiDelete}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                </ha-button-menu>\n              `}\n          <div\n            class=${classMap({\n              \"card-content\": true,\n              disabled: this.trigger.enabled === false,\n            })}\n          >\n            ${this._warnings\n              ? html`<ha-alert\n                  alert-type=\"warning\"\n                  .title=${this.hass.localize(\n                    \"ui.errors.config.editor_not_supported\"\n                  )}\n                >\n                  ${this._warnings.length && this._warnings[0] !== undefined\n                    ? html` <ul>\n                        ${this._warnings.map(\n                          (warning) => html`<li>${warning}</li>`\n                        )}\n                      </ul>`\n                    : \"\"}\n                  ${this.hass.localize(\n                    \"ui.errors.config.edit_in_yaml_supported\"\n                  )}\n                </ha-alert>`\n              : \"\"}\n            ${yamlMode\n              ? html`\n                  ${!supported\n                    ? html`\n                        ${this.hass.localize(\n                          \"ui.panel.config.automation.editor.triggers.unsupported_platform\",\n                          \"platform\",\n                          this.trigger.platform\n                        )}\n                      `\n                    : \"\"}\n                  <ha-yaml-editor\n                    .hass=${this.hass}\n                    .defaultValue=${this.trigger}\n                    .readOnly=${this.disabled}\n                    @value-changed=${this._onYamlChange}\n                  ></ha-yaml-editor>\n                `\n              : html`\n                  ${showId\n                    ? html`\n                        <ha-textfield\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.automation.editor.triggers.id\"\n                          )}\n                          .value=${this.trigger.id || \"\"}\n                          .disabled=${this.disabled}\n                          @change=${this._idChanged}\n                        >\n                        </ha-textfield>\n                      `\n                    : \"\"}\n                  <div @ui-mode-not-available=${this._handleUiModeNotAvailable}>\n                    ${dynamicElement(\n                      `ha-automation-trigger-${this.trigger.platform}`,\n                      {\n                        hass: this.hass,\n                        trigger: this.trigger,\n                        disabled: this.disabled,\n                      }\n                    )}\n                  </div>\n                `}\n          </div>\n        </ha-expansion-panel>\n\n        <div\n          class=\"triggered ${classMap({\n            active: this._triggered !== undefined,\n            accent: this._triggerColor,\n          })}\"\n          @click=${this._showTriggeredInfo}\n        >\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.triggered\"\n          )}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected override updated(changedProps: PropertyValues<this>): void {\n    super.updated(changedProps);\n    if (changedProps.has(\"trigger\")) {\n      this._subscribeTrigger();\n    }\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hasUpdated && this.trigger) {\n      this._subscribeTrigger();\n    }\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    if (this._triggerUnsub) {\n      this._triggerUnsub.then((unsub) => unsub());\n      this._triggerUnsub = undefined;\n    }\n    this._doSubscribeTrigger.cancel();\n  }\n\n  private _subscribeTrigger() {\n    // Clean up old trigger subscription.\n    if (this._triggerUnsub) {\n      this._triggerUnsub.then((unsub) => unsub());\n      this._triggerUnsub = undefined;\n    }\n\n    this._doSubscribeTrigger();\n  }\n\n  private _doSubscribeTrigger = debounce(async () => {\n    let untriggerTimeout: number | undefined;\n    const showTriggeredTime = 5000;\n    const trigger = this.trigger;\n\n    // Clean up old trigger subscription.\n    if (this._triggerUnsub) {\n      this._triggerUnsub.then((unsub) => unsub());\n      this._triggerUnsub = undefined;\n    }\n\n    const validateResult = await validateConfig(this.hass, {\n      trigger,\n    });\n\n    // Don't do anything if trigger not valid or if trigger changed.\n    if (!validateResult.trigger.valid || this.trigger !== trigger) {\n      return;\n    }\n\n    const triggerUnsub = subscribeTrigger(\n      this.hass,\n      (result) => {\n        if (untriggerTimeout !== undefined) {\n          clearTimeout(untriggerTimeout);\n          this._triggerColor = !this._triggerColor;\n        } else {\n          this._triggerColor = false;\n        }\n        this._triggered = result;\n        untriggerTimeout = window.setTimeout(() => {\n          this._triggered = undefined;\n          untriggerTimeout = undefined;\n        }, showTriggeredTime);\n      },\n      trigger\n    );\n    triggerUnsub.catch(() => {\n      if (this._triggerUnsub === triggerUnsub) {\n        this._triggerUnsub = undefined;\n      }\n    });\n    this._triggerUnsub = triggerUnsub;\n  }, 5000);\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private async _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        await this._renameTrigger();\n        break;\n      case 1:\n        fireEvent(this, \"re-order\");\n        break;\n      case 2:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 3:\n        this._requestShowId = true;\n        this.expand();\n        break;\n      case 4:\n        this._switchUiMode();\n        this.expand();\n        break;\n      case 5:\n        this._switchYamlMode();\n        this.expand();\n        break;\n      case 6:\n        this._onDisable();\n        break;\n      case 7:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.delete_confirm_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.delete_confirm_text\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      destructive: true,\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _onDisable() {\n    const enabled = !(this.trigger.enabled ?? true);\n    const value = { ...this.trigger, enabled };\n    fireEvent(this, \"value-changed\", { value });\n    if (this._yamlMode) {\n      this._yamlEditor?.setValue(value);\n    }\n  }\n\n  private _idChanged(ev: CustomEvent) {\n    const newId = (ev.target as any).value;\n    if (newId === (this.trigger.id ?? \"\")) {\n      return;\n    }\n    this._requestShowId = true;\n    const value = { ...this.trigger };\n    if (!newId) {\n      delete value.id;\n    } else {\n      value.id = newId;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._warnings = undefined;\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n\n  private _switchUiMode() {\n    this._warnings = undefined;\n    this._yamlMode = false;\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = true;\n  }\n\n  private _showTriggeredInfo() {\n    showAlertDialog(this, {\n      text: html`\n        <ha-yaml-editor\n          readOnly\n          .hass=${this.hass}\n          .defaultValue=${this._triggered}\n        ></ha-yaml-editor>\n      `,\n    });\n  }\n\n  private async _renameTrigger(): Promise<void> {\n    const alias = await showPromptDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.change_alias\"\n      ),\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.alias\"\n      ),\n      inputType: \"string\",\n      placeholder: capitalizeFirstLetter(\n        describeTrigger(this.trigger, this.hass, true)\n      ),\n      defaultValue: this.trigger.alias,\n      confirmText: this.hass.localize(\"ui.common.submit\"),\n    });\n\n    const value = { ...this.trigger };\n    if (!alias) {\n      delete value.alias;\n    } else {\n      value.alias = alias;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n    if (this._yamlMode) {\n      this._yamlEditor?.setValue(value);\n    }\n  }\n\n  public expand() {\n    this.updateComplete.then(() => {\n      this.shadowRoot!.querySelector(\"ha-expansion-panel\")!.expanded = true;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-button-menu {\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        }\n        .disabled {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n        ha-expansion-panel {\n          --expansion-panel-summary-padding: 0 0 0 8px;\n          --expansion-panel-content-padding: 0;\n        }\n        h3 {\n          margin: 0;\n          font-size: inherit;\n          font-weight: inherit;\n        }\n        .trigger-icon {\n          display: none;\n        }\n        @media (min-width: 870px) {\n          .trigger-icon {\n            display: inline-block;\n            color: var(--secondary-text-color);\n            opacity: 0.9;\n            margin-right: 8px;\n          }\n        }\n        .card-content {\n          padding: 16px;\n        }\n        .disabled-bar {\n          background: var(--divider-color, #e0e0e0);\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius);\n          border-top-left-radius: var(--ha-card-border-radius);\n        }\n        .triggered {\n          cursor: pointer;\n          position: absolute;\n          top: 0px;\n          right: 0px;\n          left: 0px;\n          text-transform: uppercase;\n          font-weight: bold;\n          font-size: 14px;\n          background-color: var(--primary-color);\n          color: var(--text-primary-color);\n          max-height: 0px;\n          overflow: hidden;\n          transition: max-height 0.3s;\n          text-align: center;\n          border-top-right-radius: var(--ha-card-border-radius, 12px);\n          border-top-left-radius: var(--ha-card-border-radius, 12px);\n        }\n        .triggered.active {\n          max-height: 100px;\n        }\n        .triggered:hover {\n          opacity: 0.8;\n        }\n        .triggered.accent {\n          background-color: var(--accent-color);\n          color: var(--text-accent-color, var(--text-primary-color));\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 24px;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-row\": HaAutomationTriggerRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport type { ActionDetail } from \"@material/mwc-list\";\nimport { mdiArrowDown, mdiArrowUp, mdiDrag, mdiPlus } from \"@mdi/js\";\nimport deepClone from \"deep-clone-simple\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport memoizeOne from \"memoize-one\";\nimport type { SortableEvent } from \"sortablejs\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-button-menu\";\nimport type { HaSelect } from \"../../../../components/ha-select\";\nimport \"../../../../components/ha-svg-icon\";\nimport { Trigger } from \"../../../../data/automation\";\nimport { TRIGGER_TYPES } from \"../../../../data/trigger\";\nimport { sortableStyles } from \"../../../../resources/ha-sortable-style\";\nimport { SortableInstance } from \"../../../../resources/sortable\";\nimport { loadSortable } from \"../../../../resources/sortable.ondemand\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-trigger-row\";\nimport type HaAutomationTriggerRow from \"./ha-automation-trigger-row\";\nimport \"./types/ha-automation-trigger-calendar\";\nimport \"./types/ha-automation-trigger-device\";\nimport \"./types/ha-automation-trigger-event\";\nimport \"./types/ha-automation-trigger-geo_location\";\nimport \"./types/ha-automation-trigger-homeassistant\";\nimport \"./types/ha-automation-trigger-mqtt\";\nimport \"./types/ha-automation-trigger-numeric_state\";\nimport \"./types/ha-automation-trigger-state\";\nimport \"./types/ha-automation-trigger-sun\";\nimport \"./types/ha-automation-trigger-tag\";\nimport \"./types/ha-automation-trigger-template\";\nimport \"./types/ha-automation-trigger-time\";\nimport \"./types/ha-automation-trigger-time_pattern\";\nimport \"./types/ha-automation-trigger-webhook\";\nimport \"./types/ha-automation-trigger-zone\";\n\n@customElement(\"ha-automation-trigger\")\nexport default class HaAutomationTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public triggers!: Trigger[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public nested = false;\n\n  @property({ type: Boolean }) public reOrderMode = false;\n\n  private _focusLastTriggerOnChange = false;\n\n  private _triggerKeys = new WeakMap<Trigger, string>();\n\n  private _sortable?: SortableInstance;\n\n  protected render() {\n    return html`\n      ${\n        this.reOrderMode && !this.nested\n          ? html`\n              <ha-alert\n                alert-type=\"info\"\n                .title=${this.hass.localize(\n                  \"ui.panel.config.automation.editor.re_order_mode.title\"\n                )}\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.re_order_mode.description_triggers\"\n                )}\n                <mwc-button slot=\"action\" @click=${this._exitReOrderMode}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.re_order_mode.exit\"\n                  )}\n                </mwc-button>\n              </ha-alert>\n            `\n          : null\n      }\n      <div class=\"triggers\">\n        ${repeat(\n          this.triggers,\n          (trigger) => this._getKey(trigger),\n          (trg, idx) => html`\n            <ha-automation-trigger-row\n              .index=${idx}\n              .trigger=${trg}\n              .hideMenu=${this.reOrderMode}\n              @duplicate=${this._duplicateTrigger}\n              @value-changed=${this._triggerChanged}\n              .hass=${this.hass}\n              .disabled=${this.disabled}\n              @re-order=${this._enterReOrderMode}\n            >\n              ${this.reOrderMode\n                ? html`\n                    <ha-icon-button\n                      .index=${idx}\n                      slot=\"icons\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.automation.editor.move_up\"\n                      )}\n                      .path=${mdiArrowUp}\n                      @click=${this._moveUp}\n                      .disabled=${idx === 0}\n                    ></ha-icon-button>\n                    <ha-icon-button\n                      .index=${idx}\n                      slot=\"icons\"\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.automation.editor.move_down\"\n                      )}\n                      .path=${mdiArrowDown}\n                      @click=${this._moveDown}\n                      .disabled=${idx === this.triggers.length - 1}\n                    ></ha-icon-button>\n                    <div class=\"handle\" slot=\"icons\">\n                      <ha-svg-icon .path=${mdiDrag}></ha-svg-icon>\n                    </div>\n                  `\n                : \"\"}\n            </ha-automation-trigger-row>\n          `\n        )}\n        </div>\n        <ha-button-menu @action=${this._addTrigger} .disabled=${this.disabled}>\n          <mwc-button\n            slot=\"trigger\"\n            outlined\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.triggers.add\"\n            )}\n            .disabled=${this.disabled}\n          >\n            <ha-svg-icon .path=${mdiPlus} slot=\"icon\"></ha-svg-icon>\n          </mwc-button>\n          ${this._processedTypes(this.hass.localize).map(\n            ([opt, label, icon]) => html`\n              <mwc-list-item .value=${opt} aria-label=${label} graphic=\"icon\">\n                ${label}<ha-svg-icon slot=\"graphic\" .path=${icon}></ha-svg-icon\n              ></mwc-list-item>\n            `\n          )}\n        </ha-button-menu>\n      </div>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"reOrderMode\")) {\n      if (this.reOrderMode) {\n        this._createSortable();\n      } else {\n        this._destroySortable();\n      }\n    }\n\n    if (changedProps.has(\"triggers\") && this._focusLastTriggerOnChange) {\n      this._focusLastTriggerOnChange = false;\n\n      const row = this.shadowRoot!.querySelector<HaAutomationTriggerRow>(\n        \"ha-automation-trigger-row:last-of-type\"\n      )!;\n      row.updateComplete.then(() => {\n        row.expand();\n        row.scrollIntoView();\n        row.focus();\n      });\n    }\n  }\n\n  private async _enterReOrderMode(ev: CustomEvent) {\n    if (this.nested) return;\n    ev.stopPropagation();\n    this.reOrderMode = true;\n  }\n\n  private async _exitReOrderMode() {\n    this.reOrderMode = false;\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n    this._sortable = new Sortable(\n      this.shadowRoot!.querySelector(\".triggers\")!,\n      {\n        animation: 150,\n        fallbackClass: \"sortable-fallback\",\n        handle: \".handle\",\n        onChoose: (evt: SortableEvent) => {\n          (evt.item as any).placeholder =\n            document.createComment(\"sort-placeholder\");\n          evt.item.after((evt.item as any).placeholder);\n        },\n        onEnd: (evt: SortableEvent) => {\n          // put back in original location\n          if ((evt.item as any).placeholder) {\n            (evt.item as any).placeholder.replaceWith(evt.item);\n            delete (evt.item as any).placeholder;\n          }\n          this._dragged(evt);\n        },\n      }\n    );\n  }\n\n  private _destroySortable() {\n    this._sortable?.destroy();\n    this._sortable = undefined;\n  }\n\n  private _getKey(action: Trigger) {\n    if (!this._triggerKeys.has(action)) {\n      this._triggerKeys.set(action, Math.random().toString());\n    }\n\n    return this._triggerKeys.get(action)!;\n  }\n\n  private _addTrigger(ev: CustomEvent<ActionDetail>) {\n    const platform = (ev.currentTarget as HaSelect).items[ev.detail.index]\n      .value as Trigger[\"platform\"];\n\n    const elClass = customElements.get(\n      `ha-automation-trigger-${platform}`\n    ) as CustomElementConstructor & {\n      defaultConfig: Omit<Trigger, \"platform\">;\n    };\n\n    const triggers = this.triggers.concat({\n      platform: platform as any,\n      ...elClass.defaultConfig,\n    });\n    this._focusLastTriggerOnChange = true;\n    fireEvent(this, \"value-changed\", { value: triggers });\n  }\n\n  private _moveUp(ev) {\n    const index = (ev.target as any).index;\n    const newIndex = index - 1;\n    this._move(index, newIndex);\n  }\n\n  private _moveDown(ev) {\n    const index = (ev.target as any).index;\n    const newIndex = index + 1;\n    this._move(index, newIndex);\n  }\n\n  private _dragged(ev: SortableEvent): void {\n    if (ev.oldIndex === ev.newIndex) return;\n    this._move(ev.oldIndex!, ev.newIndex!);\n  }\n\n  private _move(index: number, newIndex: number) {\n    const triggers = this.triggers.concat();\n    const trigger = triggers.splice(index, 1)[0];\n    triggers.splice(newIndex, 0, trigger);\n    fireEvent(this, \"value-changed\", { value: triggers });\n  }\n\n  private _triggerChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const triggers = [...this.triggers];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      triggers.splice(index, 1);\n    } else {\n      // Store key on new value.\n      const key = this._getKey(triggers[index]);\n      this._triggerKeys.set(newValue, key);\n\n      triggers[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: triggers });\n  }\n\n  private _duplicateTrigger(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.triggers.concat(deepClone(this.triggers[index])),\n    });\n  }\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string, string][] =>\n      Object.entries(TRIGGER_TYPES)\n        .map(\n          ([action, icon]) =>\n            [\n              action,\n              localize(\n                `ui.panel.config.automation.editor.triggers.type.${action}.label`\n              ),\n              icon,\n            ] as [string, string, string]\n        )\n        .sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  static get styles(): CSSResultGroup {\n    return [\n      sortableStyles,\n      css`\n        ha-automation-trigger-row {\n          display: block;\n          margin-bottom: 16px;\n          scroll-margin-top: 48px;\n        }\n        ha-svg-icon {\n          height: 20px;\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n          border-radius: var(--ha-card-border-radius, 16px);\n          overflow: hidden;\n        }\n        .handle {\n          cursor: move;\n          padding: 12px;\n        }\n        .handle ha-svg-icon {\n          pointer-events: none;\n          height: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger\": HaAutomationTrigger;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { CalendarTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\nimport type { HaDurationData } from \"../../../../../components/ha-duration-input\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\n\n@customElement(\"ha-automation-trigger-calendar\")\nexport class HaCalendarTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: CalendarTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        {\n          name: \"entity_id\",\n          required: true,\n          selector: { entity: { domain: \"calendar\" } },\n        },\n        {\n          name: \"event\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"start\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.calendar.start\"\n              ),\n            ],\n            [\n              \"end\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.calendar.end\"\n              ),\n            ],\n          ],\n        },\n        { name: \"offset\", selector: { duration: { enable_day: true } } },\n        {\n          name: \"offset_type\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"before\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.calendar.before\"\n              ),\n            ],\n            [\n              \"after\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.calendar.after\"\n              ),\n            ],\n          ],\n        },\n      ] as const\n  );\n\n  public static get defaultConfig() {\n    return {\n      event: \"start\" as CalendarTrigger[\"event\"],\n      offset: 0,\n    };\n  }\n\n  protected render() {\n    const schema = this._schema(this.hass.localize);\n    // Convert from string representation to ha form duration representation\n    const trigger_offset = this.trigger.offset;\n    const duration: HaDurationData = createDurationData(trigger_offset)!;\n    let offset_type = \"after\";\n    if (\n      (typeof trigger_offset === \"object\" && duration!.hours! < 0) ||\n      (typeof trigger_offset === \"string\" && trigger_offset.startsWith(\"-\"))\n    ) {\n      duration.hours = Math.abs(duration.hours!);\n      offset_type = \"before\";\n    }\n    const data = {\n      ...this.trigger,\n      offset: duration,\n      offset_type: offset_type,\n    };\n    return html`\n      <ha-form\n        .schema=${schema}\n        .data=${data}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    // Convert back to duration string representation\n    const duration = ev.detail.value.offset;\n    const offsetType = ev.detail.value.offset_type === \"before\" ? \"-\" : \"\";\n    const newTrigger = {\n      ...ev.detail.value,\n      offset: `${offsetType}${duration.hours ?? 0}:${duration.minutes ?? 0}:${\n        duration.seconds ?? 0\n      }`,\n    };\n    delete newTrigger.offset_type;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.calendar.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-calendar\": HaCalendarTrigger;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/device/ha-device-trigger-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  DeviceTrigger,\n  fetchDeviceTriggerCapabilities,\n} from \"../../../../../data/device_automation\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-trigger-device\")\nexport class HaDeviceTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public trigger!: DeviceTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origTrigger?: DeviceTrigger;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (trigger: DeviceTrigger, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (trigger[item.name] !== undefined) {\n          extraFieldsData![item.name] = trigger[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.trigger.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.device.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-trigger-picker\n        .value=${this.trigger}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceTriggerPicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.device.trigger\"\n        )}\n      ></ha-device-trigger-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this._extraFieldsData(this.trigger, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .disabled=${this.disabled}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.trigger) {\n      this._origTrigger = this.trigger;\n    }\n  }\n\n  protected updated(changedPros) {\n    if (!changedPros.has(\"trigger\")) {\n      return;\n    }\n    const prevTrigger = changedPros.get(\"trigger\");\n    if (prevTrigger && !deviceAutomationsEqual(prevTrigger, this.trigger)) {\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    const trigger = this.trigger;\n\n    this._capabilities = trigger.domain\n      ? await fetchDeviceTriggerCapabilities(this.hass, trigger)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n    if (this._deviceId === undefined) {\n      fireEvent(this, \"value-changed\", {\n        value: { ...HaDeviceTrigger.defaultConfig, platform: \"device\" },\n      });\n    }\n  }\n\n  private _deviceTriggerPicked(ev) {\n    ev.stopPropagation();\n    let trigger = ev.detail.value;\n    if (\n      this._origTrigger &&\n      deviceAutomationsEqual(this._origTrigger, trigger)\n    ) {\n      trigger = this._origTrigger;\n    }\n    if (this.trigger.id) {\n      trigger.id = this.trigger.id;\n    }\n    fireEvent(this, \"value-changed\", { value: trigger });\n  }\n\n  private _extraFieldsChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.triggers.type.device.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n\n  static styles = css`\n    ha-device-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n\n    ha-form {\n      margin-top: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-device\": HaDeviceTrigger;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-textfield\";\nimport \"../../../../../components/ha-yaml-editor\";\nimport \"../../../../../components/user/ha-users-picker\";\nimport { EventTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport {\n  handleChangeEvent,\n  TriggerElement,\n} from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-event\")\nexport class HaEventTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: EventTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { event_type: \"\" };\n  }\n\n  protected render() {\n    const { event_type, event_data, context } = this.trigger;\n    return html`\n      <ha-textfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.event_type\"\n        )}\n        name=\"event_type\"\n        .value=${event_type}\n        .disabled=${this.disabled}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n      <ha-yaml-editor\n        .hass=${this.hass}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.event_data\"\n        )}\n        .name=${\"event_data\"}\n        .readOnly=${this.disabled}\n        .defaultValue=${event_data}\n        @value-changed=${this._dataChanged}\n      ></ha-yaml-editor>\n      <br />\n      ${this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.type.event.context_users\"\n      )}\n      <ha-users-picker\n        .pickedUserLabel=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.context_user_picked\"\n        )}\n        .pickUserLabel=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.context_user_pick\"\n        )}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .value=${this._wrapUsersInArray(context?.user_id)}\n        @value-changed=${this._usersChanged}\n      ></ha-users-picker>\n    `;\n  }\n\n  private _wrapUsersInArray(user_id: string | string[] | undefined): string[] {\n    if (!user_id) {\n      return [];\n    }\n    if (typeof user_id === \"string\") {\n      return [user_id];\n    }\n    return user_id;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    handleChangeEvent(this, ev);\n  }\n\n  private _dataChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    handleChangeEvent(this, ev);\n  }\n\n  private _usersChanged(ev) {\n    ev.stopPropagation();\n    const value = { ...this.trigger };\n    if (!ev.detail.value.length && value.context) {\n      delete value.context.user_id;\n    } else {\n      if (!value.context) {\n        value.context = {};\n      }\n      value.context.user_id = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-textfield {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-event\": HaEventTrigger;\n  }\n}\n","import \"../../../../../components/ha-form/ha-form\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { GeoLocationTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\n\n@customElement(\"ha-automation-trigger-geo_location\")\nexport class HaGeolocationTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: GeoLocationTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        { name: \"source\", selector: { text: {} } },\n        { name: \"zone\", selector: { entity: { domain: \"zone\" } } },\n        {\n          name: \"event\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"enter\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.geo_location.enter\"\n              ),\n            ],\n            [\n              \"leave\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.geo_location.leave\"\n              ),\n            ],\n          ],\n        },\n      ] as const\n  );\n\n  public static get defaultConfig() {\n    return {\n      source: \"\",\n      zone: \"\",\n      event: \"enter\" as GeoLocationTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .schema=${this._schema(this.hass.localize)}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.geo_location.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-geo_location\": HaGeolocationTrigger;\n  }\n}\n","import \"../../../../../components/ha-form/ha-form\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { HassTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\n\n@customElement(\"ha-automation-trigger-homeassistant\")\nexport class HaHassTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: HassTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        {\n          name: \"event\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"start\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.homeassistant.start\"\n              ),\n            ],\n            [\n              \"shutdown\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.homeassistant.shutdown\"\n              ),\n            ],\n          ],\n        },\n      ] as const\n  );\n\n  public static get defaultConfig() {\n    return {\n      event: \"start\" as HassTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .schema=${this._schema(this.hass.localize)}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.homeassistant.${schema.name}`\n    );\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-homeassistant\": HaHassTrigger;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\nimport { MqttTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\n\nconst SCHEMA = [\n  { name: \"topic\", required: true, selector: { text: {} } },\n  { name: \"payload\", selector: { text: {} } },\n] as const;\n\n@customElement(\"ha-automation-trigger-mqtt\")\nexport class HaMQTTTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: MqttTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { topic: \"\" };\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .schema=${SCHEMA}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<typeof SCHEMA>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.mqtt.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-mqtt\": HaMQTTTrigger;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\nimport type { NumericStateTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-trigger-numeric_state\")\nexport class HaNumericStateTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: NumericStateTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  private _schema = memoizeOne(\n    (entityId) =>\n      [\n        { name: \"entity_id\", required: true, selector: { entity: {} } },\n        {\n          name: \"attribute\",\n          selector: {\n            attribute: {\n              entity_id: entityId,\n              hide_attributes: [\n                \"access_token\",\n                \"auto_update\",\n                \"available_modes\",\n                \"away_mode\",\n                \"changed_by\",\n                \"code_format\",\n                \"color_modes\",\n                \"current_activity\",\n                \"device_class\",\n                \"editable\",\n                \"effect_list\",\n                \"effect\",\n                \"entity_picture\",\n                \"fan_mode\",\n                \"fan_modes\",\n                \"fan_speed_list\",\n                \"forecast\",\n                \"friendly_name\",\n                \"frontend_stream_type\",\n                \"has_date\",\n                \"has_time\",\n                \"hs_color\",\n                \"hvac_mode\",\n                \"hvac_modes\",\n                \"icon\",\n                \"media_album_name\",\n                \"media_artist\",\n                \"media_content_type\",\n                \"media_position_updated_at\",\n                \"media_title\",\n                \"next_dawn\",\n                \"next_dusk\",\n                \"next_midnight\",\n                \"next_noon\",\n                \"next_rising\",\n                \"next_setting\",\n                \"operation_list\",\n                \"operation_mode\",\n                \"options\",\n                \"preset_mode\",\n                \"preset_modes\",\n                \"release_notes\",\n                \"release_summary\",\n                \"release_url\",\n                \"restored\",\n                \"rgb_color\",\n                \"rgbw_color\",\n                \"shuffle\",\n                \"sound_mode_list\",\n                \"sound_mode\",\n                \"source_list\",\n                \"source_type\",\n                \"source\",\n                \"state_class\",\n                \"supported_features\",\n                \"swing_mode\",\n                \"swing_mode\",\n                \"swing_modes\",\n                \"title\",\n                \"token\",\n                \"unit_of_measurement\",\n                \"xy_color\",\n              ],\n            },\n          },\n        },\n        {\n          name: \"above\",\n          selector: {\n            number: {\n              mode: \"box\",\n              min: Number.MIN_SAFE_INTEGER,\n              max: Number.MAX_SAFE_INTEGER,\n              step: 0.1,\n            },\n          },\n        },\n        {\n          name: \"below\",\n          selector: {\n            number: {\n              mode: \"box\",\n              min: Number.MIN_SAFE_INTEGER,\n              max: Number.MAX_SAFE_INTEGER,\n              step: 0.1,\n            },\n          },\n        },\n        {\n          name: \"value_template\",\n          selector: { template: {} },\n        },\n        { name: \"for\", selector: { duration: {} } },\n      ] as const\n  );\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return;\n    }\n    // Check for templates in trigger. If found, revert to YAML mode.\n    if (this.trigger && hasTemplate(this.trigger.for)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n    }\n  }\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n    };\n  }\n\n  public render() {\n    const trgFor = createDurationData(this.trigger.for);\n\n    const data = { ...this.trigger, for: trgFor };\n    const schema = this._schema(this.trigger.entity_id);\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .disabled=${this.disabled}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string => {\n    switch (schema.name) {\n      case \"entity_id\":\n        return this.hass.localize(\"ui.components.entity.entity-picker.entity\");\n      case \"attribute\":\n        return this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        );\n      case \"for\":\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.triggers.type.state.for`\n        );\n      default:\n        return this.hass.localize(\n          `ui.panel.config.automation.editor.triggers.type.numeric_state.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-numeric_state\": HaNumericStateTrigger;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport {\n  array,\n  assert,\n  assign,\n  literal,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../../../../common/array/ensure-array\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport { StateTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { baseTriggerStruct, forDictStruct } from \"../../structs\";\nimport { TriggerElement } from \"../ha-automation-trigger-row\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\n\nconst stateTriggerStruct = assign(\n  baseTriggerStruct,\n  object({\n    alias: optional(string()),\n    platform: literal(\"state\"),\n    entity_id: optional(union([string(), array(string())])),\n    attribute: optional(string()),\n    from: optional(string()),\n    to: optional(string()),\n    for: optional(union([string(), forDictStruct])),\n  })\n);\n\n@customElement(\"ha-automation-trigger-state\")\nexport class HaStateTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: StateTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { entity_id: [] };\n  }\n\n  private _schema = memoizeOne(\n    (entityId, attribute) =>\n      [\n        {\n          name: \"entity_id\",\n          required: true,\n          selector: { entity: { multiple: true } },\n        },\n        {\n          name: \"attribute\",\n          selector: {\n            attribute: {\n              entity_id: entityId ? entityId[0] : undefined,\n              hide_attributes: [\n                \"access_token\",\n                \"available_modes\",\n                \"color_modes\",\n                \"device_class\",\n                \"editable\",\n                \"effect_list\",\n                \"entity_picture\",\n                \"fan_modes\",\n                \"fan_speed_list\",\n                \"friendly_name\",\n                \"has_date\",\n                \"has_time\",\n                \"hvac_modes\",\n                \"icon\",\n                \"operation_list\",\n                \"options\",\n                \"preset_modes\",\n                \"sound_mode_list\",\n                \"source_list\",\n                \"state_class\",\n                \"supported_features\",\n                \"swing_modes\",\n                \"token\",\n                \"unit_of_measurement\",\n              ],\n            },\n          },\n        },\n        {\n          name: \"from\",\n          selector: {\n            state: {\n              entity_id: entityId ? entityId[0] : undefined,\n              attribute: attribute,\n            },\n          },\n        },\n        {\n          name: \"to\",\n          selector: {\n            state: {\n              entity_id: entityId ? entityId[0] : undefined,\n              attribute: attribute,\n            },\n          },\n        },\n        { name: \"for\", selector: { duration: {} } },\n      ] as const\n  );\n\n  public shouldUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return true;\n    }\n    if (\n      this.trigger.for &&\n      typeof this.trigger.for === \"object\" &&\n      this.trigger.for.milliseconds === 0\n    ) {\n      delete this.trigger.for.milliseconds;\n    }\n    // Check for templates in trigger. If found, revert to YAML mode.\n    if (this.trigger && hasTemplate(this.trigger)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return false;\n    }\n    try {\n      assert(this.trigger, stateTriggerStruct);\n    } catch (e: any) {\n      fireEvent(this, \"ui-mode-not-available\", e);\n      return false;\n    }\n    return true;\n  }\n\n  protected render() {\n    const trgFor = createDurationData(this.trigger.for);\n\n    const data = {\n      ...this.trigger,\n      entity_id: ensureArray(this.trigger.entity_id),\n      for: trgFor,\n    };\n    const schema = this._schema(this.trigger.entity_id, this.trigger.attribute);\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n        .disabled=${this.disabled}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n\n    Object.keys(newTrigger).forEach((key) =>\n      newTrigger[key] === undefined || newTrigger[key] === \"\"\n        ? delete newTrigger[key]\n        : {}\n    );\n\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      schema.name === \"entity_id\"\n        ? \"ui.components.entity.entity-picker.entity\"\n        : `ui.panel.config.automation.editor.triggers.type.state.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-state\": HaStateTrigger;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { SunTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\n\n@customElement(\"ha-automation-trigger-sun\")\nexport class HaSunTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: SunTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        {\n          name: \"event\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"sunrise\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.sun.sunrise\"\n              ),\n            ],\n            [\n              \"sunset\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.sun.sunset\"\n              ),\n            ],\n          ],\n        },\n        { name: \"offset\", selector: { text: {} } },\n      ] as const\n  );\n\n  public static get defaultConfig() {\n    return {\n      event: \"sunrise\" as SunTrigger[\"event\"],\n      offset: 0,\n    };\n  }\n\n  protected render() {\n    const schema = this._schema(this.hass.localize);\n    return html`\n      <ha-form\n        .schema=${schema}\n        .data=${this.trigger}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.sun.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-sun\": HaSunTrigger;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { caseInsensitiveStringCompare } from \"../../../../../common/string/compare\";\nimport \"../../../../../components/ha-select\";\nimport { TagTrigger } from \"../../../../../data/automation\";\nimport { fetchTags, Tag } from \"../../../../../data/tag\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { TriggerElement } from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-tag\")\nexport class HaTagTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: TagTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _tags?: Tag[];\n\n  public static get defaultConfig() {\n    return { tag_id: \"\" };\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._fetchTags();\n  }\n\n  protected render() {\n    if (!this._tags) {\n      return html``;\n    }\n    return html`\n      <ha-select\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.tag.label\"\n        )}\n        .disabled=${this.disabled || this._tags.length === 0}\n        .value=${this.trigger.tag_id}\n        @selected=${this._tagChanged}\n      >\n        ${this._tags.map(\n          (tag) => html`\n            <mwc-list-item .value=${tag.id}>\n              ${tag.name || tag.id}\n            </mwc-list-item>\n          `\n        )}\n      </ha-select>\n    `;\n  }\n\n  private async _fetchTags() {\n    this._tags = (await fetchTags(this.hass)).sort((a, b) =>\n      caseInsensitiveStringCompare(a.name || a.id, b.name || b.id)\n    );\n  }\n\n  private _tagChanged(ev) {\n    if (\n      !ev.target.value ||\n      !this._tags ||\n      this.trigger.tag_id === ev.target.value\n    ) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        tag_id: ev.target.value,\n      },\n    });\n  }\n\n  static get styles() {\n    return css`\n      ha-select {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-tag\": HaTagTrigger;\n  }\n}\n","import \"../../../../../components/ha-textarea\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { TemplateTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-template\")\nexport class HaTemplateTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: TemplateTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { value_template: \"\" };\n  }\n\n  protected render() {\n    const { value_template } = this.trigger;\n    return html`\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.template.value_template\"\n        )}\n        *\n      </p>\n      <ha-code-editor\n        .name=${\"value_template\"}\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${value_template}\n        .readOnly=${this.disabled}\n        autocomplete-entities\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  static get styles() {\n    return css`\n      p {\n        margin-top: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-template\": HaTemplateTrigger;\n  }\n}\n","import memoizeOne from \"memoize-one\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { TimeTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\n\n@customElement(\"ha-automation-trigger-time\")\nexport class HaTimeTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: TimeTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _inputMode?: boolean;\n\n  public static get defaultConfig() {\n    return { at: \"\" };\n  }\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc, inputMode?: boolean) => {\n      const atSelector = inputMode\n        ? { entity: { domain: \"input_datetime\" } }\n        : { time: {} };\n\n      return [\n        {\n          name: \"mode\",\n          type: \"select\",\n          required: true,\n          options: [\n            [\n              \"value\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.time.type_value\"\n              ),\n            ],\n            [\n              \"input\",\n              localize(\n                \"ui.panel.config.automation.editor.triggers.type.time.type_input\"\n              ),\n            ],\n          ],\n        },\n        { name: \"at\", selector: atSelector },\n      ] as const;\n    }\n  );\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return;\n    }\n    // We dont support multiple times atm.\n    if (this.trigger && Array.isArray(this.trigger.at)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.editor_not_supported\"))\n      );\n    }\n  }\n\n  protected render() {\n    const at = this.trigger.at;\n\n    if (Array.isArray(at)) {\n      return html``;\n    }\n\n    const inputMode =\n      this._inputMode ??\n      (at?.startsWith(\"input_datetime.\") || at?.startsWith(\"sensor.\"));\n\n    const schema = this._schema(this.hass.localize, inputMode);\n\n    const data = {\n      mode: inputMode ? \"input\" : \"value\",\n      ...this.trigger,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .disabled=${this.disabled}\n        @value-changed=${this._valueChanged}\n        .computeLabel=${this._computeLabelCallback}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    this._inputMode = newValue.mode === \"input\";\n    delete newValue.mode;\n\n    Object.keys(newValue).forEach((key) =>\n      newValue[key] === undefined || newValue[key] === \"\"\n        ? delete newValue[key]\n        : {}\n    );\n\n    fireEvent(this, \"value-changed\", { value: newValue });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.time.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-time\": HaTimeTrigger;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../../components/ha-form/types\";\nimport type { TimePatternTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { TriggerElement } from \"../ha-automation-trigger-row\";\n\nconst SCHEMA = [\n  { name: \"hours\", selector: { text: {} } },\n  { name: \"minutes\", selector: { text: {} } },\n  { name: \"seconds\", selector: { text: {} } },\n] as const;\n\n@customElement(\"ha-automation-trigger-time_pattern\")\nexport class HaTimePatternTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: TimePatternTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  protected render() {\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .schema=${SCHEMA}\n        .data=${this.trigger}\n        .disabled=${this.disabled}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const newTrigger = ev.detail.value;\n    fireEvent(this, \"value-changed\", { value: newTrigger });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<typeof SCHEMA>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.automation.editor.triggers.type.time_pattern.${schema.name}`\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-time_pattern\": HaTimePatternTrigger;\n  }\n}\n","import \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-textfield\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { slugify } from \"../../../../../common/string/slugify\";\nimport { copyToClipboard } from \"../../../../../common/util/copy-clipboard\";\nimport type { HaTextField } from \"../../../../../components/ha-textfield\";\nimport { showToast } from \"../../../../../util/toast\";\nimport {\n  WebhookTrigger,\n  AutomationConfig,\n} from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-trigger-row\";\n\nconst DEFAULT_WEBHOOK_ID = \"\";\n\n@customElement(\"ha-automation-trigger-webhook\")\nexport class HaWebhookTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: WebhookTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _config?: AutomationConfig;\n\n  private _unsub?: UnsubscribeFunc;\n\n  public static get defaultConfig() {\n    return {\n      webhook_id: DEFAULT_WEBHOOK_ID,\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const details = {\n      callback: (config) => {\n        this._config = config;\n      },\n    };\n    fireEvent(this, \"subscribe-automation-config\", details);\n    this._unsub = (details as any).unsub;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsub) {\n      this._unsub();\n    }\n  }\n\n  private _generateWebhookId(): string {\n    // The webhook_id should be treated like a password. Generate a default\n    // value that would be hard for someone to guess. This generates a\n    // 144-bit random value. The output is a 24 character url-safe string.\n    const randomBytes = crypto.getRandomValues(new Uint8Array(18));\n    const base64Str = btoa(String.fromCharCode(...randomBytes));\n    const urlSafeId = base64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n\n    // Include the automation name to give the user context about what the\n    // webhook_id is used for.\n    const urlSafeAlias = slugify(this._config?.alias || \"\", \"-\");\n\n    return `${urlSafeAlias}-${urlSafeId}`;\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    if (changedProperties.has(\"trigger\")) {\n      if (this.trigger.webhook_id === DEFAULT_WEBHOOK_ID) {\n        this.trigger.webhook_id = this._generateWebhookId();\n      }\n    }\n  }\n\n  protected render() {\n    const { webhook_id: webhookId } = this.trigger;\n\n    return html`\n      <ha-textfield\n        name=\"webhook_id\"\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.webhook.webhook_id\"\n        )}\n        .helper=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.webhook.webhook_id_helper\"\n        )}\n        .disabled=${this.disabled}\n        iconTrailing\n        .value=${webhookId || \"\"}\n        @input=${this._valueChanged}\n      >\n        <ha-icon-button\n          @click=${this._copyUrl}\n          slot=\"trailingIcon\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.webhook.copy_url\"\n          )}\n          .path=${mdiContentCopy}\n        ></ha-icon-button>\n      </ha-textfield>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  private async _copyUrl(ev): Promise<void> {\n    const inputElement = ev.target.parentElement as HaTextField;\n    const url = this.hass.hassUrl(`/api/webhook/${inputElement.value}`);\n\n    await copyToClipboard(url);\n    showToast(this, {\n      message: this.hass.localize(\"ui.common.copied_clipboard\"),\n    });\n  }\n\n  static styles = css`\n    ha-textfield {\n      display: block;\n    }\n\n    ha-textfield > ha-icon-button {\n      --mdc-icon-button-size: 24px;\n      --mdc-icon-size: 18px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-webhook\": HaWebhookTrigger;\n  }\n}\n","import \"../../../../../components/entity/ha-entity-picker\";\nimport \"../../../../../components/ha-formfield\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../../../common/entity/compute_state_domain\";\nimport { hasLocation } from \"../../../../../common/entity/has_location\";\nimport type { ZoneTrigger } from \"../../../../../data/automation\";\nimport type { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { HaRadio } from \"../../../../../components/ha-radio\";\n\nfunction zoneAndLocationFilter(stateObj) {\n  return hasLocation(stateObj) && computeStateDomain(stateObj) !== \"zone\";\n}\n\nconst includeDomains = [\"zone\"];\n\n@customElement(\"ha-automation-trigger-zone\")\nexport class HaZoneTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: ZoneTrigger;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n      zone: \"\",\n      event: \"enter\" as ZoneTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    const { entity_id, zone, event } = this.trigger;\n    return html`\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.entity\"\n        )}\n        .value=${entity_id}\n        .disabled=${this.disabled}\n        @value-changed=${this._entityPicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .entityFilter=${zoneAndLocationFilter}\n      ></ha-entity-picker>\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.zone\"\n        )}\n        .value=${zone}\n        .disabled=${this.disabled}\n        @value-changed=${this._zonePicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .includeDomains=${includeDomains}\n      ></ha-entity-picker>\n\n      <label>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.event\"\n        )}\n        <ha-formfield\n          .disabled=${this.disabled}\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.zone.enter\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"enter\"\n            .disabled=${this.disabled}\n            .checked=${event === \"enter\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .disabled=${this.disabled}\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.zone.leave\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"leave\"\n            .disabled=${this.disabled}\n            .checked=${event === \"leave\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n      </label>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.trigger, entity_id: ev.detail.value },\n    });\n  }\n\n  private _zonePicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.trigger, zone: ev.detail.value },\n    });\n  }\n\n  private _radioGroupPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        event: (ev.target as HaRadio).value,\n      },\n    });\n  }\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n    ha-entity-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-zone\": HaZoneTrigger;\n  }\n}\n"],"names":[],"sourceRoot":""}