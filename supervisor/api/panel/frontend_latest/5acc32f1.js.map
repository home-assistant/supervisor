{"version":3,"file":"5acc32f1.js","mappings":";AAqFA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAcA;AACA;;;AAGA;;AASA;;AAGA;;AAQA;;AAIA;;;;AAKA;;;;;;AAeA;;AA9DA;AAEA;;;AAKA;AACA;AACA;AACA;AAyDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA","sources":["webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-media.ts"],"sourcesContent":["import { mdiPlayBox, mdiPlus } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport { getSignedPath } from \"../../data/auth\";\nimport {\n  MediaClassBrowserSettings,\n  MediaPickedEvent,\n  SUPPORT_BROWSE_MEDIA,\n} from \"../../data/media-player\";\nimport type { MediaSelector, MediaSelectorValue } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport { brandsUrl, extractDomainFromBrandUrl } from \"../../util/brands-url\";\nimport \"../ha-alert\";\nimport \"../ha-form/ha-form\";\nimport type { SchemaUnion } from \"../ha-form/types\";\nimport { showMediaBrowserDialog } from \"../media-player/show-media-browser-dialog\";\n\nconst MANUAL_SCHEMA = [\n  { name: \"media_content_id\", required: false, selector: { text: {} } },\n  { name: \"media_content_type\", required: false, selector: { text: {} } },\n] as const;\n\n@customElement(\"ha-selector-media\")\nexport class HaMediaSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: MediaSelector;\n\n  @property({ attribute: false }) public value?: MediaSelectorValue;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean, reflect: true }) public required = true;\n\n  @state() private _thumbnailUrl?: string | null;\n\n  willUpdate(changedProps: PropertyValues<this>) {\n    if (changedProps.has(\"value\")) {\n      const thumbnail = this.value?.metadata?.thumbnail;\n      const oldThumbnail = (changedProps.get(\"value\") as this[\"value\"])\n        ?.metadata?.thumbnail;\n      if (thumbnail === oldThumbnail) {\n        return;\n      }\n      if (thumbnail && thumbnail.startsWith(\"/\")) {\n        this._thumbnailUrl = undefined;\n        // Thumbnails served by local API require authentication\n        getSignedPath(this.hass, thumbnail).then((signedPath) => {\n          this._thumbnailUrl = signedPath.path;\n        });\n      } else if (\n        thumbnail &&\n        thumbnail.startsWith(\"https://brands.home-assistant.io\")\n      ) {\n        // The backend is not aware of the theme used by the users,\n        // so we rewrite the URL to show a proper icon\n        this._thumbnailUrl = brandsUrl({\n          domain: extractDomainFromBrandUrl(thumbnail),\n          type: \"icon\",\n          useFallback: true,\n          darkOptimized: this.hass.themes?.darkMode,\n        });\n      } else {\n        this._thumbnailUrl = thumbnail;\n      }\n    }\n  }\n\n  protected render() {\n    const stateObj = this.value?.entity_id\n      ? this.hass.states[this.value.entity_id]\n      : undefined;\n\n    const supportsBrowse =\n      !this.value?.entity_id ||\n      (stateObj && supportsFeature(stateObj, SUPPORT_BROWSE_MEDIA));\n\n    return html`<ha-entity-picker\n        .hass=${this.hass}\n        .value=${this.value?.entity_id}\n        .label=${this.label ||\n        this.hass.localize(\"ui.components.selectors.media.pick_media_player\")}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .required=${this.required}\n        include-domains='[\"media_player\"]'\n        allow-custom-entity\n        @value-changed=${this._entityChanged}\n      ></ha-entity-picker>\n      ${!supportsBrowse\n        ? html`<ha-alert>\n              ${this.hass.localize(\n                \"ui.components.selectors.media.browse_not_supported\"\n              )}\n            </ha-alert>\n            <ha-form\n              .hass=${this.hass}\n              .data=${this.value}\n              .schema=${MANUAL_SCHEMA}\n              .computeLabel=${this._computeLabelCallback}\n            ></ha-form>`\n        : html`<ha-card\n            outlined\n            @click=${this._pickMedia}\n            class=${this.disabled || !this.value?.entity_id ? \"disabled\" : \"\"}\n          >\n            <div\n              class=\"thumbnail ${classMap({\n                portrait:\n                  !!this.value?.metadata?.media_class &&\n                  MediaClassBrowserSettings[\n                    this.value.metadata.children_media_class ||\n                      this.value.metadata.media_class\n                  ].thumbnail_ratio === \"portrait\",\n              })}\"\n            >\n              ${this.value?.metadata?.thumbnail\n                ? html`\n                    <div\n                      class=\"${classMap({\n                        \"centered-image\":\n                          !!this.value.metadata.media_class &&\n                          [\"app\", \"directory\"].includes(\n                            this.value.metadata.media_class\n                          ),\n                      })}\n                        image\"\n                      style=${this._thumbnailUrl\n                        ? `background-image: url(${this._thumbnailUrl});`\n                        : \"\"}\n                    ></div>\n                  `\n                : html`\n                    <div class=\"icon-holder image\">\n                      <ha-svg-icon\n                        class=\"folder\"\n                        .path=${!this.value?.media_content_id\n                          ? mdiPlus\n                          : this.value?.metadata?.media_class\n                          ? MediaClassBrowserSettings[\n                              this.value.metadata.media_class === \"directory\"\n                                ? this.value.metadata.children_media_class ||\n                                  this.value.metadata.media_class\n                                : this.value.metadata.media_class\n                            ].icon\n                          : mdiPlayBox}\n                      ></ha-svg-icon>\n                    </div>\n                  `}\n            </div>\n            <div class=\"title\">\n              ${!this.value?.media_content_id\n                ? this.hass.localize(\"ui.components.selectors.media.pick_media\")\n                : this.value.metadata?.title || this.value.media_content_id}\n            </div>\n          </ha-card>`}`;\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<typeof MANUAL_SCHEMA>\n  ): string =>\n    this.hass.localize(`ui.components.selectors.media.${schema.name}`);\n\n  private _entityChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        entity_id: ev.detail.value,\n        media_content_id: \"\",\n        media_content_type: \"\",\n      },\n    });\n  }\n\n  private _pickMedia() {\n    showMediaBrowserDialog(this, {\n      action: \"pick\",\n      entityId: this.value!.entity_id!,\n      navigateIds: this.value!.metadata?.navigateIds,\n      mediaPickedCallback: (pickedMedia: MediaPickedEvent) => {\n        fireEvent(this, \"value-changed\", {\n          value: {\n            ...this.value,\n            media_content_id: pickedMedia.item.media_content_id,\n            media_content_type: pickedMedia.item.media_content_type,\n            metadata: {\n              title: pickedMedia.item.title,\n              thumbnail: pickedMedia.item.thumbnail,\n              media_class: pickedMedia.item.media_class,\n              children_media_class: pickedMedia.item.children_media_class,\n              navigateIds: pickedMedia.navigateIds?.map((id) => ({\n                media_content_type: id.media_content_type,\n                media_content_id: id.media_content_id,\n              })),\n            },\n          },\n        });\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-entity-picker {\n        display: block;\n        margin-bottom: 16px;\n      }\n      mwc-button {\n        margin-top: 8px;\n      }\n      ha-alert {\n        display: block;\n        margin-bottom: 16px;\n      }\n      ha-card {\n        position: relative;\n        width: 200px;\n        box-sizing: border-box;\n        cursor: pointer;\n      }\n      ha-card.disabled {\n        pointer-events: none;\n        color: var(--disabled-text-color);\n      }\n      ha-card .thumbnail {\n        width: 100%;\n        position: relative;\n        box-sizing: border-box;\n        transition: padding-bottom 0.1s ease-out;\n        padding-bottom: 100%;\n      }\n      ha-card .thumbnail.portrait {\n        padding-bottom: 150%;\n      }\n      ha-card .image {\n        border-radius: 3px 3px 0 0;\n      }\n      .folder {\n        --mdc-icon-size: calc(var(--media-browse-item-size, 175px) * 0.4);\n      }\n      .title {\n        font-size: 16px;\n        padding-top: 16px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        margin-bottom: 16px;\n        padding-left: 16px;\n        padding-right: 4px;\n        white-space: nowrap;\n      }\n      .image {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        background-size: cover;\n        background-repeat: no-repeat;\n        background-position: center;\n      }\n      .centered-image {\n        margin: 0 8px;\n        background-size: contain;\n      }\n      .icon-holder {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-media\": HaMediaSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}