{"version":3,"file":"be70b3d8.js","mappings":";;;AA+gBA","sources":["webpack://home-assistant-frontend/./src/components/ha-service-control.ts"],"sourcesContent":["import { mdiHelpCircle } from \"@mdi/js\";\nimport {\n  HassService,\n  HassServices,\n  HassServiceTarget,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeObjectId } from \"../common/entity/compute_object_id\";\nimport {\n  fetchIntegrationManifest,\n  IntegrationManifest,\n} from \"../data/integration\";\nimport { Selector } from \"../data/selector\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport { documentationUrl } from \"../util/documentation-url\";\nimport \"./ha-checkbox\";\nimport \"./ha-icon-button\";\nimport \"./ha-selector/ha-selector\";\nimport \"./ha-service-picker\";\nimport \"./ha-settings-row\";\nimport \"./ha-yaml-editor\";\nimport type { HaYamlEditor } from \"./ha-yaml-editor\";\n\nconst showOptionalToggle = (field) =>\n  field.selector &&\n  !field.required &&\n  !(\"boolean\" in field.selector && field.default);\n\ninterface ExtHassService extends Omit<HassService, \"fields\"> {\n  fields: {\n    key: string;\n    name?: string;\n    description: string;\n    required?: boolean;\n    advanced?: boolean;\n    default?: any;\n    example?: any;\n    selector?: Selector;\n  }[];\n  hasSelector: string[];\n}\n\n@customElement(\"ha-service-control\")\nexport class HaServiceControl extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public value?: {\n    service: string;\n    target?: HassServiceTarget;\n    data?: Record<string, any>;\n  };\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ reflect: true, type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public showAdvanced?: boolean;\n\n  @state() private _value!: this[\"value\"];\n\n  @state() private _checkedKeys = new Set();\n\n  @state() private _manifest?: IntegrationManifest;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  protected willUpdate(changedProperties: PropertyValues<this>) {\n    if (!changedProperties.has(\"value\")) {\n      return;\n    }\n    const oldValue = changedProperties.get(\"value\") as\n      | undefined\n      | this[\"value\"];\n\n    if (oldValue?.service !== this.value?.service) {\n      this._checkedKeys = new Set();\n    }\n\n    const serviceData = this._getServiceInfo(\n      this.value?.service,\n      this.hass.services\n    );\n\n    // Fetch the manifest if we have a service selected and the service domain changed.\n    // If no service is selected, clear the manifest.\n    if (this.value?.service) {\n      if (\n        !oldValue?.service ||\n        computeDomain(this.value.service) !== computeDomain(oldValue.service)\n      ) {\n        this._fetchManifest(computeDomain(this.value?.service));\n      }\n    } else {\n      this._manifest = undefined;\n    }\n\n    if (\n      serviceData &&\n      \"target\" in serviceData &&\n      (this.value?.data?.entity_id ||\n        this.value?.data?.area_id ||\n        this.value?.data?.device_id)\n    ) {\n      const target = {\n        ...this.value.target,\n      };\n\n      if (this.value.data.entity_id && !this.value.target?.entity_id) {\n        target.entity_id = this.value.data.entity_id;\n      }\n      if (this.value.data.area_id && !this.value.target?.area_id) {\n        target.area_id = this.value.data.area_id;\n      }\n      if (this.value.data.device_id && !this.value.target?.device_id) {\n        target.device_id = this.value.data.device_id;\n      }\n\n      this._value = {\n        ...this.value,\n        target,\n        data: { ...this.value.data },\n      };\n\n      delete this._value.data!.entity_id;\n      delete this._value.data!.device_id;\n      delete this._value.data!.area_id;\n    } else {\n      this._value = this.value;\n    }\n\n    if (oldValue?.service !== this.value?.service) {\n      let updatedDefaultValue = false;\n      if (this._value && serviceData) {\n        const loadDefaults = this.value && !(\"data\" in this.value);\n        // Set mandatory bools without a default value to false\n        if (!this._value.data) {\n          this._value.data = {};\n        }\n        serviceData.fields.forEach((field) => {\n          if (\n            field.selector &&\n            field.required &&\n            field.default === undefined &&\n            \"boolean\" in field.selector &&\n            this._value!.data![field.key] === undefined\n          ) {\n            updatedDefaultValue = true;\n            this._value!.data![field.key] = false;\n          }\n          if (\n            loadDefaults &&\n            field.selector &&\n            field.default !== undefined &&\n            this._value!.data![field.key] === undefined\n          ) {\n            updatedDefaultValue = true;\n            this._value!.data![field.key] = field.default;\n          }\n        });\n      }\n      if (updatedDefaultValue) {\n        fireEvent(this, \"value-changed\", {\n          value: {\n            ...this._value,\n          },\n        });\n      }\n    }\n\n    if (this._value?.data) {\n      const yamlEditor = this._yamlEditor;\n      if (yamlEditor && yamlEditor.value !== this._value.data) {\n        yamlEditor.setValue(this._value.data);\n      }\n    }\n  }\n\n  private _getServiceInfo = memoizeOne(\n    (\n      service?: string,\n      serviceDomains?: HassServices\n    ): ExtHassService | undefined => {\n      if (!service || !serviceDomains) {\n        return undefined;\n      }\n      const domain = computeDomain(service);\n      const serviceName = computeObjectId(service);\n      if (!(domain in serviceDomains)) {\n        return undefined;\n      }\n      if (!(serviceName in serviceDomains[domain])) {\n        return undefined;\n      }\n\n      const fields = Object.entries(\n        serviceDomains[domain][serviceName].fields\n      ).map(([key, value]) => ({\n        key,\n        ...value,\n        selector: value.selector as Selector | undefined,\n      }));\n      return {\n        ...serviceDomains[domain][serviceName],\n        fields,\n        hasSelector: fields.length\n          ? fields.filter((field) => field.selector).map((field) => field.key)\n          : [],\n      };\n    }\n  );\n\n  protected render() {\n    const serviceData = this._getServiceInfo(\n      this._value?.service,\n      this.hass.services\n    );\n\n    const shouldRenderServiceDataYaml =\n      (serviceData?.fields.length && !serviceData.hasSelector.length) ||\n      (serviceData &&\n        Object.keys(this._value?.data || {}).some(\n          (key) => !serviceData!.hasSelector.includes(key)\n        ));\n\n    const entityId =\n      shouldRenderServiceDataYaml &&\n      serviceData?.fields.find((field) => field.key === \"entity_id\");\n\n    const hasOptional = Boolean(\n      !shouldRenderServiceDataYaml &&\n        serviceData?.fields.some((field) => showOptionalToggle(field))\n    );\n\n    return html`<ha-service-picker\n        .hass=${this.hass}\n        .value=${this._value?.service}\n        .disabled=${this.disabled}\n        @value-changed=${this._serviceChanged}\n      ></ha-service-picker>\n      <div class=\"description\">\n        ${serviceData?.description\n          ? html`<p>${serviceData?.description}</p>`\n          : \"\"}\n        ${this._manifest\n          ? html` <a\n              href=${this._manifest.is_built_in\n                ? documentationUrl(\n                    this.hass,\n                    `/integrations/${this._manifest.domain}`\n                  )\n                : this._manifest.documentation}\n              title=${this.hass.localize(\n                \"ui.components.service-control.integration_doc\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <ha-icon-button\n                .path=${mdiHelpCircle}\n                class=\"help-icon\"\n              ></ha-icon-button>\n            </a>`\n          : \"\"}\n      </div>\n      ${serviceData && \"target\" in serviceData\n        ? html`<ha-settings-row .narrow=${this.narrow}>\n            ${hasOptional\n              ? html`<div slot=\"prefix\" class=\"checkbox-spacer\"></div>`\n              : \"\"}\n            <span slot=\"heading\"\n              >${this.hass.localize(\n                \"ui.components.service-control.target\"\n              )}</span\n            >\n            <span slot=\"description\"\n              >${this.hass.localize(\n                \"ui.components.service-control.target_description\"\n              )}</span\n            ><ha-selector\n              .hass=${this.hass}\n              .selector=${serviceData.target\n                ? { target: serviceData.target }\n                : { target: {} }}\n              .disabled=${this.disabled}\n              @value-changed=${this._targetChanged}\n              .value=${this._value?.target}\n            ></ha-selector\n          ></ha-settings-row>`\n        : entityId\n        ? html`<ha-entity-picker\n            .hass=${this.hass}\n            .disabled=${this.disabled}\n            .value=${this._value?.data?.entity_id}\n            .label=${entityId.description}\n            @value-changed=${this._entityPicked}\n            allow-custom-entity\n          ></ha-entity-picker>`\n        : \"\"}\n      ${shouldRenderServiceDataYaml\n        ? html`<ha-yaml-editor\n            .hass=${this.hass}\n            .label=${this.hass.localize(\"ui.components.service-control.data\")}\n            .name=${\"data\"}\n            .readOnly=${this.disabled}\n            .defaultValue=${this._value?.data}\n            @value-changed=${this._dataChanged}\n          ></ha-yaml-editor>`\n        : serviceData?.fields.map((dataField) => {\n            const showOptional = showOptionalToggle(dataField);\n            return dataField.selector &&\n              (!dataField.advanced ||\n                this.showAdvanced ||\n                (this._value?.data &&\n                  this._value.data[dataField.key] !== undefined))\n              ? html`<ha-settings-row .narrow=${this.narrow}>\n                  ${!showOptional\n                    ? hasOptional\n                      ? html`<div slot=\"prefix\" class=\"checkbox-spacer\"></div>`\n                      : \"\"\n                    : html`<ha-checkbox\n                        .key=${dataField.key}\n                        .checked=${this._checkedKeys.has(dataField.key) ||\n                        (this._value?.data &&\n                          this._value.data[dataField.key] !== undefined)}\n                        .disabled=${this.disabled}\n                        @change=${this._checkboxChanged}\n                        slot=\"prefix\"\n                      ></ha-checkbox>`}\n                  <span slot=\"heading\">${dataField.name || dataField.key}</span>\n                  <span slot=\"description\">${dataField?.description}</span>\n                  <ha-selector\n                    .disabled=${this.disabled ||\n                    (showOptional &&\n                      !this._checkedKeys.has(dataField.key) &&\n                      (!this._value?.data ||\n                        this._value.data[dataField.key] === undefined))}\n                    .hass=${this.hass}\n                    .selector=${dataField.selector}\n                    .key=${dataField.key}\n                    @value-changed=${this._serviceDataChanged}\n                    .value=${this._value?.data\n                      ? this._value.data[dataField.key]\n                      : undefined}\n                    .placeholder=${dataField.default}\n                  ></ha-selector>\n                </ha-settings-row>`\n              : \"\";\n          })}`;\n  }\n\n  private _checkboxChanged(ev) {\n    const checked = ev.currentTarget.checked;\n    const key = ev.currentTarget.key;\n    let data;\n\n    if (checked) {\n      this._checkedKeys.add(key);\n      const defaultValue = this._getServiceInfo(\n        this._value?.service,\n        this.hass.services\n      )?.fields.find((field) => field.key === key)?.default;\n      if (defaultValue != null) {\n        data = {\n          ...this._value?.data,\n          [key]: defaultValue,\n        };\n      }\n    } else {\n      this._checkedKeys.delete(key);\n      data = { ...this._value?.data };\n      delete data[key];\n    }\n    if (data) {\n      fireEvent(this, \"value-changed\", {\n        value: {\n          ...this._value,\n          data,\n        },\n      });\n    }\n    this.requestUpdate(\"_checkedKeys\");\n  }\n\n  private _serviceChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    if (ev.detail.value === this._value?.service) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { service: ev.detail.value || \"\" },\n    });\n  }\n\n  private _entityPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (this._value?.data?.entity_id === newValue) {\n      return;\n    }\n    let value;\n    if (!newValue && this._value?.data) {\n      value = { ...this._value };\n      delete value.data.entity_id;\n    } else {\n      value = {\n        ...this._value,\n        data: { ...this._value?.data, entity_id: ev.detail.value },\n      };\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _targetChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (this._value?.target === newValue) {\n      return;\n    }\n    let value;\n    if (!newValue) {\n      value = { ...this._value };\n      delete value.target;\n    } else {\n      value = { ...this._value, target: ev.detail.value };\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _serviceDataChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const key = (ev.currentTarget as any).key;\n    const value = ev.detail.value;\n    if (\n      this._value?.data?.[key] === value ||\n      (!this._value?.data?.[key] && (value === \"\" || value === undefined))\n    ) {\n      return;\n    }\n\n    const data = { ...this._value?.data, [key]: value };\n\n    if (value === \"\" || value === undefined) {\n      delete data[key];\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._value,\n        data,\n      },\n    });\n  }\n\n  private _dataChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._value,\n        data: ev.detail.value,\n      },\n    });\n  }\n\n  private async _fetchManifest(integration: string) {\n    this._manifest = undefined;\n    try {\n      this._manifest = await fetchIntegrationManifest(this.hass, integration);\n    } catch (err: any) {\n      // Ignore if loading manifest fails. Probably bad JSON in manifest\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-settings-row {\n        padding: var(--service-control-padding, 0 16px);\n      }\n      ha-settings-row {\n        --paper-time-input-justify-content: flex-end;\n        --settings-row-content-width: 100%;\n        --settings-row-prefix-display: contents;\n        border-top: var(\n          --service-control-items-border-top,\n          1px solid var(--divider-color)\n        );\n      }\n      ha-service-picker,\n      ha-entity-picker,\n      ha-yaml-editor {\n        display: block;\n        margin: var(--service-control-padding, 0 16px);\n      }\n      ha-yaml-editor {\n        padding: 16px 0;\n      }\n      p {\n        margin: var(--service-control-padding, 0 16px);\n        padding: 16px 0;\n      }\n      .checkbox-spacer {\n        width: 32px;\n      }\n      ha-checkbox {\n        margin-left: -16px;\n      }\n      .help-icon {\n        color: var(--secondary-text-color);\n      }\n      .description {\n        justify-content: space-between;\n        display: flex;\n        align-items: center;\n        padding-right: 2px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-service-control\": HaServiceControl;\n  }\n}\n"],"names":[],"sourceRoot":""}