{"version":3,"file":"1f19644a.js","mappings":";AAqDA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAmDA;AChDA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;;AAlCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;;;AAuBA","sources":["webpack://home-assistant-frontend/./src/components/device/ha-devices-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-device.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-device-picker\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./ha-device-picker\";\n\n@customElement(\"ha-devices-picker\")\nclass HaDevicesPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string[];\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @property({ type: Boolean }) public required?: boolean;\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  @property({ attribute: \"picked-device-label\" })\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  public pickedDeviceLabel?: string;\n\n  @property({ attribute: \"pick-device-label\" }) public pickDeviceLabel?: string;\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const currentDevices = this._currentDevices;\n    return html`\n      ${currentDevices.map(\n        (entityId) => html`\n          <div>\n            <ha-device-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .deviceFilter=${this.deviceFilter}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .value=${entityId}\n              .label=${this.pickedDeviceLabel}\n              .disabled=${this.disabled}\n              @value-changed=${this._deviceChanged}\n            ></ha-device-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-device-picker\n          allow-custom-entity\n          .hass=${this.hass}\n          .helper=${this.helper}\n          .deviceFilter=${this.deviceFilter}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .label=${this.pickDeviceLabel}\n          .disabled=${this.disabled}\n          .required=${this.required && !currentDevices.length}\n          @value-changed=${this._addDevice}\n        ></ha-device-picker>\n      </div>\n    `;\n  }\n\n  private get _currentDevices() {\n    return this.value || [];\n  }\n\n  private async _updateDevices(devices) {\n    fireEvent(this, \"value-changed\", {\n      value: devices,\n    });\n\n    this.value = devices;\n  }\n\n  private _deviceChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === curValue || newValue !== \"\") {\n      return;\n    }\n    if (newValue === \"\") {\n      this._updateDevices(\n        this._currentDevices.filter((dev) => dev !== curValue)\n      );\n    } else {\n      this._updateDevices(\n        this._currentDevices.map((dev) => (dev === curValue ? newValue : dev))\n      );\n    }\n  }\n\n  private async _addDevice(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentDevices = this._currentDevices;\n    if (currentDevices.includes(toAdd)) {\n      return;\n    }\n\n    this._updateDevices([...currentDevices, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-devices-picker\": HaDevicesPicker;\n  }\n}\n","import { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport type { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { getDeviceIntegrationLookup } from \"../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport {\n  EntitySources,\n  fetchEntitySourcesWithCache,\n} from \"../../data/entity_sources\";\nimport type { DeviceSelector } from \"../../data/selector\";\nimport { filterSelectorDevices } from \"../../data/selector\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../device/ha-device-picker\";\nimport \"../device/ha-devices-picker\";\n\n@customElement(\"ha-selector-device\")\nexport class HaDeviceSelector extends SubscribeMixin(LitElement) {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: DeviceSelector;\n\n  @state() private _entitySources?: EntitySources;\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  private _deviceIntegrationLookup = memoizeOne(getDeviceIntegrationLookup);\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities.filter((entity) => entity.device_id !== null);\n      }),\n    ];\n  }\n\n  protected updated(changedProperties): void {\n    super.updated(changedProperties);\n    if (\n      changedProperties.has(\"selector\") &&\n      this.selector.device?.integration &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n  }\n\n  protected render() {\n    if (this.selector.device?.integration && !this._entitySources) {\n      return html``;\n    }\n\n    if (!this.selector.device?.multiple) {\n      return html`\n        <ha-device-picker\n          .hass=${this.hass}\n          .value=${this.value}\n          .label=${this.label}\n          .helper=${this.helper}\n          .deviceFilter=${this._filterDevices}\n          .includeDeviceClasses=${this.selector.device?.entity?.device_class\n            ? [this.selector.device.entity.device_class]\n            : undefined}\n          .includeDomains=${this.selector.device?.entity?.domain\n            ? [this.selector.device.entity.domain]\n            : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          allow-custom-entity\n        ></ha-device-picker>\n      `;\n    }\n\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <ha-devices-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .deviceFilter=${this._filterDevices}\n        .includeDeviceClasses=${this.selector.device.entity?.device_class\n          ? [this.selector.device.entity.device_class]\n          : undefined}\n        .includeDomains=${this.selector.device.entity?.domain\n          ? [this.selector.device.entity.domain]\n          : undefined}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-devices-picker>\n    `;\n  }\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    const deviceIntegrations =\n      this._entitySources && this._entities\n        ? this._deviceIntegrationLookup(this._entitySources, this._entities)\n        : undefined;\n\n    if (!this.selector.device) {\n      return true;\n    }\n    return filterSelectorDevices(\n      this.selector.device,\n      device,\n      deviceIntegrations\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-device\": HaDeviceSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}