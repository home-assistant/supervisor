{"version":3,"file":"e4dcbfb9.js","mappings":";AA8DA;AACA;;AAGA;;;;AAQA;;;;;AAWA;;;AAKA;;;AAOA;;AAEA;;;;AAIA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAIA;;AAcA;;AAvEA;;;;;;;;;;;;;;;;;;;AAxCA","sources":["webpack://home-assistant-frontend/./hassio/src/dialogs/update/dialog-supervisor-update.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport \"../../../../src/components/ha-alert\";\nimport \"../../../../src/components/ha-circular-progress\";\nimport \"../../../../src/components/ha-dialog\";\nimport \"../../../../src/components/ha-settings-row\";\nimport \"../../../../src/components/ha-switch\";\nimport {\n  extractApiErrorMessage,\n  ignoreSupervisorError,\n} from \"../../../../src/data/hassio/common\";\nimport { createHassioPartialBackup } from \"../../../../src/data/hassio/backup\";\nimport { haStyle, haStyleDialog } from \"../../../../src/resources/styles\";\nimport type { HomeAssistant } from \"../../../../src/types\";\nimport { SupervisorDialogSupervisorUpdateParams } from \"./show-dialog-update\";\n\n@customElement(\"dialog-supervisor-update\")\nclass DialogSupervisorUpdate extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  @state() private _createBackup = true;\n\n  @state() private _action: \"backup\" | \"update\" | null = null;\n\n  @state() private _error?: string;\n\n  @state()\n  private _dialogParams?: SupervisorDialogSupervisorUpdateParams;\n\n  public async showDialog(\n    params: SupervisorDialogSupervisorUpdateParams\n  ): Promise<void> {\n    this._opened = true;\n    this._dialogParams = params;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._action = null;\n    this._createBackup = true;\n    this._error = undefined;\n    this._dialogParams = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  public focus(): void {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._dialogParams) {\n      return html``;\n    }\n    return html`\n      <ha-dialog .open=${this._opened} scrimClickAction escapeKeyAction>\n        ${this._action === null\n          ? html`<slot name=\"heading\">\n                <h2 id=\"title\" class=\"header_title\">\n                  ${this._dialogParams.supervisor.localize(\n                    \"confirm.update.title\",\n                    \"name\",\n                    this._dialogParams.name\n                  )}\n                </h2>\n              </slot>\n              <div>\n                ${this._dialogParams.supervisor.localize(\n                  \"confirm.update.text\",\n                  \"name\",\n                  this._dialogParams.name,\n                  \"version\",\n                  this._dialogParams.version\n                )}\n              </div>\n\n              <ha-settings-row>\n                <span slot=\"heading\">\n                  ${this._dialogParams.supervisor.localize(\n                    \"dialog.update.backup\"\n                  )}\n                </span>\n                <span slot=\"description\">\n                  ${this._dialogParams.supervisor.localize(\n                    \"dialog.update.create_backup\",\n                    \"name\",\n                    this._dialogParams.name\n                  )}\n                </span>\n                <ha-switch\n                  .checked=${this._createBackup}\n                  haptic\n                  @click=${this._toggleBackup}\n                >\n                </ha-switch>\n              </ha-settings-row>\n              <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n                ${this._dialogParams.supervisor.localize(\"common.cancel\")}\n              </mwc-button>\n              <mwc-button\n                .disabled=${this._error !== undefined}\n                @click=${this._update}\n                slot=\"primaryAction\"\n              >\n                ${this._dialogParams.supervisor.localize(\"common.update\")}\n              </mwc-button>`\n          : html`<ha-circular-progress alt=\"Updating\" size=\"large\" active>\n              </ha-circular-progress>\n              <p class=\"progress-text\">\n                ${this._action === \"update\"\n                  ? this._dialogParams.supervisor.localize(\n                      \"dialog.update.updating\",\n                      \"name\",\n                      this._dialogParams.name,\n                      \"version\",\n                      this._dialogParams.version\n                    )\n                  : this._dialogParams.supervisor.localize(\n                      \"dialog.update.creating_backup\",\n                      \"name\",\n                      this._dialogParams.name\n                    )}\n              </p>`}\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private _toggleBackup() {\n    this._createBackup = !this._createBackup;\n  }\n\n  private async _update() {\n    if (this._createBackup) {\n      this._action = \"backup\";\n      try {\n        await createHassioPartialBackup(\n          this.hass,\n          this._dialogParams!.backupParams\n        );\n      } catch (err: any) {\n        this._error = extractApiErrorMessage(err);\n        this._action = null;\n        return;\n      }\n    }\n\n    this._action = \"update\";\n    try {\n      await this._dialogParams!.updateHandler!();\n    } catch (err: any) {\n      if (this.hass.connection.connected && !ignoreSupervisorError(err)) {\n        this._error = extractApiErrorMessage(err);\n        this._action = null;\n      }\n      return;\n    }\n\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n\n        ha-settings-row {\n          margin-top: 32px;\n          padding: 0;\n        }\n\n        ha-circular-progress {\n          display: block;\n          margin: 32px;\n          text-align: center;\n        }\n\n        .progress-text {\n          text-align: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-supervisor-update\": DialogSupervisorUpdate;\n  }\n}\n"],"names":[],"sourceRoot":""}