{"version":3,"file":"7ebd2ad4.js","mappings":";AAmIA;AAEA;AAGA;AACA;AAGA;;AAGA;AACA;AACA;;;AAGA;AAEA;;;AAKA;;AAEA;;;AAGA;;;;AAIA;;AAEA;;;AAGA;;;;;AAMA;;AAGA;;;AAGA;;;;;AAOA;AACA;;;;;AAKA;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;AAEA;AAIA;;AAGA;;;AAGA;AACA;;;;AAKA;;AAGA;;;AAGA;AACA;;;AAGA;AAEA;;;AAGA;AACA;;;AAIA;AA7MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAkTA;AACA;AACA;AACA;AAMA;;;;;AAKA;AACA;AACA;AACA;;;AAKA;AC3XA;AAKA;AACA;;;;;;;;;;;;;;;;;AAjBA","sources":["webpack://home-assistant-frontend/./hassio/src/components/supervisor-backup-content.ts","webpack://home-assistant-frontend/./hassio/src/components/supervisor-formfield-label.ts"],"sourcesContent":["import { mdiFolder, mdiHomeAssistant, mdiPuzzle } from \"@mdi/js\";\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { atLeastVersion } from \"../../../src/common/config/version\";\nimport { formatDate } from \"../../../src/common/datetime/format_date\";\nimport { formatDateTime } from \"../../../src/common/datetime/format_date_time\";\nimport { LocalizeFunc } from \"../../../src/common/translations/localize\";\nimport \"../../../src/components/ha-checkbox\";\nimport \"../../../src/components/ha-formfield\";\nimport \"../../../src/components/ha-radio\";\nimport type { HaRadio } from \"../../../src/components/ha-radio\";\nimport {\n  HassioFullBackupCreateParams,\n  HassioPartialBackupCreateParams,\n  HassioBackupDetail,\n} from \"../../../src/data/hassio/backup\";\nimport { Supervisor } from \"../../../src/data/supervisor/supervisor\";\nimport { PolymerChangedEvent } from \"../../../src/polymer-types\";\nimport { HomeAssistant } from \"../../../src/types\";\nimport \"./supervisor-formfield-label\";\n\ninterface CheckboxItem {\n  slug: string;\n  checked: boolean;\n  name: string;\n}\n\ninterface AddonCheckboxItem extends CheckboxItem {\n  version: string;\n}\n\nconst _computeFolders = (folders): CheckboxItem[] => {\n  const list: CheckboxItem[] = [];\n  if (folders.includes(\"homeassistant\")) {\n    list.push({\n      slug: \"homeassistant\",\n      name: \"Home Assistant configuration\",\n      checked: false,\n    });\n  }\n  if (folders.includes(\"ssl\")) {\n    list.push({ slug: \"ssl\", name: \"SSL\", checked: false });\n  }\n  if (folders.includes(\"share\")) {\n    list.push({ slug: \"share\", name: \"Share\", checked: false });\n  }\n  if (folders.includes(\"media\")) {\n    list.push({ slug: \"media\", name: \"Media\", checked: false });\n  }\n  if (folders.includes(\"addons/local\")) {\n    list.push({ slug: \"addons/local\", name: \"Local add-ons\", checked: false });\n  }\n  return list.sort((a, b) => (a.name > b.name ? 1 : -1));\n};\n\nconst _computeAddons = (addons): AddonCheckboxItem[] =>\n  addons\n    .map((addon) => ({\n      slug: addon.slug,\n      name: addon.name,\n      version: addon.version,\n      checked: false,\n    }))\n    .sort((a, b) => (a.name > b.name ? 1 : -1));\n\n@customElement(\"supervisor-backup-content\")\nexport class SupervisorBackupContent extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public localize?: LocalizeFunc;\n\n  @property({ attribute: false }) public supervisor?: Supervisor;\n\n  @property({ attribute: false }) public backup?: HassioBackupDetail;\n\n  @property() public backupType: HassioBackupDetail[\"type\"] = \"full\";\n\n  @property({ attribute: false }) public folders?: CheckboxItem[];\n\n  @property({ attribute: false }) public addons?: AddonCheckboxItem[];\n\n  @property({ type: Boolean }) public homeAssistant = false;\n\n  @property({ type: Boolean }) public backupHasPassword = false;\n\n  @property({ type: Boolean }) public onboarding = false;\n\n  @property() public backupName = \"\";\n\n  @property() public backupPassword = \"\";\n\n  @property() public confirmBackupPassword = \"\";\n\n  @query(\"paper-input, ha-radio, ha-checkbox\", true) private _focusTarget;\n\n  public willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n    if (!this.hasUpdated) {\n      this.folders = _computeFolders(\n        this.backup\n          ? this.backup.folders\n          : [\"homeassistant\", \"ssl\", \"share\", \"media\", \"addons/local\"]\n      );\n      this.addons = _computeAddons(\n        this.backup ? this.backup.addons : this.supervisor?.supervisor.addons\n      );\n      this.backupType = this.backup?.type || \"full\";\n      this.backupName = this.backup?.name || \"\";\n      this.backupHasPassword = this.backup?.protected || false;\n    }\n  }\n\n  public override focus() {\n    this._focusTarget?.focus();\n  }\n\n  private _localize = (string: string) =>\n    this.supervisor?.localize(`backup.${string}`) ||\n    this.localize!(`ui.panel.page-onboarding.restore.${string}`);\n\n  protected render(): TemplateResult {\n    if (!this.onboarding && !this.supervisor) {\n      return html``;\n    }\n    const foldersSection =\n      this.backupType === \"partial\" ? this._getSection(\"folders\") : undefined;\n    const addonsSection =\n      this.backupType === \"partial\" ? this._getSection(\"addons\") : undefined;\n\n    return html`\n      ${this.backup\n        ? html`<div class=\"details\">\n            ${this.backup.type === \"full\"\n              ? this._localize(\"full_backup\")\n              : this._localize(\"partial_backup\")}\n            (${Math.ceil(this.backup.size * 10) / 10 + \" MB\"})<br />\n            ${this.hass\n              ? formatDateTime(new Date(this.backup.date), this.hass.locale)\n              : this.backup.date}\n          </div>`\n        : html`<paper-input\n            name=\"backupName\"\n            .label=${this._localize(\"name\")}\n            .value=${this.backupName}\n            @value-changed=${this._handleTextValueChanged}\n          >\n          </paper-input>`}\n      ${!this.backup || this.backup.type === \"full\"\n        ? html`<div class=\"sub-header\">\n              ${!this.backup\n                ? this._localize(\"type\")\n                : this._localize(\"select_type\")}\n            </div>\n            <div class=\"backup-types\">\n              <ha-formfield .label=${this._localize(\"full_backup\")}>\n                <ha-radio\n                  @change=${this._handleRadioValueChanged}\n                  value=\"full\"\n                  name=\"backupType\"\n                  .checked=${this.backupType === \"full\"}\n                >\n                </ha-radio>\n              </ha-formfield>\n              <ha-formfield .label=${this._localize(\"partial_backup\")}>\n                <ha-radio\n                  @change=${this._handleRadioValueChanged}\n                  value=\"partial\"\n                  name=\"backupType\"\n                  .checked=${this.backupType === \"partial\"}\n                >\n                </ha-radio>\n              </ha-formfield>\n            </div>`\n        : \"\"}\n      ${this.backupType === \"partial\"\n        ? html`<div class=\"partial-picker\">\n            <ha-formfield\n              .label=${html`<supervisor-formfield-label\n                label=\"Home Assistant\"\n                .iconPath=${mdiHomeAssistant}\n                .version=${this.backup\n                  ? this.backup.homeassistant\n                  : this.hass.config.version}\n              >\n              </supervisor-formfield-label>`}\n            >\n              <ha-checkbox\n                .checked=${this.homeAssistant}\n                @click=${this.toggleHomeAssistant}\n              >\n              </ha-checkbox>\n            </ha-formfield>\n\n            ${foldersSection?.templates.length\n              ? html`\n                  <ha-formfield\n                    .label=${html`<supervisor-formfield-label\n                      .label=${this._localize(\"folders\")}\n                      .iconPath=${mdiFolder}\n                    >\n                    </supervisor-formfield-label>`}\n                  >\n                    <ha-checkbox\n                      @change=${this._toggleSection}\n                      .checked=${foldersSection.checked}\n                      .indeterminate=${foldersSection.indeterminate}\n                      .section=${\"folders\"}\n                    >\n                    </ha-checkbox>\n                  </ha-formfield>\n                  <div class=\"section-content\">${foldersSection.templates}</div>\n                `\n              : \"\"}\n            ${addonsSection?.templates.length\n              ? html`\n                  <ha-formfield\n                    .label=${html`<supervisor-formfield-label\n                      .label=${this._localize(\"addons\")}\n                      .iconPath=${mdiPuzzle}\n                    >\n                    </supervisor-formfield-label>`}\n                  >\n                    <ha-checkbox\n                      @change=${this._toggleSection}\n                      .checked=${addonsSection.checked}\n                      .indeterminate=${addonsSection.indeterminate}\n                      .section=${\"addons\"}\n                    >\n                    </ha-checkbox>\n                  </ha-formfield>\n                  <div class=\"section-content\">${addonsSection.templates}</div>\n                `\n              : \"\"}\n          </div> `\n        : \"\"}\n      ${this.backupType === \"partial\" &&\n      (!this.backup || this.backupHasPassword)\n        ? html`<hr />`\n        : \"\"}\n      ${!this.backup\n        ? html`<ha-formfield\n            class=\"password\"\n            .label=${this._localize(\"password_protection\")}\n          >\n            <ha-checkbox\n              .checked=${this.backupHasPassword}\n              @change=${this._toggleHasPassword}\n            >\n            </ha-checkbox>\n          </ha-formfield>`\n        : \"\"}\n      ${this.backupHasPassword\n        ? html`\n            <paper-input\n              .label=${this._localize(\"password\")}\n              type=\"password\"\n              name=\"backupPassword\"\n              .value=${this.backupPassword}\n              @value-changed=${this._handleTextValueChanged}\n            >\n            </paper-input>\n            ${!this.backup\n              ? html` <paper-input\n                  .label=${this._localize(\"confirm_password\")}\n                  type=\"password\"\n                  name=\"confirmBackupPassword\"\n                  .value=${this.confirmBackupPassword}\n                  @value-changed=${this._handleTextValueChanged}\n                >\n                </paper-input>`\n              : \"\"}\n          `\n        : \"\"}\n    `;\n  }\n\n  private toggleHomeAssistant() {\n    this.homeAssistant = !this.homeAssistant;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .partial-picker ha-formfield {\n        display: block;\n      }\n      .partial-picker ha-checkbox {\n        --mdc-checkbox-touch-target-size: 32px;\n      }\n      .partial-picker {\n        display: block;\n        margin: 0px -6px;\n      }\n      supervisor-formfield-label {\n        display: inline-flex;\n        align-items: center;\n      }\n      hr {\n        border-color: var(--divider-color);\n        border-bottom: none;\n        margin: 16px 0;\n      }\n      .details {\n        color: var(--secondary-text-color);\n      }\n      .section-content {\n        display: flex;\n        flex-direction: column;\n        margin-left: 30px;\n      }\n      ha-formfield.password {\n        display: block;\n        margin: 0 -14px -16px;\n      }\n      .backup-types {\n        display: flex;\n        margin-left: -13px;\n      }\n      .sub-header {\n        margin-top: 8px;\n      }\n    `;\n  }\n\n  public backupDetails():\n    | HassioPartialBackupCreateParams\n    | HassioFullBackupCreateParams {\n    const data: any = {};\n\n    if (!this.backup) {\n      data.name = this.backupName || formatDate(new Date(), this.hass.locale);\n    }\n\n    if (this.backupHasPassword) {\n      data.password = this.backupPassword;\n      if (!this.backup) {\n        data.confirm_password = this.confirmBackupPassword;\n      }\n    }\n\n    if (this.backupType === \"full\") {\n      return data;\n    }\n\n    const addons = this.addons\n      ?.filter((addon) => addon.checked)\n      .map((addon) => addon.slug);\n    const folders = this.folders\n      ?.filter((folder) => folder.checked)\n      .map((folder) => folder.slug);\n\n    if (addons?.length) {\n      data.addons = addons;\n    }\n    if (folders?.length) {\n      data.folders = folders;\n    }\n    data.homeassistant = this.homeAssistant;\n\n    return data;\n  }\n\n  private _getSection(section: string) {\n    const templates: TemplateResult[] = [];\n    const addons =\n      section === \"addons\"\n        ? new Map(\n            this.supervisor?.addon.addons.map((item) => [item.slug, item])\n          )\n        : undefined;\n    let checkedItems = 0;\n    this[section].forEach((item) => {\n      templates.push(html`<ha-formfield\n        .label=${html`<supervisor-formfield-label\n          .label=${item.name}\n          .iconPath=${section === \"addons\" ? mdiPuzzle : mdiFolder}\n          .imageUrl=${section === \"addons\" &&\n          !this.onboarding &&\n          atLeastVersion(this.hass.config.version, 0, 105) &&\n          addons?.get(item.slug)?.icon\n            ? `/api/hassio/addons/${item.slug}/icon`\n            : undefined}\n          .version=${item.version}\n        >\n        </supervisor-formfield-label>`}\n      >\n        <ha-checkbox\n          .item=${item}\n          .checked=${item.checked}\n          .section=${section}\n          @change=${this._updateSectionEntry}\n        >\n        </ha-checkbox>\n      </ha-formfield>`);\n\n      if (item.checked) {\n        checkedItems++;\n      }\n    });\n\n    const checked = checkedItems === this[section].length;\n\n    return {\n      templates,\n      checked,\n      indeterminate: !checked && checkedItems !== 0,\n    };\n  }\n\n  private _handleRadioValueChanged(ev: CustomEvent) {\n    const input = ev.currentTarget as HaRadio;\n    this[input.name] = input.value;\n  }\n\n  private _handleTextValueChanged(ev: PolymerChangedEvent<string>) {\n    const input = ev.currentTarget as PaperInputElement;\n    this[input.name!] = ev.detail.value;\n  }\n\n  private _toggleHasPassword(): void {\n    this.backupHasPassword = !this.backupHasPassword;\n  }\n\n  private _toggleSection(ev): void {\n    const section = ev.currentTarget.section;\n\n    this[section] = (section === \"addons\" ? this.addons : this.folders)!.map(\n      (item) => ({\n        ...item,\n        checked: ev.currentTarget.checked,\n      })\n    );\n  }\n\n  private _updateSectionEntry(ev): void {\n    const item = ev.currentTarget.item;\n    const section = ev.currentTarget.section;\n    this[section] = this[section].map((entry) =>\n      entry.slug === item.slug\n        ? {\n            ...entry,\n            checked: ev.currentTarget.checked,\n          }\n        : entry\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"supervisor-backup-content\": SupervisorBackupContent;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../src/components/ha-svg-icon\";\n\n@customElement(\"supervisor-formfield-label\")\nclass SupervisorFormfieldLabel extends LitElement {\n  @property({ type: String }) public label!: string;\n\n  @property({ type: String }) public imageUrl?: string;\n\n  @property({ type: String }) public iconPath?: string;\n\n  @property({ type: String }) public version?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.imageUrl\n        ? html`<img loading=\"lazy\" .src=${this.imageUrl} class=\"icon\" />`\n        : this.iconPath\n        ? html`<ha-svg-icon .path=${this.iconPath} class=\"icon\"></ha-svg-icon>`\n        : \"\"}\n      <span class=\"label\">${this.label}</span>\n      ${this.version\n        ? html`<span class=\"version\">(${this.version})</span>`\n        : \"\"}\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      .label {\n        margin-right: 4px;\n      }\n      .version {\n        color: var(--secondary-text-color);\n      }\n      .icon {\n        max-height: 22px;\n        max-width: 22px;\n        margin-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"supervisor-formfield-label\": SupervisorFormfieldLabel;\n  }\n}\n"],"names":[],"sourceRoot":""}