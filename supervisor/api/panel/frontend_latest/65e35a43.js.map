{"version":3,"file":"65e35a43.js","mappings":";;AAuCA;AAUA;AACA;;AAEA;;;;;;;AAQA;;AAzBA;;;;;;;;;;;;;;;AAZA;;;;;;;ACwDA;AACA;;;AAGA;;AAGA;;;;AAMA;AACA;AACA;AACA;AACA;;;AAGA;;AAIA;AACA;;;;AAIA;;;AAGA;;;;AAKA;AACA;AAMA;;;;;AAKA;;;AAKA;AACA;;;AAGA;;;;;;;AAOA;AAsBA;AACA;;;AAOA;;AAOA;;AAEA;;AAKA;AACA;AACA;;AAEA;;;;AA3CA;;AAIA;;AAIA;AAEA;AAGA;AAlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlHA","sources":["webpack://home-assistant-frontend/./src/components/media-player/ha-media-upload-button.ts","webpack://home-assistant-frontend/./src/components/media-player/dialog-media-manage.ts"],"sourcesContent":["import { mdiUpload } from \"@mdi/js\";\nimport \"@material/mwc-button\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { MediaPlayerItem } from \"../../data/media-player\";\nimport \"../ha-circular-progress\";\nimport \"../ha-svg-icon\";\nimport {\n  isLocalMediaSourceContentId,\n  uploadLocalMedia,\n} from \"../../data/media_source\";\nimport type { HomeAssistant } from \"../../types\";\nimport { showAlertDialog } from \"../../dialogs/generic/show-dialog-box\";\n\ndeclare global {\n  interface HASSDomEvents {\n    uploading: unknown;\n    \"media-refresh\": unknown;\n  }\n}\n\n@customElement(\"ha-media-upload-button\")\nclass MediaUploadButton extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() currentItem?: MediaPlayerItem;\n\n  @state() _uploading = 0;\n\n  protected render(): TemplateResult {\n    if (\n      !this.currentItem ||\n      !isLocalMediaSourceContentId(this.currentItem.media_content_id || \"\")\n    ) {\n      return html``;\n    }\n    return html`\n      <mwc-button\n        .label=${this._uploading > 0\n          ? this.hass.localize(\n              \"ui.components.media-browser.file_management.uploading\",\n              {\n                count: this._uploading,\n              }\n            )\n          : this.hass.localize(\n              \"ui.components.media-browser.file_management.add_media\"\n            )}\n        .disabled=${this._uploading > 0}\n        @click=${this._startUpload}\n      >\n        ${this._uploading > 0\n          ? html`\n              <ha-circular-progress\n                size=\"tiny\"\n                active\n                alt=\"\"\n                slot=\"icon\"\n              ></ha-circular-progress>\n            `\n          : html` <ha-svg-icon .path=${mdiUpload} slot=\"icon\"></ha-svg-icon> `}\n      </mwc-button>\n    `;\n  }\n\n  private async _startUpload() {\n    if (this._uploading > 0) {\n      return;\n    }\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \"audio/*,video/*,image/*\";\n    input.multiple = true;\n    input.addEventListener(\n      \"change\",\n      async () => {\n        fireEvent(this, \"uploading\");\n        const files = input.files!;\n        document.body.removeChild(input);\n        const target = this.currentItem!.media_content_id!;\n\n        for (let i = 0; i < files.length; i++) {\n          this._uploading = files.length - i;\n\n          try {\n            // eslint-disable-next-line no-await-in-loop\n            await uploadLocalMedia(this.hass, target, files[i]);\n          } catch (err: any) {\n            showAlertDialog(this, {\n              text: this.hass.localize(\n                \"ui.components.media-browser.file_management.upload_failed\",\n                {\n                  reason: err.message || err,\n                }\n              ),\n            });\n            break;\n          }\n        }\n        this._uploading = 0;\n        fireEvent(this, \"media-refresh\");\n      },\n      { once: true }\n    );\n    // https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n    input.style.display = \"none\";\n    document.body.append(input);\n    input.click();\n  }\n\n  static styles = css`\n    mwc-button {\n      /* We use icon + text to show disabled state */\n      --mdc-button-disabled-ink-color: --mdc-theme-primary;\n    }\n\n    ha-svg-icon[slot=\"icon\"],\n    ha-circular-progress[slot=\"icon\"] {\n      vertical-align: middle;\n    }\n\n    :host-context([style*=\"direction: rtl;\"]) ha-svg-icon[slot=\"icon\"] {\n      margin-left: 8px;\n      margin-right: 0px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-media-upload-button\": MediaUploadButton;\n  }\n}\n","import { animate } from \"@lit-labs/motion\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiClose, mdiDelete } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../common/util/compute_rtl\";\nimport {\n  MediaClassBrowserSettings,\n  MediaPlayerItem,\n} from \"../../data/media-player\";\nimport {\n  browseLocalMediaPlayer,\n  removeLocalMedia,\n} from \"../../data/media_source\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-circular-progress\";\nimport \"../ha-dialog\";\nimport \"../ha-header-bar\";\nimport \"../ha-svg-icon\";\nimport \"../ha-check-list-item\";\nimport \"./ha-media-player-browse\";\nimport \"./ha-media-upload-button\";\nimport type { MediaManageDialogParams } from \"./show-media-manage-dialog\";\n\n@customElement(\"dialog-media-manage\")\nclass DialogMediaManage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _currentItem?: MediaPlayerItem;\n\n  @state() private _params?: MediaManageDialogParams;\n\n  @state() private _uploading = false;\n\n  @state() private _deleting = false;\n\n  @state() private _selected = new Set<number>();\n\n  private _filesChanged = false;\n\n  public showDialog(params: MediaManageDialogParams): void {\n    this._params = params;\n    this._refreshMedia();\n  }\n\n  public closeDialog() {\n    if (this._filesChanged && this._params!.onClose) {\n      this._params!.onClose();\n    }\n    this._params = undefined;\n    this._currentItem = undefined;\n    this._uploading = false;\n    this._deleting = false;\n    this._filesChanged = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const children =\n      this._currentItem?.children?.filter((child) => !child.can_expand) || [];\n\n    let fileIndex = 0;\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n        flexContent\n        .heading=${this._params.currentItem.title}\n        @closed=${this.closeDialog}\n      >\n        <ha-header-bar slot=\"heading\">\n          ${this._selected.size === 0\n            ? html`\n                <span slot=\"title\">\n                  ${this.hass.localize(\n                    \"ui.components.media-browser.file_management.title\"\n                  )}\n                </span>\n\n                <ha-media-upload-button\n                  .disabled=${this._deleting}\n                  .hass=${this.hass}\n                  .currentItem=${this._params.currentItem}\n                  @uploading=${this._startUploading}\n                  @media-refresh=${this._doneUploading}\n                  slot=\"actionItems\"\n                ></ha-media-upload-button>\n                ${this._uploading\n                  ? \"\"\n                  : html`\n                      <ha-icon-button\n                        .label=${this.hass.localize(\"ui.dialogs.generic.close\")}\n                        .path=${mdiClose}\n                        dialogAction=\"close\"\n                        slot=\"actionItems\"\n                        class=\"header_button\"\n                        dir=${computeRTLDirection(this.hass)}\n                      ></ha-icon-button>\n                    `}\n              `\n            : html`\n                <mwc-button\n                  class=\"danger\"\n                  slot=\"title\"\n                  .disabled=${this._deleting}\n                  .label=${this.hass.localize(\n                    `ui.components.media-browser.file_management.${\n                      this._deleting ? \"deleting\" : \"delete\"\n                    }`,\n                    { count: this._selected.size }\n                  )}\n                  @click=${this._handleDelete}\n                >\n                  <ha-svg-icon .path=${mdiDelete} slot=\"icon\"></ha-svg-icon>\n                </mwc-button>\n\n                ${this._deleting\n                  ? \"\"\n                  : html`\n                      <mwc-button\n                        slot=\"actionItems\"\n                        .label=${`Deselect all`}\n                        @click=${this._handleDeselectAll}\n                      >\n                        <ha-svg-icon\n                          .path=${mdiClose}\n                          slot=\"icon\"\n                        ></ha-svg-icon>\n                      </mwc-button>\n                    `}\n              `}\n        </ha-header-bar>\n        ${!this._currentItem\n          ? html`\n              <div class=\"refresh\">\n                <ha-circular-progress active></ha-circular-progress>\n              </div>\n            `\n          : !children.length\n          ? html`<div class=\"no-items\">\n              <p>\n                ${this.hass.localize(\n                  \"ui.components.media-browser.file_management.no_items\"\n                )}\n              </p>\n              ${this._currentItem?.children?.length\n                ? html`<span class=\"folders\"\n                    >${this.hass.localize(\n                      \"ui.components.media-browser.file_management.folders_not_supported\"\n                    )}</span\n                  >`\n                : \"\"}\n            </div>`\n          : html`\n              <mwc-list multi @selected=${this._handleSelected}>\n                ${repeat(\n                  children,\n                  (item) => item.media_content_id,\n                  (item) => {\n                    const icon = html`\n                      <ha-svg-icon\n                        slot=\"graphic\"\n                        .path=${MediaClassBrowserSettings[\n                          item.media_class === \"directory\"\n                            ? item.children_media_class || item.media_class\n                            : item.media_class\n                        ].icon}\n                      ></ha-svg-icon>\n                    `;\n                    return html`\n                      <ha-check-list-item\n                        ${animate({\n                          id: item.media_content_id,\n                          skipInitial: true,\n                        })}\n                        graphic=\"icon\"\n                        .disabled=${this._uploading || this._deleting}\n                        .selected=${this._selected.has(fileIndex++)}\n                        .item=${item}\n                      >\n                        ${icon} ${item.title}\n                      </ha-check-list-item>\n                    `;\n                  }\n                )}\n              </mwc-list>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _handleSelected(ev) {\n    this._selected = ev.detail.index;\n  }\n\n  private _startUploading() {\n    this._uploading = true;\n    this._filesChanged = true;\n  }\n\n  private _doneUploading() {\n    this._uploading = false;\n    this._refreshMedia();\n  }\n\n  private _handleDeselectAll() {\n    if (this._selected.size) {\n      this._selected = new Set();\n    }\n  }\n\n  private async _handleDelete() {\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.media-browser.file_management.confirm_delete\",\n          { count: this._selected.size }\n        ),\n        warning: true,\n      }))\n    ) {\n      return;\n    }\n    this._filesChanged = true;\n    this._deleting = true;\n\n    const toDelete: MediaPlayerItem[] = [];\n    let fileIndex = 0;\n    this._currentItem!.children!.forEach((item) => {\n      if (item.can_expand) {\n        return;\n      }\n      if (this._selected.has(fileIndex++)) {\n        toDelete.push(item);\n      }\n    });\n\n    try {\n      await Promise.all(\n        toDelete.map(async (item) => {\n          await removeLocalMedia(this.hass, item.media_content_id);\n          this._currentItem = {\n            ...this._currentItem!,\n            children: this._currentItem!.children!.filter((i) => i !== item),\n          };\n        })\n      );\n    } finally {\n      this._deleting = false;\n      this._selected = new Set();\n    }\n  }\n\n  private async _refreshMedia() {\n    this._selected = new Set();\n    this._currentItem = undefined;\n    this._currentItem = await browseLocalMediaPlayer(\n      this.hass,\n      this._params!.currentItem.media_content_id\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-z-index: 8;\n          --dialog-content-padding: 0;\n        }\n\n        @media (min-width: 800px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 800px;\n            --dialog-surface-position: fixed;\n            --dialog-surface-top: 40px;\n            --mdc-dialog-max-height: calc(100vh - 72px);\n          }\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          border-bottom: 1px solid var(--divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        ha-media-upload-button,\n        mwc-button {\n          --mdc-theme-primary: var(--mdc-theme-on-primary);\n        }\n\n        mwc-list {\n          direction: ltr;\n        }\n\n        .danger {\n          --mdc-theme-primary: var(--error-color);\n        }\n\n        ha-svg-icon[slot=\"icon\"] {\n          vertical-align: middle;\n        }\n\n        :host-context([style*=\"direction: rtl;\"]) ha-svg-icon[slot=\"icon\"] {\n          margin-left: 8px !important;\n          margin-right: 0px !important;\n        }\n\n        .refresh {\n          display: flex;\n          height: 200px;\n          justify-content: center;\n          align-items: center;\n        }\n\n        .no-items {\n          text-align: center;\n          padding: 16px;\n        }\n        .folders {\n          color: var(--secondary-text-color);\n          font-style: italic;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-media-manage\": DialogMediaManage;\n  }\n}\n"],"names":[],"sourceRoot":""}