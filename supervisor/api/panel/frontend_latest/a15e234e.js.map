{"version":3,"file":"a15e234e.js","mappings":";;;AAiDA;AACA;AACA;;AAEA;;;AAMA;;AAGA;;AAKA;;AAEA;AAEA;;;AAIA;AACA;AACA;AACA;AAGA;;AAIA;;AAGA;AAEA;AACA;;;;AAMA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvFA","sources":["webpack://home-assistant-frontend/./src/dialogs/generic/dialog-box.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-switch\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { DialogBoxParams } from \"./show-dialog-box\";\n\n@customElement(\"dialog-box\")\nclass DialogBox extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogBoxParams;\n\n  @state() private _value?: string;\n\n  public async showDialog(params: DialogBoxParams): Promise<void> {\n    this._params = params;\n    if (params.prompt) {\n      this._value = params.defaultValue;\n    }\n  }\n\n  public closeDialog(): boolean {\n    if (this._params?.confirmation || this._params?.prompt) {\n      return false;\n    }\n    if (this._params) {\n      this._dismiss();\n      return true;\n    }\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const confirmPrompt = this._params.confirmation || this._params.prompt;\n\n    return html`\n      <ha-dialog\n        open\n        ?scrimClickAction=${confirmPrompt}\n        ?escapeKeyAction=${confirmPrompt}\n        @closed=${this._dialogClosed}\n        defaultAction=\"ignore\"\n        .heading=${this._params.title\n          ? this._params.title\n          : this._params.confirmation &&\n            this.hass.localize(\"ui.dialogs.generic.default_confirmation_title\")}\n      >\n        <div>\n          ${this._params.text\n            ? html`\n                <p\n                  class=${classMap({\n                    \"no-bottom-padding\": Boolean(this._params.prompt),\n                    warning: Boolean(this._params.warning),\n                  })}\n                >\n                  ${this._params.text}\n                </p>\n              `\n            : \"\"}\n          ${this._params.prompt\n            ? html`\n                <paper-input\n                  dialogInitialFocus\n                  .value=${this._value}\n                  @keyup=${this._handleKeyUp}\n                  @value-changed=${this._valueChanged}\n                  .label=${this._params.inputLabel\n                    ? this._params.inputLabel\n                    : \"\"}\n                  .type=${this._params.inputType\n                    ? this._params.inputType\n                    : \"text\"}\n                ></paper-input>\n              `\n            : \"\"}\n        </div>\n        ${confirmPrompt &&\n        html`\n          <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n            ${this._params.dismissText\n              ? this._params.dismissText\n              : this.hass.localize(\"ui.dialogs.generic.cancel\")}\n          </mwc-button>\n        `}\n        <mwc-button\n          @click=${this._confirm}\n          ?dialogInitialFocus=${!this._params.prompt}\n          slot=\"primaryAction\"\n        >\n          ${this._params.confirmText\n            ? this._params.confirmText\n            : this.hass.localize(\"ui.dialogs.generic.ok\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    this._value = ev.detail.value;\n  }\n\n  private _dismiss(): void {\n    if (this._params?.cancel) {\n      this._params.cancel();\n    }\n    this._close();\n  }\n\n  private _handleKeyUp(ev: KeyboardEvent) {\n    if (ev.keyCode === 13) {\n      this._confirm();\n    }\n  }\n\n  private _confirm(): void {\n    if (this._params!.confirm) {\n      this._params!.confirm(this._value);\n    }\n    this._close();\n  }\n\n  private _dialogClosed(ev) {\n    if (ev.detail.action === \"ignore\") {\n      return;\n    }\n    this._dismiss();\n  }\n\n  private _close(): void {\n    if (!this._params) {\n      return;\n    }\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        :host([inert]) {\n          pointer-events: initial !important;\n          cursor: initial !important;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        p {\n          margin: 0;\n          padding-top: 6px;\n          padding-bottom: 24px;\n          color: var(--primary-text-color);\n        }\n        .no-bottom-padding {\n          padding-bottom: 0;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        ha-dialog {\n          /* Place above other dialogs */\n          --dialog-z-index: 104;\n        }\n        .warning {\n          color: var(--warning-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-box\": DialogBox;\n  }\n}\n"],"names":[],"sourceRoot":""}